CONFIG_DIR=${CDIR}
[ -d "${CONFIG_DIR}/scripts" ] && CONFIG_DIR="${CONFIG_DIR}/scripts"

export MAIN_ARCHIVE=http://archive.ubuntu.com/ubuntu
export SRC_ARCHIVE=http://archive.ubuntu.com/ubuntu

export ARCHIVE_PORTS=http://ports.ubuntu.com/ubuntu-ports
export SRC_ARCHIVE_PORTS=http://ports.ubuntu.com/ubuntu-ports

export DEF_DIR=usr3
export CH_ROOT=/${DEF_DIR}/chroots

# Default each entry to the one before if empty.
sparse_populate()
{
	local array="$1"
	local idx=0
	local default
	local current

	while [ "$idx" -lt "$releases_idx" ]
	do
		eval "current=\"\${${array}[$idx]}\""
		if [ "$current" != "" ]; then
			default="$current"
		else
			eval "${array}[$idx]='$default'"
		fi
		idx=$((idx+1))
	done
}

# RELEASES: handle accumulating releases and flagging them expired (EOL)
releases=()
releases_idx=0
expired_releases=()
old_releases=()
release()
{
	releases[$releases_idx]="$1"
	eval map_release_$1='$releases_idx'
	case "$2" in
	expired)
		expired_releases[$releases_idx]="Y"
		;;
	old)
		old_releases[$releases_idx]="Y"
		;;
	esac
	releases_idx=$((releases_idx+1))
}
release_idx()
{
	eval "echo \$map_release_$1"
}
not_expired_release()
{
	local idx=$(release_idx "$1")
	[ "${expired_releases[$idx]}" != 'Y' ]
}
is_old_release()
{
	local idx=$(release_idx "$1")
	[ "${old_releases[$idx]}" = 'Y' ]
}

# ARCHES: architectures for which we will construct a chroot.
#release_arches()
#{
#	local idx=$(release_idx "$1")
#	arches[$idx]="$2"
#}
#release_arches_sparse()
#{
#	sparse_populate arches
#}
#check_release_arch()
#{
#	local RELEASE=$1
#	local ARCH=$2
#	local es=1
#	local idx=$(release_idx "$1")
#
#	RELEASE_ARCH=
#	case " ${arches[$idx]} " in
#	*\ $ARCH\ *)	es=0; RELEASE_ARCH="$RELEASE-$ARCH" ;;
#	esac
#
#	if [ "${es}" = "1" ]; then
#		echo "No record matches this release (${RELEASE}) and arch (${ARCH})"
#	fi
#	return $es
#}

check_release_arch()
{
	local RELEASE=$1
	local ARCH=$2
	local idx=$(release_idx "$1")
	local iam

	RELEASE_ARCH=

	# Check if we are a build architecture.
	get_build_arches "$RELEASE"

	case " $BUILD_ARCHES " in
	*\ $ARCH\ *) ;;
	*)
		echo "${ARCH} is not a build architecture for ${RELEASE} -- no chroot needed"
		return 1
		;;
	esac

	iam="$(dpkg --print-architecture)"
	#iam="${IAM}"
	case "$iam" in
	amd64)		iam="amd64 i386" ;;
	esac

	case " $iam " in
	*\ $ARCH\ *) ;;
	*)
		echo "${ARCH} is not an architecture ${iam} can build -- no chroot needed"
		return 1
		;;
	esac

	RELEASE_ARCH="$RELEASE-$ARCH"
	return 0
}

# BUILD ARCHES: architectures on which we can build
release_build_arches()
{
	local idx=$(release_idx "$1")
	build_arches[$idx]="$2"
}
release_build_arches_sparse()
{
	sparse_populate build_arches
}
get_build_arches()
{
	local idx=$(release_idx "$1")
	BUILD_ARCHES="${build_arches[$idx]}"
}

# POCKETS: the pockets we should enable in the chroot.
release_pockets()
{
	local idx=$(release_idx "$1")
	pockets[$idx]="$2"
}
release_pockets_sparse()
{
	sparse_populate pockets
}
get_pockets()
{
	local idx=$(release_idx "$1")
	POCKETS="${pockets[$idx]}"
}

# BUILD DEP: the install build dependencies for this chroot.
release_build_dep()
{
	local idx=$(release_idx "$1")
	build_dep[$idx]="$2"
}
release_build_dep_sparse()
{
	sparse_populate build_dep
}
get_build_dep()
{
	local idx=$(release_idx "$1")
	BUILD_DEP=${build_dep[$idx]}
}

# APT TRUSTED: determine key to use.
release_apt_trusted()
{
	local idx=$(release_idx "$1")
	apt_trusted[$idx]="$2"
}
release_apt_trusted_sparse()
{
	sparse_populate apt_trusted
}
get_apt_trusted()
{
	local idx=$(release_idx "$1")
	APT_TRUSTED=${apt_trusted[$idx]}
}

# Mirror related functions.
function valid_mirror_pocket ()
{
local SUITE=$1
local ARCH=$2
local INDEX=$3

#
# Make sure the mirror pocket exists. Otherwise, fall back to the
# Ubuntu archive.
#
if ports_arch ${ARCH}
then
	Contents=${mirror_ports_release[${INDEX}]}/dists/${SUITE}/main/binary-${ARCH}/Release
else
	Contents=${mirror_release[${INDEX}]}/dists/${SUITE}/main/binary-${ARCH}/Release
fi

if wget -q -O /dev/null ${Contents}
then
	es=0
else
	es=1
fi
return $es
}

#
# Return true if the input arch is considered a ports arch.
#
function ports_arch ()
{
	local ARCH=$1
	local es

	case "${ARCH}" in
	amd64|i386)	es=1 ;;
	*)		es=0 ;;
	esac

	return $es
}

#
# Find a mirror by looking at the host's /etc/apt/sources.list
#
function write_mirror ()
{
local SUITE=$1
local ARCH=$2
local TARG=$3

ARCHIVES="main universe"
SOURCE_URL=http://archive.ubuntu.com/ubuntu
SL=/etc/apt/sources.list

if ! get_pockets ${SUITE} ; then
	echo write_mirror: Bogus release ${SUITE}
	exit 1
fi

local index=0
for i in "${mirror_sites[@]}"
do
	if egrep "$i" ${SL} > /dev/null
	then
		echo > ${TARG}

		#
		# Make sure the mirror pocket exists. Otherwise, fall back to the
		# Ubuntu archive.
		#
		if ! valid_mirror_pocket ${SUITE} ${ARCH} ${index}
		then
			index=0
		fi

		if is_old_release ${SUITE}; then
			release_url="${mirror_old}"
			updates_url="${mirror_old}"
			security_url="${mirror_old}"
			SOURCE_URL="${mirror_old}"

		elif ports_arch ${ARCH}; then
			release_url="${mirror_ports_release[${index}]}"
			updates_url="${mirror_ports_updates[${index}]}"
			security_url="${mirror_ports_security[${index}]}"

		else
			release_url="${mirror_release[${index}]}"
			updates_url="${mirror_updates[${index}]}"
			security_url="${mirror_security[${index}]}"
		fi
		
		echo "deb ${release_url} ${SUITE} ${ARCHIVES}" >> ${TARG}
		echo "deb-src ${SOURCE_URL} ${SUITE} ${ARCHIVES}" >> ${TARG}
		
		if echo "$POCKETS" | grep -q updates
		then
			echo "deb ${updates_url} ${SUITE}-updates ${ARCHIVES}" >> ${TARG}
			echo "deb-src ${SOURCE_URL} ${SUITE}-updates ${ARCHIVES}" >> ${TARG}
		fi
		
		if echo "$POCKETS" | grep -q security
		then
			echo "deb ${security_url} ${SUITE}-security ${ARCHIVES}" >> ${TARG}
			echo "deb-src ${SOURCE_URL} ${SUITE}-security ${ARCHIVES}" >> ${TARG}
		fi
		
		if echo "$POCKETS" | grep -q proposed
		then
			echo "deb ${security_url} ${SUITE}-proposed ${ARCHIVES}" >> ${TARG}
			echo "deb-src ${SOURCE_URL} ${SUITE}-proposed ${ARCHIVES}" >> ${TARG}
		fi
		
		break;
	fi
        index=$((index+1))
done
}

function write_local_mirror ()
{
local SUITE=$1
local ARCH=$2
local TARG=$3
local MIRR=$4

ARCHIVES="main universe"
#SOURCE_URL=http://archive.ubuntu.com/ubuntu

if ! get_pockets ${SUITE} ; then
	echo write_mirror: Bogus release ${SUITE}
	exit 1
fi

release_url="${MIRR}"
updates_url="${MIRR}"
security_url="${MIRR}"
SOURCE_URL="${MIRR}"

echo >${TARG}

if echo "${POCKETS}" | grep release > /dev/null ; then
	echo "deb ${release_url} ${SUITE} ${ARCHIVES}" >> ${TARG}
	echo "deb-src ${SOURCE_URL} ${SUITE} ${ARCHIVES}" >> ${TARG}
fi
if echo "${POCKETS}" | grep updates > /dev/null ; then
	echo "deb ${updates_url} ${SUITE}-updates ${ARCHIVES}" >> ${TARG}
	echo "deb-src ${SOURCE_URL} ${SUITE}-updates ${ARCHIVES}" >> ${TARG}
fi
if echo "${POCKETS}" | grep security > /dev/null ; then
	echo "deb ${security_url} ${SUITE}-security ${ARCHIVES}" >> ${TARG}
	echo "deb-src ${SOURCE_URL} ${SUITE}-security ${ARCHIVES}" >> ${TARG}
fi
if echo "${POCKETS}" | grep proposed > /dev/null ; then
	echo "deb ${security_url} ${SUITE}-proposed ${ARCHIVES}" >> ${TARG}
	echo "deb-src ${SOURCE_URL} ${SUITE}-proposed ${ARCHIVES}" >> ${TARG}
fi
}

#
# Try to find the suite mirror by looking at the host.
#
function get_suite_mirror ()
{
local SUITE=$1

SL=/etc/apt/sources.list

if ! get_pockets ${SUITE} ; then
	echo get_suite_mirror: Bogus release ${SUITE}
	exit 1
fi

local index=0
for i in "${mirror_sites[@]}"
do
	if egrep "$i" ${SL} > /dev/null
	then
		#
		# Make sure the mirror pocket exists. Otherwise, fall back to the
		# Ubuntu archive.
		#
		if ! valid_mirror_pocket ${SUITE} ${ARCH} ${index}
		then
			index=0
		fi

		if is_old_release ${SUITE}; then
			export MIRROR="${mirror_old}"
		elif ports_arch ${ARCH}; then
			export MIRROR="${mirror_ports_release[${index}]}"
		else
			export MIRROR="${mirror_release[${index}]}"
		fi
		break;
	fi
        index=$((index+1))
done
}

# RELEASES: define all supported releases and flags those EOL
eval $($CONFIG_DIR/chroot-config release)

# ARCHES: defines the architectures for which chroots should be constructed
#release_arches dapper "i386 amd64"
#release_arches hardy "i386 amd64 lpia"
#release_arches lucid "i386 amd64 armel"
#release_arches precise "i386 amd64 armel armhf"
#release_arches quantal "i386 amd64 armhf armel"
#release_arches raring "amd64 i386"
#release_arches_sparse

# BUILD ARCHES: defines the architectures we can build for
release_build_arches dapper "amd64 i386"
release_build_arches precise "amd64 armel armhf i386 powerpc" 
release_build_arches trusty "amd64 arm64 armhf i386 powerpc ppc64el"
release_build_arches xenial "amd64 arm64 armhf i386 powerpc ppc64el s390x"
release_build_arches zesty "amd64 arm64 armhf i386 ppc64el s390x"
release_build_arches focal "amd64 arm64 armhf i386 ppc64el riscv64 s390x"
release_build_arches_sparse

# POCKETS: lists the pockets we should add in each chroot
release_pockets dapper "release security"
release_pockets_sparse

# BUILD DEP: define the build depends to install in each chroot
release_build_dep dapper "linux-source-2.6.15"
release_build_dep hardy "linux"
release_build_dep_sparse

# APT TRUSTED: define the builder-extra key type to use.
release_apt_trusted dapper "trusted.gpg"
release_apt_trusted bionic "trusted.asc"
release_apt_trusted_sparse

# Use as an index into mirror[] and mirror_ports[]
mirror_sites[3]="^deb .*ports\.ubuntu\.com"
mirror_sites[2]="^deb .*archive\.redvoodoo\.org"
mirror_sites[1]="^deb .*mirror\.rtg\.local"
mirror_sites[0]="^deb .*archive\.ubuntu\.com"

# The release and security mirrors
mirror_release[2]="http://archive.redvoodoo.org/ubuntu"
mirror_updates[2]="http://archive.redvoodoo.org/ubuntu"
mirror_security[2]="http://security.redvoodoo.org/ubuntu"
mirror_ports_release[2]="http://ports.redvoodoo.org/ubuntu-ports"
mirror_ports_updates[2]="http://ports.redvoodoo.org/ubuntu-ports"
mirror_ports_security[2]="http://ports.redvoodoo.org/ubuntu-ports"

mirror_release[1]="http://mirror.rtg.local/ubuntu"
mirror_updates[1]="http://mirror.rtg.local/ubuntu"
mirror_security[1]="http://mirror.rtg.local/ubuntu"
mirror_ports_release[1]="http://mirror.rtg.local/ubuntu-ports"
mirror_ports_updates[1]="http://mirror.rtg.local/ubuntu-ports"
mirror_ports_security[1]="http://mirror.rtg.local/ubuntu-ports"

mirror_release[0]="http://us.archive.ubuntu.com/ubuntu"
mirror_updates[0]="http://us.archive.ubuntu.com/ubuntu"
mirror_security[0]="http://security.ubuntu.com/ubuntu"
mirror_ports_release[0]="http://us.ports.ubuntu.com/ubuntu-ports"
mirror_ports_updates[0]="http://us.ports.ubuntu.com/ubuntu-ports"
mirror_ports_security[0]="http://us.ports.ubuntu.com/ubuntu-ports"

mirror_old="http://old-releases.ubuntu.com/ubuntu"
