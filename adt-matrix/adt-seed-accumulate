#!/usr/bin/python3
from __future__ import print_function

import sys
import os
import yaml
import json
import re

from ktl.kernel_series import KernelSeries


class AdtMatrixSeed(object):
    def __init__(self, cache):
        self.cache_file = cache
        self.cache = {}
        self.latest = {}
        self.nbs = {}

        self.ks = KernelSeries()

        self.britney_cache = {}

        if os.path.exists(cache):
            with open(cache) as cachef:
                tmp = json.load(cachef)

            if 'cache' in tmp:
                self.cache = tmp['cache']
            if 'cache-latest' in tmp:
                self.latest = tmp['cache-latest']


    def save(self):
        with open(self.cache_file + '.new', 'w') as cfd:

            # seeds: make a list based output for adt-matrix.
            seeds = {}
            for seriespkg in self.cache:
                seeds[seriespkg] = []
                for pkg in sorted(self.cache[seriespkg]):
                    tmp_arch = []
                    for arch in sorted(self.cache[seriespkg][pkg]):
                        tmp_arch.append(arch)
                    seeds[seriespkg].append((pkg, tmp_arch))

            # seeds: make a list based output for adt-matrix.
            latest_merged = {}
            for master in self.latest:
                latest_merged[master] = {}
                for member in self.latest[master]:
                    for key in self.latest[master][member]:
                        tmp = latest_merged[master].setdefault(key, [])
                        new = list(set(tmp + list(self.latest[master][member][key].keys())))
                        latest_merged[master][key] = new

            out = {
                'cache':            self.cache,
                'cache-latest':     self.latest,
                'seeds':            seeds,
                'seeds-latest':     latest_merged,
            }
            json.dump(out, cfd, indent=2, sort_keys=True)
        os.rename(self.cache_file + '.new', self.cache_file)


    def britney_load(self, series, britney):
        if series not in self.britney_cache:
            with open(britney) as britneyf:
                self.britney_cache[series] = yaml.safe_load(britneyf)

        return self.britney_cache[series]


    # remove-package -m NBS -s xenial-proposed -e 4.4.0-1.15 linux
    def britney_nbs(self, series, flags):
        if series in self.nbs:
            return
        self.nbs[series] = True

        print('#\n# ' + series + '\n#')
        for record in self.britney_cache[series]['sources']:
            #if not record['source'].startswith('linux'):
            #    continue
            if 'old-binaries' in record:
                for old_version in record['old-binaries']:
                    # Do not remove the old-version if the new version is not yet fully published.
                    if old_version != record['old-version'] or 'missing-builds' not in record or 'on-architectures' not in record['missing-builds']:
                        print('remove-package -y -m NBS -d ubuntu -s {}-proposed -e {} {}'.format(series, old_version, record['source']))
                    elif record['source'].startswith('linux'):
                        print('remove-package -y -m NBS -d ubuntu -s {}-proposed -e {} {}    # missing-builds'.format(series, old_version, record['source']))
            # XXX: old-format -- remove when gone.
            elif 'excuses' in record:
                pkgs = {}
                for excuse in record['excuses']:
                    if excuse.startswith('old binaries left on'):
                        (prefix, remainder) = excuse.split('>:', 1)
                        for version_group in remainder.split(';'):
                            (package_string, version) = version_group.split('(', 1)
                            version = re.sub('<[^<]+?>', '', version.strip())
                            version = version[5:-1]
                            pkgs[version] = True
                            #for package in package_string.split(', '):
                            #   package = package.strip()
                            #   tmp = pkgs.setdefault(version, {})
                            #   tmp[package] = True
                if len(pkgs) > 0:
                    for version in pkgs:
                        ##print('remove-package -m NBS -d ubuntu -s {}-proposed -b -y {} # {} ({}'.format(series, " ".join(sorted(pkgs[version].keys())), record['source'], version))
                        # remove-package -m NBS -s xenial-proposed -e 4.4.0-1.15 linux
                        print('remove-package -y -m NBS -d ubuntu -s {}-proposed -e {} {} # legacy'.format(series, version, record['source']))


    def accumulate(self, series, source, flags, britney):
        state = self.britney_load(series, britney)

        #if 'devel' not in flags:
        #    self.britney_nbs(series, flags)
        self.britney_nbs(series, flags)

        ks_series = self.ks.lookup_series(codename=series)
        if ks_series is None:
            raise ValueError("{}:{}: invalid series".format(series, source))
        ks_source = ks_series.lookup_source(source)
        if ks_source is None:
            raise ValueError("{}:{}: invalid source".format(series, source))
        package_key = None
        for ks_package in ks_source.packages:
            if ks_package.type == 'meta':
                package_key = ks_package.name
                break
        if package_key is None:
            raise ValueError("{}:{}: no meta package found".format(series, source))

        # Iterate over our hierachy and accumulate testing for each as seen
        # by britney so we can track it.
        debug = []
        for ks_package in ks_source.packages:
            package = ks_package.name
            debug.append(package)

            # Locate the britney record if there is one.
            for record in state['sources']:
                if record['source'] == ks_package.name:
                    break
            else:
                continue

            # The persistant list holds any package we ever tested against.
            pcache = self.cache.setdefault(series + '-' + package_key, {})
            # The current lists holds those we tested on in the most recent test run.
            lcache = self.latest.setdefault(series + '-' + package_key, {})

            if ('policy_info' in record and
                    'autopkgtest' in record['policy_info'] and
                    len(record['policy_info']['autopkgtest']) > 0):
                # If we have a list, this becomes the new list.
                tcache = lcache[record['source']] = {}
                for pkg in record['policy_info']['autopkgtest']:
                    for arch in record['policy_info']['autopkgtest'][pkg]:
                        if '/' in pkg:
                            bits = pkg.split('/')
                        else:
                            bits = pkg.split()
                        tpackage = bits[0]
                        pcache.setdefault(tpackage, {})[arch] = True
                        tcache.setdefault(tpackage, {})[arch] = True

        print('hierachy ' + series + ' ' + ' '.join(debug), file=sys.stderr)


matrix_seed = AdtMatrixSeed('test--package-relation.json')
for line in sys.stdin:
    (series, package, parent, flags, britney) = line.strip().split()
    matrix_seed.accumulate(series, package, flags.split(','), britney)
matrix_seed.save()
