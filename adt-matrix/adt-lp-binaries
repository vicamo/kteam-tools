#!/usr/bin/python3

from __future__ import print_function

import os
import sys
import logging
import json
from copy import copy
from datetime import datetime

from launchpadlib.launchpad import Launchpad as _Launchpad
from lazr.restfulclient.errors import Unauthorized


# Work around non-multiple-instance-safety of launchpadlib (bug #459418).
class Launchpad(_Launchpad):
    @classmethod
    def _get_paths(cls, service_root, launchpadlib_dir=None):
        (
            service_root,
            launchpadlib_dir,
            cache_path,
            service_root_dir,
        ) = _Launchpad._get_paths(service_root, launchpadlib_dir=launchpadlib_dir)
        cache_path += "-sru-report"
        if not os.path.exists(cache_path):
            os.makedirs(cache_path, 0o700)
        return service_root, launchpadlib_dir, cache_path, service_root_dir


def get_flavor_from_linux_image(package):
    if package.endswith("-dbgsym"):
        return None
    if package.startswith("linux-image-") and package[12].isdigit():
        return package.split("-", 4)[4]
    if package.startswith("linux-image-unsigned-") and package[21].isdigit():
        return package.split("-", 5)[5]
    return None


class KernelPackages:
    def __init__(s, launchpad=None, cache="package-binaries.json", ppa=None):
        s.lp = None
        s.ubuntu = None
        s.archive = None
        s.series = {}

        s.lpinit(launchpad=launchpad, ppa=ppa)

        s.dirty = False
        s.cache_file = cache
        s.i_scanned = {}
        s.i_good = {}
        s.map_source = {}
        s.map_archs = {}
        s.pocket_versions = {}

        if os.path.exists(s.cache_file):
            with open(s.cache_file) as cachef:
                tmp = json.load(cachef, object_hook=s._json_object_decode)
                s.i_scanned = tmp["i-scanned"]
                s.i_good = tmp["i-good"]
                s.map_source = tmp["map-source"]
                s.map_archs = tmp["map-archs"]
                if "pocket-versions" in tmp:
                    s.pocket_versions = tmp["pocket-versions"]

    def _json_object_encode(self, obj):
        if isinstance(obj, datetime):
            return { '_isoformat': obj.isoformat() }
        raise TypeError('Object of type %s with value of %s is not JSON serializable' % (type(obj), repr(obj)))

    def _json_object_decode(self, obj):
        isoformat = obj.get('_isoformat')
        if isoformat is not None:
            #return datetime.fromisoformat(isoformat)
            # XXX: before python 3.6 fromisoformat is not available.
            if isoformat[-3] == ':':
                isoformat = isoformat[0:-3] + isoformat[-2:]
            for fmt in (
                    '%Y-%m-%dT%H:%M:%S.%f%z',
                    '%Y-%m-%dT%H:%M:%S%z',
                    '%Y-%m-%dT%H:%M:%S.%f',
                    '%Y-%m-%dT%H:%M:%S'):
                try:
                    obj = datetime.strptime(isoformat, fmt)
                    break
                except ValueError:
                    pass
            else:
                raise ValueError("isoformat: {} invalid format".format(isoformat))
        return obj

    def save(s):
        if s.dirty:
            print("updating cache")
            with open(s.cache_file + ".new", "w") as cfd:
                out = {
                    "i-scanned": s.i_scanned,
                    "i-good": s.i_good,
                    "map-source": s.map_source,
                    "map-archs": s.map_archs,
                    "pocket-versions": s.pocket_versions,
                }
                json.dump(out, fp=cfd, default=s._json_object_encode, indent=2)
            os.rename(s.cache_file + ".new", s.cache_file)

    def lpinit(s, launchpad=None, ppa=None):
        logging.debug("Initializing LP Credentials")
        if not launchpad:
            s.lp = Launchpad.login_anonymously("adt-lp-binaries", "production", version="devel")
        else:
            s.lp = launchpad

        s.ubuntu = s.lp.distributions["ubuntu"]
        if not ppa or ppa == "-":
            s.archive = s.ubuntu.getArchive(name="primary")
        else:
            (ppa_owner, ppa_name) = ppa.split("/")
            s.archive = s.lp.people[ppa_owner].getPPAByName(name=ppa_name)

    def _series(s, series_name):
        if series_name not in s.series:
            for series in s.ubuntu.series:
                s.series[series.name] = series

        return s.series[series_name]

    def package_linux_image(s, seriesname, sourcename):
        key = seriesname + " " + sourcename
        key_sm = seriesname + " " + sourcename.replace("linux", "linux-meta")

        i_scanned = s.i_scanned.get(key)
        print("  {}:{} since={}".format(seriesname, sourcename, i_scanned))
        distro_series = s._series(seriesname)
        pubs = s.archive.getPublishedSources(
            order_by_date=True,
            created_since_date=i_scanned,
            source_name=sourcename,
            exact_match=True,
            distro_series=distro_series,
        )

        count = 0
        seen = set()
        i_scanned_restart = None
        pocket_versions = copy(s.pocket_versions.get(key, {}))
        for pub in pubs:
            sver = pub.source_package_version
            pocket = pub.pocket

            key_ssv = seriesname + " " + sourcename + " " + sver

            which = "  {}:{} found pocket={} version={}".format(seriesname, sourcename, pocket, sver)

            # Accumulate the latest publication into each pocket.
            if pocket not in pocket_versions:
                pocket_versions[pocket] = sver

            # Skip sources we have scanned before for completeness.
            if key_ssv in seen:
                continue
            seen.add(key_ssv)
            if key_ssv in s.i_good:
                print(which, "known good")
                if i_scanned_restart is None:
                    i_scanned_restart = pub.date_created
                continue

            #count += 1
            #if count == 5:
            #    break

            print(which, "scanning")

            # If this build is complete we no longer need to scan it.
            complete = True
            build_seen = False
            try:
                builds = pub.getBuilds()
            except Unauthorized:
                builds = []
            for build in builds:
                build_seen = True
                if build.buildstate not in (
                    "Successfully built",
                    "Failed to build",
                    "Failed to upload",
                    "Cancelled build",
                ):
                    complete = False
            #if not build_seen:
            #    complete = False
            #if not complete:
            #    i_scanned_restart = pub.date_created
            if not complete or i_scanned_restart is None:
                i_scanned_restart = pub.date_created
            if complete and key_ssv not in s.i_good:
                s.i_good[key_ssv] = True
                s.dirty = True

            # Scan all the binaries and accumulate the flavour version combinations.
            if complete:
                flavours = {}
                for binary in pub.getPublishedBinaries(active_binaries_only=False):
                    binary_package_name = binary.binary_package_name
                    flavour = get_flavor_from_linux_image(binary_package_name)
                    if flavour != None:
                        flavours[flavour] = True

                        arch = binary.distro_arch_series_link.split("/")[-1]
                        acache = s.map_archs.setdefault(key_sm, [])
                        if arch not in acache:
                            acache.append(arch)
                            s.dirty = True

                print("    complete={} flavours={}".format(complete, flavours))

                for flavour in flavours:
                    key_svf = seriesname + " " + sver + " " + flavour
                    if key_svf not in s.map_source:
                        s.map_source[key_svf] = sourcename.replace("linux", "linux-meta")
                        s.dirty = True

        if i_scanned_restart is not None and s.i_scanned.get(key) != i_scanned_restart:
            s.i_scanned[key] = i_scanned_restart
            s.dirty = True

        if pocket_versions != s.pocket_versions.get(key, {}):
            s.pocket_versions[key] = pocket_versions
            s.dirty = True

if __name__ == "__main__":
    ppa = None
    if len(sys.argv) > 1:
        ppa = sys.argv[1]

    kp = KernelPackages(ppa=ppa)
    for line in sys.stdin:
        (series, package) = line.split()
        print("binaries:", series, package)
        kp.package_linux_image(series, package)
        sys.stdout.flush()
    kp.save()
