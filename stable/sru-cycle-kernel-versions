#!/usr/bin/env python3
#

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from ktl.kernel_series                  import KernelSeries
import json
import requests
import re

# TheApp
#
class TheApp(object):
    '''
    '''

    # main
    #
    def main(s, args):
        retval = 0
        ks     = KernelSeries()

        #                   .- series name (optional)
        #                  /                .- package name
        #                 /                /                .- kernel version
        #                /                /                /                         .- separator
        #               /                /                /                         /
        ver_str  = r'(?P<series>\S+/)?(?P<source>\S+): (?P<version>\d+\.\d+\.\d+)(?P<sep>[-\.])'
        ver_str += r'(?P<abi>\d+)\.(?P<upload>\d+)(?P<bpextra>[~a-z\d.]*)'
        #               \             \              \
        #                \             \              - backport extension
        #                 \             - upload number
        #                  - abi number
        ver_rc     = re.compile(ver_str)

        y = {}
        r = requests.get('http://kernel.ubuntu.com/sru/kernel-sru-workflow.json')
        trackers = json.loads(r.text)

        for project in ['kernel-sru-workflow']:
            if project not in trackers['bug-collections']:
                continue
            for x in trackers['bug-collections'][project]['bugs']:
                bug = trackers['bug-collections'][project]['bugs'][x]
                title = bug['title']

                m = ver_rc.search(title)
                if m is not None:
                    if m.group('source') != 'linux' and \
                       not m.group('source').startswith('linux-lts') and \
                       not m.group('source').startswith('linux-hwe'):
                        continue

                    series = ks.lookup_series(codename=bug['series name'])

                    if args.no_devel and series.development:
                        continue

                    if args.no_esm and series.esm:
                        continue

                    source = series.lookup_source(m.group('source'))

                    if args.no_devel and source.development:
                        continue

                    # one of the tags is kernel-sru-cycle-<cycle-no>-<respin-no>
                    cycle=""
                    for tag in bug['tags']:
                        if "kernel-sru-cycle" in tag:
                            # remove the 'kernel-sry-cycle' bit
                            cycle = tag[17:]
                            break
                    if cycle.startswith('s'):
                        # we don't do announcement for security cycles for now
                        continue

                    version = '{}{}{}.{}{}'.format(m.group('version'), m.group('sep'),
                                                   m.group('abi'), m.group('upload'),
                                                   m.group('bpextra'))

                    if bug['series name'] not in y:
                        y[bug['series name']] = {}
                    y[bug['series name']][m.group('source')] = version

        print('Kernel Versions')
        print('====================================================================')
        for series in sorted(ks.series, key=ks.key_series_name, reverse=True):
            cn = series.codename
            if cn not in y:
                continue
            print('%s:' % cn)
            for p in sorted(y[cn]):
                print('    %-20s %s' % (p + ':', y[cn][p]))

        return retval

if __name__ == '__main__':
    retval = -1

    # Command line argument setup and initial processing
    #
    app_description = '''
    Generate the list of kernel versions currently in SRU, based on the list of
    open tracking bugs.
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--no-devel', action='store_true', default=False,
                        help='do not include the development series and sources')
    parser.add_argument('--no-esm', action='store_true', default=False,
                        help='do not include ESM series')
    args = parser.parse_args()

    app = TheApp()
    retval = app.main(args)

    exit(retval)

# vi:set ts=4 sw=4 expandtab syntax=python:
