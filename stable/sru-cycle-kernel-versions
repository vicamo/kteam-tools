#!/usr/bin/env python3
#

import re

from argparse                   import ArgumentParser, RawDescriptionHelpFormatter
from ktl.kernel_series          import KernelSeries
from ktl.swm_status             import SwmStatus

# TheApp
#
class TheApp(object):
    '''
    '''

    # main
    #
    def main(s, args):
        retval = 0
        ks     = KernelSeries()
        status = SwmStatus()

        #
        # For now this makes no attempt to figure out which is the latest cycle as
        # it assumes the trackers to be lister in bug ID order. Usually we create the
        # security cycle trackers first, so they would be listed before the SRU cycle
        # data. Which would then end with the latest SRU cycle version.
        # If that turns out to be a problem we might refine this.
        #
        kernels = {}
        for bug_id, bug_data in status.trackers.items():
            series = bug_data.get('series', None)
            if series is None:
                continue
            ks_series = ks.lookup_series(codename=series)
            if ks_series is None:
                continue
            if args.no_devel and ks_series.development:
                continue
            if args.no_esm and ks_series.esm:
                continue

            source = bug_data.get('source', '-')
            if source != 'linux' and \
               not (source.startswith('linux-hwe') or source.startswith('linux-lts')):
                continue

            #
            # For the HWE kernels, if there is no version yet, assume it to be the version
            # of its parent with the backport suffix. Add a hint to the version, that this
            # is only a prediction.
            #
            version = bug_data.get('version', '<TBD>')
            if version == '<TBD>':
                ks_source = ks_series.lookup_source(source)
                if ks_source is not None and source != 'linux':
                    ks_parent = ks_source.derived_from
                    if ks_parent is not None:
                        ks_ps   = ks_parent.series
                        ks_pscn = ks_ps.codename
                        if ks_pscn in kernels:
                            if ks_parent.name in kernels[ks_pscn]:
                                pv = kernels[ks_pscn][ks_parent.name]
                                version = '{}~{}.1 (predicted)'.format(pv, ks_ps.name)

            if not series in kernels:
                kernels[series] = {}
            kernels[series][source] = version

        print('Kernel Versions')
        print('====================================================================')
        for series in sorted(ks.series, key=ks.key_series_name, reverse=True):
            cn = series.codename
            if cn not in kernels:
                continue
            print('%s:' % cn)
            for p in sorted(kernels[cn]):
                print('    %-20s %s' % (p + ':', kernels[cn][p]))

        return retval

if __name__ == '__main__':
    retval = -1

    # Command line argument setup and initial processing
    #
    app_description = '''
    Generate the list of kernel versions currently in SRU, based on the list of
    open tracking bugs.
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--no-devel', action='store_true', default=False,
                        help='do not include the development series and sources')
    parser.add_argument('--no-esm', action='store_true', default=False,
                        help='do not include ESM series')
    args = parser.parse_args()

    app = TheApp()
    retval = app.main(args)

    exit(retval)

# vi:set ts=4 sw=4 expandtab syntax=python:
