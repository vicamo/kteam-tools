#!/usr/bin/env python3
#
# SWM - SRU Workflow Manager  (aka: shankbot)
#
# swm-publishing -- monitor publishing of things.
#

import os
import sys
from copy import copy
from datetime import datetime, timedelta, timezone
from math import ceil
from subprocess import Popen
from time import time, perf_counter
#from logging import DEBUG, INFO, WARNING, basicConfig
from urllib.error import HTTPError
from urllib.parse import urlsplit, urlunsplit
from urllib.request import (HTTPBasicAuthHandler,
                            HTTPPasswordMgrWithDefaultRealm,
                            build_opener,
                            urlopen)

import yaml
from lazr.restfulclient.errors import Unauthorized

# Add ../libs to the Python search path
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir, 'libs')))

from ktl.announce import Announce
from ktl.kernel_series import KernelSeries
from ktl.sru_cycle import SruCycle
from ktl.swm_status import SwmStatus
from wfl.launchpad import LaunchpadDirect
#from wfl.log import Clog, cdebug, center, cleave
from wfl.snap import SnapStore, SnapStoreError
from wfl.wft.regression_testing import RegressionTestingResults, RegressionTestingResultsError
from wfl.wft.automated_testing import AutomatedTestingResults, AutomatedTestingResultsError
from wfl.work import SwmWork


class MonitorIncompatible(Exception):
    pass


class MonitorStore:
    '''
    A backing store provider for monitor data.  This class behaves very like a
    persistent dictionary.  On instantiation it will load up the specified
    yaml file.  When the sync is called all current data is flushed back
    to the backing store.  Handles timezones being lost in the default
    yaml date format.
    '''
    def __init__(self, store_path=None):
        if store_path is None:
            store_path = 'swm-publisher.yaml'

        self.store_path = store_path
        self._store = {}
        if os.path.exists(store_path):
            with open(store_path) as rfd:
                self._store = yaml.safe_load(rfd)
                self.fix_timezones(self._store)

    # YAML saves timestamps always converted to UTC and the loses
    # this information on load dispite storing +00:00 as the data.
    # As we know they are all converted to UTC we can simply wack
    # over them with a UTC timezone.
    def fix_timezones(self, record):
        for item, item_data in record.items():
            if isinstance(item_data, datetime):
                record[item] = item_data.replace(tzinfo=timezone.utc)
            elif isinstance(item_data, dict):
                self.fix_timezones(item_data)

    # Allow a consumer to attach themselves into a specific sub-element of the
    # primary persistent store.
    def attach(self, name, owner):
        # Link an appropriate store dictionary to the owner.
        owner._store = self._store.setdefault(
            owner.__class__.__name__ + ':' + name, {})

        # Set the default value for this attribute.  Note: we pass the
        # attribute name to also (re)implement __set_name__ for older versions
        # of python3.
        for k in dir(type(owner)):
            v = getattr(type(owner), k)
            func = getattr(v, 'msa_set_default', None)
            if func is not None:
                func(owner, k)

    def __getitem__(self, key):
        return self._store[key]

    def __setitem__(self, key, value):
        self._store[key] = value

    def setdefault(self, key, value=None):
        return self._store.setdefault(key, value)

    def sync(self):
        with open(self.store_path + '.new', 'w') as wfd:
            yaml.dump(self._store, wfd, default_flow_style=False)
        os.rename(self.store_path + '.new', self.store_path)


class MonitorStoreAttr:
    '''
    This class is a Python descriptor class.  This means that an instance
    of this class may be used to replace a class attribute; all access to that
    attribute is mediated by this class.  The attribute key in the store
    is passed to the constructor, and this key is used against the owning
    objects _store attribute.  Typically this would be initialised to a
    unique key in the MonitorStore object.  Doing this renders the contents
    of this attribute persistent.

    For example:

        class MonitorThing:

            def __init__(self, backing_store):
                # Attach myself to the backing_store.  This will set appropriate
                # linkage to the myself.
                backing_store.attach('unique-key', self)
                # Default our last-date to UTC now if not present.

            # Connect the instance attribute to the backing store, supplying
            # an optional default.
            last_date = MonitorStoreAttr(default=datetime.now(timezone.utc))

            def operation(self, when):
                # Read and update attribute as normal.
                if self.last_date < when:
                    self.last_date = when
    '''
    def __init__(self, attr=None, default=None):
        self.attr = attr
        self.default = default

    def msa_set_default(self, owner, attr):
        if self.attr is None:
            attr = attr.replace('_', '-')
            self.attr = attr
        if self.attr not in owner._store:
            owner._store[self.attr] = copy(self.default)

    def __set_name__(self, owner, attr):
        if self.attr is None:
            attr = attr.replace('_', '-')
            self.attr = attr

    def __get__(self, obj, objtype=None):
        #print("__get__", self.attr, obj, objtype)
        if obj is None:
            return self
        return obj._store[self.attr]

    def __set__(self, obj, value):
        #print("__set__", self.attr, obj, value)
        obj._store[self.attr] = value


class MonitorLaunchpadProject:

    def __init__(self, project, lp=None, bs=None):
        if lp is None:
            raise ValueError("launchpad not specified")
        if bs is None:
            raise ValueError("backing store not specified")

        self.lp = lp
        self.project_name = project
        self.project = lp.projects[project]

        bs.attach(self.project_name, self)

    last_date = MonitorStoreAttr(default=datetime.now(timezone.utc))

    def changed(self):
        bugs = {}
        start_date = self.last_date

        tasks = self.project.searchTasks(
            status=['In Progress', 'Incomplete', 'Fix Committed', 'Fix Released', 'Invalid'],
            omit_duplicates=False,
            modified_since=self.last_date)
        for task in tasks:
            bug = task.bug
            if bug.date_last_updated > self.last_date:
                self.last_date = bug.date_last_updated
            if 'kernel-release-tracking-bug-test' in bug.tags:
                continue
            print("TASK", task, bug, bug.date_last_updated)
            bugs[bug.id] = bug

        # Now that we have the latest update, check through the activity
        # log for each bug and consider whether it has been changed by
        # swm, if so then we can ignore it.
        changed = set()
        for bug_id, bug in bugs.items():
            dup = bug.duplicate_of
            if dup is not None:
                dup_id = bug.duplicate_of.id
                print("D", dup_id, '<-', bug_id)
                # Add both ends as SWM may have triggered the duplication.
                changed.add(('shank', str(dup_id)))
                changed.add(('shank', str(bug_id)))
            for activity in bug.activity:
                activity_date = activity.datechanged

                #print("D?", activity, start_date, activity_date, self.last_date)
                # We are only interested in bug activity between the start date
                # and the latest task update time (inclusive).  Scanning
                # activity after this upper bound might lead to false positives
                # and to multiple redundant scans.  We will be informed of this
                # later activity in a future run.
                if activity_date < start_date or activity_date > self.last_date:
                    continue
                #print("P?", activity, activity.person_link)
                # Why is this not lp.me.self_link ?
                if (activity.whatchanged == 'kernel-sru-workflow: status' and
                        activity.newvalue == 'In Progress'):
                    pass
                # We change tags and do want to scan in that case.
                elif activity.whatchanged == 'tags':
                    pass
                elif activity.person_link.endswith("/~ubuntu-kernel-bot"):
                    continue
                print("Y", bug_id, activity, activity.person_link)
                changed.add(('shank', str(bug_id)))
                break

        # Trackers in Confirmed are uninstantiated and need to be built,
        # retrigger until they resolve.
        # Trackers in Triaged are new and have never been scanned (or that
        # scan has failed, retrigger until they resolve.
        tasks = self.project.searchTasks(status=['Confirmed', 'Triaged'])
        for task in tasks:
            bug = task.bug
            if 'kernel-release-tracking-bug-test' in bug.tags:
                continue
            print("TASK ({})".format(task.status), task, bug, bug.date_last_updated)
            if task.status == 'Confirmed':
                changed.add(('instantiate', str(bug.id)))
            else:
                changed.add(('shank', str(bug.id)))

        return changed

    def __str__(self):
        return "Launchpad Project Monitor {}".format(self.project_name)


class MonitorLaunchpadQueues:

    def __init__(self, lp=None, ks=None, bs=None):
        if lp is None:
            raise ValueError("launchpad not specified")
        if ks is None:
            ks = KernelSeries()
        if bs is None:
            raise ValueError("backing store not specified")

        #archive = 'ubuntu'

        self.distro = 'ubuntu'
        self.lp = lp
        self.ks = ks
        self.bs = bs

        # Attach us to the backing store.
        bs.attach(self.distro, self)

        #self.reference = archive
        #self.archive = lp.archives.getByReference(reference=archive)

        # Make a quick lookup for all valid source packages.
        self.source_packages = {}
        for series in self.ks.series:
            for source in series.sources:
                for package in source.packages:
                    self.source_packages["{}:{}".format(series.codename, package.name)] = source.name

    last_date = MonitorStoreAttr(default=datetime.now(timezone.utc))
    last_announce = MonitorStoreAttr(default=[])

    def changed(self):
        start_date = self.last_date #- timedelta(hours=1)

        changed = set()
        notices = list()

        for series in self.ks.series:
            if not series.supported or series.esm:
                continue
            series_lp = self.lp.distributions[self.distro].getSeries(name_or_version=series.name)
            for status in ('New', 'Unapproved'):
                for upload in series_lp.getPackageUploads(status=status):
                    date_created = upload.date_created
                    if date_created > self.last_date:
                        self.last_date = date_created

                    package_name = upload.package_name
                    # If we have no package name this is likely a signing block.
                    if package_name is None and upload.display_arches in ('uefi', 'signing'):
                        package_name = upload.display_name.split('_')[0]

                    package_key = "{}:{}".format(series.codename, package_name)
                    if package_key not in self.source_packages:
                        continue

                    print("QUEUE", upload, package_name, status, date_created)

                    # If this is new to the queue then trigger it.
                    if date_created > start_date:
                        source_key = "{}:{}".format(series.codename, self.source_packages[package_key])
                        changed.add(('shank', source_key))

                    # Anything on the queue is interesting for summary notification.
                    notices.append([status, series.codename, upload.pocket, package_name])
                sys.stdout.flush()

        notices = sorted(notices)
        if notices != self.last_announce:
            self.last_announce = notices
            msgs = ["Queues:"]
            if len(notices) == 0:
                msgs.append("--empty--")
            else:
                summary = {}
                for status, series_name, pocket, package_name in notices:
                    summary[(series_name, status)] = summary.get((series_name, status), 0) + 1
                for series_name, status in sorted(summary):
                    msgs.append("{}:{}={}".format(status, series_name, summary[(series_name, status)]))
            notice = ' '.join(msgs)

            announce = Announce()
            print("ANNOUNCE", notice)
            announce.send('swm-queued-item', notice)

        return changed

    def __str__(self):
        return "Launchpad Queue Monitor {}".format(self.distro)


class MonitorTrelloDisposition:

    def __init__(self, trello_path, lp=None, bs=None):
        if lp is None:
            raise ValueError("launchpad not specified")
        if bs is None:
            raise ValueError("backing store not specified")

        self.lp = lp

        self.path = trello_path
        self.swm_trello = {}
        if os.path.exists(self.path):
            with open(self.path) as rfd:
                self.swm_trello = yaml.safe_load(rfd)

        self.disposition = self.swm_trello.get('disposition', {})
        bs.attach(self.path, self)

    tagged = MonitorStoreAttr(default={})

    def changed(self):
        changed = set()

        new_tagged = {}

        # Add a tag for any newly blocked tracker.
        for lane, lane_key in (
                    ('Blocked', 'blocked'),
                    ('For Review', 'review')
                ):
            tag_prefix = 'kernel-trello-' + lane_key + '-'

            for tracker in self.disposition.get(lane, []):
                print("CHECKING", lane, tracker)
                tracker_id = tracker['id']
                tracker_task = tracker['task']
                tracker_task = tracker_task[1:] if tracker_task[0] == ':' else tracker_task
                tracker_tag = tag_prefix + tracker_task
                tracker_key = tracker_id + '-' + tracker_tag
                new_tagged[tracker_key] = True
                lp_bug = self.lp.bugs[tracker_id]
                if tracker_tag not in lp_bug.tags:
                    print("ADDING", tracker_id, tracker_task, tracker_tag)
                    tags = lp_bug.tags
                    tags.append(tracker_tag)
                    lp_bug.tags = tags
                    lp_bug.lp_save()

                    changed.add(('shank', tracker_id))

        # Remove a tag for any tracker which is no longer blocked.
        for tracker_key in self.tagged:
            if tracker_key in new_tagged:
                continue
            tracker_id, tracker_tag = tracker_key.split('-', 1)
            lp_bug = self.lp.bugs[tracker_id]
            if tracker_tag in lp_bug.tags:
                print("REMOVING", tracker_id, tracker_tag)
                tags = lp_bug.tags
                tags.remove(tracker_tag)
                lp_bug.tags = tags
                lp_bug.lp_save()

            changed.add(('shank', tracker_id))

        self.tagged = new_tagged

        return changed

    def __str__(self):
        return "Trello Disposition Monitor {}".format(self.path)


class MonitorKernelSeries:

    def __init__(self, factory=None):
        if factory is None:
            raise ValueError("factory required")

        self.factory = factory

        self.factory.bs.attach('main', self)

    owners = MonitorStoreAttr(default={})

    @property
    def ks(self):
        return self.factory.ks

    def changed(self):
        changed = set()

        for ks_series in self.ks.series:
            for ks_source in ks_series.sources:
                ks_owner = ks_source.owner
                if ks_owner is None:
                    continue
                handle = ks_series.codename + ':' + ks_source.name
                previous_owner = self.owners.get(handle)
                if previous_owner is not None:
                    if previous_owner != ks_owner:
                        changed.add(('shank', handle))
                self.owners[handle] = ks_owner

        #print("REFRESH", changed)

        return changed

    def __str__(self):
        return "Status kernel-series (owner) Monitor"


class MonitorStatusSwmStatus:

    def __init__(self, factory=None):
        if factory is None:
            raise ValueError("factory required")

        self.factory = factory

        #bs.attach(status_path + '--' + project, self)

    @property
    def ss(self):
        return self.factory.ss

    @property
    def sc(self):
        return self.factory.sc

    def status_key(self, item):
        (bug_id, bug_data) = item

        # Sort by lowest last scanned date.
        return (bug_data.get('manager', {}).get('time-scanned') or
            datetime.utcnow() - timedelta(days=10*365), bug_id)

    def changed(self):
        changed = set()
        #start_date = datetime.utcnow() # - timedelta(minutes=60)
        start_date = datetime.now(timezone.utc)

        status = self.ss

        # Scan the live trackers and trigger any which have past their refresh
        # time.  Also accumulate any which have not been scanned for 4 hours.
        # Finally scan the maintenance records for changes.
        lagging = []
        for bug_id, bug_data in sorted(status.trackers.items(), key=self.status_key):
            if 'refresh' in bug_data:
                (when, why) = bug_data['refresh']
                when = when.replace(tzinfo=timezone.utc)
                print("REFRESH {} time={} delta={} trigger={} reason={}".format(bug_id, when, when - start_date, when < start_date, why))
                #print("APW", bug_id, bug_data['refresh-time'], start_date)
                #print("APW", bug_data['refresh-time'] - start_date, bug_data['refresh-time'] < start_date)
                if when < start_date:
                    #print("APW", bug_id, bug_data['refresh-time'], "READY")
                    changed.add(('shank', bug_id))

            sru_cycle = self.sc.lookup_cycle(bug_data.get('cycle'))
            cycle_complete = sru_cycle is not None and sru_cycle.complete
            tracker_complete = bug_data.get('phase') == 'Complete'
            scanned = bug_data.get('manager', {}).get('time-scanned')
            if (cycle_complete or not tracker_complete) and scanned is not None:
                scanned = scanned.replace(tzinfo=timezone.utc)
                scan_refresh = scanned + timedelta(hours=3, minutes=30)
                if scan_refresh < start_date:
                    delta = scan_refresh - start_date
                    print("LAGGING {} time={} delta={} trigger={}".format(bug_id, scan_refresh, delta, scan_refresh < start_date))
                    lagging.append((scan_refresh, delta, bug_id))

        # Run the list of lagging trackers and try and spread them out over the cycle without
        # letting them lag too long.  Try not to batch up too many updates either as a timeout
        # in a batch is fatal.  Basically, spread out the entire pending pile over the 'next'
        # hour.
        limit = ceil(len(lagging) / (60/5))
        print("SCANNER trackers={} lagging={} limit={}".format(len(status.trackers), len(lagging), limit))
        for scan_refresh, delta, bug_id in sorted(lagging):
            print("LAGGER {} time={} delta={}".format(bug_id, scan_refresh, delta))
            changed.add(('shank', bug_id))

            limit -= 1
            if limit == 0:
                break

        #print("REFRESH", changed)

        return changed

    def __str__(self):
        return "Status refresh_time Monitor"

class MonitorSwmStatusMonitor:

    def __init__(self, factory=None):
        if factory is None:
            raise ValueError("factory required")

        self.factory = factory

        #self.factory.bs.attach(status_path + '--' + project, self)

    @property
    def lp(self):
        return self.factory.lp

    @property
    def ss(self):
        return self.factory.ss

    @property
    def ks(self):
        return self.factory.ks

    def regression_testing(self, bug_id, bug_data, monitor):
        sru_cycle = bug_data.get('cycle')
        series = bug_data.get('series')
        source = bug_data.get('source')
        version = bug_data.get('version')
        op = monitor.get('op')
        existing = monitor.get('status')

        try:
            current = RegressionTestingResults.lookup_result(sru_cycle, series, source, version, op)
        except RegressionTestingResultsError as e:
            print("regression_testing: data missing ({}) change={}".format(str(e), False))
            return False
        print("regression_testing: existing={} current={} change={}".format(existing, current, existing != current))
        return existing != current

    def automated_testing(self, bug_id, bug_data, monitor):
        series = bug_data.get('series')
        source = bug_data.get('source')
        version = bug_data.get('version')
        existing = monitor.get('status')

        try:
            result = AutomatedTestingResults.lookup_result(series, source, version)
        except AutomatedTestingResultsError as e:
            print("automated_testing: data missing ({}) change={}".format(str(e), False))
            return False
        current = result.status
        print("automated_testing: existing={} current={} change={}".format(existing, current, existing != current))
        return existing != current

    def snap_publishing(self, bug_id, bug_data, monitor):
        series = bug_data.get('series')
        source = bug_data.get('source')
        snap = bug_data.get('snap-name')
        last_published = monitor.get('last-published')
        if last_published is not None:
            last_published = last_published.replace(tzinfo=timezone.utc)

        ks_series = self.ks.lookup_series(codename=series)
        if ks_series is None:
            return False
        ks_source = ks_series.lookup_source(source)
        if ks_source is None:
            return False
        ks_snap = ks_source.lookup_snap(snap)
        if ks_snap is None:
            return False
        snap_store = SnapStore(ks_snap)
        if snap_store is None:
            return False

        current_published = snap_store.last_published
        print("snap_publishing: last_published={} current_published={} change={}".format(last_published, current_published, current_published != last_published))
        return current_published != last_published

    def launchpad_source(self, bug_id, bug_data, monitor):
        tag = "{}: bug={}".format(monitor['type'], bug_id)
        archive_reference = monitor.get('reference')
        archive_pocket = monitor.get('pocket')
        series = bug_data.get('series')
        package_name = monitor.get('package')
        status = monitor.get('status')
        lp_api = monitor.get('lp-api')

        lp_archive = self.lp.archives.getByReference(reference=archive_reference)
        if lp_archive is None:
            print(tag, "no-archive change=False")
            return False

        # Grab the current latest publication, if it is a different lp_api
        # then things are changing.
        srcs = lp_archive.getPublishedSources(exact_match=True, order_by_date=True,
            pocket=archive_pocket, distro_series='/ubuntu/' + series,
            source_name=package_name)

        if lp_api is None and len(srcs) == 0:
            print(tag, "expected=no-package current=no-package change=False")
            return False

        src = srcs[0]
        if src.self_link != lp_api:
            print(tag, "expected={} current={} change=True".format(lp_api, src.self_link))
            return True

        print(tag, "expected={} current={} change={}".format(status, src.status, src.status != status))
        return src.status != status

    def launchpad_nobuilds(self, bug_id, bug_data, monitor):
        tag = "{}: bug={}".format(monitor['type'], bug_id)
        #archive_reference = monitor.get('reference')
        #archive_pocket = monitor.get('pocket')
        lp_api = monitor.get('lp-api')
        last_scanned = monitor.get('last-scanned').replace(tzinfo=timezone.utc)
        #status = monitor.get('status')

        # Grab us the object in question.
        src = self.lp.load(lp_api)
        if src is None:
            print(tag, "no-api-object change=False")
            return False

        builds = len(src.getBuilds())

        print(tag, "expected={} current={} change={}".format(0, builds, builds != 0))
        return builds != 0

    def launchpad_build(self, bug_id, bug_data, monitor):
        tag = "{}: bug={}".format(monitor['type'], bug_id)
        #archive_reference = monitor.get('reference')
        #archive_pocket = monitor.get('pocket')
        lp_api = monitor.get('lp-api')
        last_scanned = monitor.get('last-scanned').replace(tzinfo=timezone.utc)
        status = monitor.get('status')

        # Grab us the object in question.
        build = self.lp.load(lp_api)
        if build is None:
            print(tag, "no-api-object change=False")
            return False

        if build.date_started is not None and build.date_started > last_scanned:
            print(tag, "time_floor={} time_current={} change={}".format(last_scanned, build.date_started, True))
            return True

        print(tag, "expected={} current={} change={}".format(status, build.buildstate, build.buildstate != status))
        return build.buildstate != status

    def launchpad_upload(self, bug_id, bug_data, monitor):
        tag = "{}: bug={}".format(monitor['type'], bug_id)
        #archive_reference = monitor.get('reference')
        #archive_pocket = monitor.get('pocket')
        lp_api = monitor.get('lp-api')
        status = monitor.get('status')

        # Grab us the object in question.
        upload = self.lp.load(lp_api)
        if upload is None:
            print(tag, "no-api-object change=False")
            return False

        print(tag, "expected={} current={} change={}".format(status, upload.status, upload.status != status))
        return upload.status != status

    def launchpad_binary(self, bug_id, bug_data, monitor):
        tag = "{}: bug={}".format(monitor['type'], bug_id)
        #archive_reference = monitor.get('reference')
        #archive_pocket = monitor.get('pocket')
        lp_api = monitor.get('lp-api')
        status = monitor.get('status')

        # Grab us the object in question.
        binary = self.lp.load(lp_api)
        if binary is None:
            print(tag, "no-api-object change=False")
            return False

        print(tag, "expected={} current={} change={}".format(status, binary.status, binary.status != status))
        return binary.status != status

    def launchpad_thing_status(self, bug_id, bug_data, monitor):
        tag = "{}: bug={}".format(monitor['type'], bug_id)
        lp_api = monitor.get('lp-api')
        status = monitor.get('status')

        # Grab us the object in question.
        thing = self.lp.load(lp_api)
        if thing is None:
            print(tag, "no-api-object change=False")
            return False

        print(tag, "expected={} current={} change={}".format(status, thing.status, thing.status != status))
        return thing.status != status

    def tracker_modified(self, bug_id, bug_data, monitor):
        tag = "{}: bug={}".format(monitor['type'], bug_id)
        watch = monitor.get('watch')
        watch_data = self.ss.trackers.get(watch, {})

        bug_scanned = bug_data.get('manager', {}).get('time-scanned')
        watch_modified = watch_data.get('manager', {}).get('time-modified')

        if bug_scanned is None:
            print(tag, "tracker has no time-scanned change=True")
            return True
        if watch_modified is None:
            print(tag, "watch has no time-modified change=True")
            return True

        print(tag, "time_floor={} time_current={} change={}".format(watch_modified, bug_scanned, (bug_scanned < watch_modified)))
        return bug_scanned < watch_modified

    def changed(self):
        changed = set()

        status = self.ss

        # Scan the live trackers and pick out their monitor records.
        for bug_id, bug_data in sorted(status.trackers.items()):
            # Scan monitor records.
            for monitor in bug_data.get("monitor", []):
                print("{}: bug={} monitor={}".format(monitor.get("type", "????"), bug_id, monitor))
                handler = {
                    'regression-testing':   self.regression_testing,
                    'automated-testing':    self.automated_testing,
                    'snap-publishing':      self.snap_publishing,
                    'launchpad-source':     self.launchpad_source,
                    'launchpad-nobuilds':   self.launchpad_nobuilds,
                    'launchpad-build':      self.launchpad_build,
                    'launchpad-upload':     self.launchpad_upload,
                    'launchpad-binary':     self.launchpad_binary,
                    'launchpad-task':       self.launchpad_thing_status,
                    'tracker-modified':     self.tracker_modified,
                    }.get(monitor.get("type"))
                if handler is not None and handler(bug_id, bug_data, monitor):
                    changed.add(('shank', bug_id))
                    break
            sys.stdout.flush()
        print("REFRESH", changed)

        return changed

    def __str__(self):
        return "SwmStatus monitor Monitor"


class MonitorFactory:

    def __init__(self, lp=None, ks=None, bs=None, ss=None, ss_file=None, sc=None):
        self._lp = lp
        self._ks = ks
        self._bs = bs
        self._ss = ss
        self.ss_file = ss_file
        self._sc = sc

    @property
    def lp(self):
        if self._lp is None:
            self._lp = LaunchpadDirect.login_application('swm-publishing')
        return self._lp

    @property
    def ks(self):
        if self._ks is None:
            self._ks = KernelSeries()
        return self._ks

    @property
    def bs(self):
        if self._bs is None:
            self._bs = MonitorStore('swm-publishing.yaml')
        return self._bs

    @property
    def ss(self):
        if self._ss is None:
            if self.ss_file is None:
                raise ValueError("ss_file not specified")
            self._ss = SwmStatus(path=self.ss_file)
        return self._ss

    @property
    def sc(self):
        if self._sc is None:
            self._sc = SruCycle()
        return self._sc

    def launchpad_project(self, project):
        return [MonitorLaunchpadProject(project, lp=self.lp, bs=self.bs)]

    def launchpad_queues(self):
        return [MonitorLaunchpadQueues(lp=self.lp, ks=self.ks, bs=self.bs)]

    def swm_status(self):
        return [MonitorStatusSwmStatus(factory=self)]

    def kernel_series(self):
        return [MonitorKernelSeries(factory=self)]

    def swm_monitor(self):
        return [MonitorSwmStatusMonitor(factory=self)]

    def trello_disposition(self, trello_path):
        return [MonitorTrelloDisposition(trello_path, lp=self.lp, bs=self.bs)]

    def sync(self):
        self.bs.sync()

    def __str__(self):
        return "Private Archive Monitor {}".format(self.reference)


class FilterSwmStatus:

    def __init__(self, factory=None):
        if factory is None:
            raise ValueError("factory required")

        self.factory = factory

        self.factory.bs.attach(self.factory.ss_file, self)

    last_scanned = MonitorStoreAttr(default={})

    @property
    def ss(self):
        return self.factory.ss

    def filter(self, trackers):
        changed = set()

        status = self.ss

        trackers_mapped = set()
        for item in trackers:
            (command, tracker) = item
            if ':' in tracker:
                # We will search for <series>:<source>:<target>
                # if target is missing imply it from source.
                bits = tracker.split(':')
                if len(bits) < 3:
                    bits.append(bits[-1])

                for search_id, search_data in status.trackers.items():
                    search_key = [
                        search_data.get('series', '-'),
                        search_data.get('source', '-'),
                        search_data.get('target', '-')]
                    if bits == search_key:
                        trackers_mapped.add((command, search_id))
            else:
                trackers_mapped.add(item)

        print("MAPPED", len(trackers_mapped), trackers_mapped)

        tracker_delta = {}
        for item in trackers_mapped:
            command, tracker = item
            item_key = command + '--' + tracker
            tracker_delta[tracker] = '+'
            #print("NEEDS SCANNING {}".format(tracker))
            self.last_scanned[item_key] = status.trackers.get(tracker, {}).get('manager', {}).get('time-scanned', False)

        for item_key in list(self.last_scanned):
            command, tracker = item_key.split('--')
            last_scanned = self.last_scanned[item_key]
            if isinstance(last_scanned, datetime):
                last_scanned = last_scanned.replace(tzinfo=None)
            curr_scanned = status.trackers.get(tracker, {}).get('manager', {}).get('time-scanned', False)
            if last_scanned == curr_scanned:
                if tracker not in tracker_delta:
                    tracker_delta[tracker] = '!'
                    print("RECOVERED {} {} {}".format(tracker, last_scanned, curr_scanned))
                else:
                    print("NEW {} {} {}".format(tracker, last_scanned, curr_scanned))
                changed.add((command, tracker))
            else:
                tracker_delta[tracker] = '-'
                print("ALREADY-SCANNED {} {} {}".format(tracker, last_scanned, curr_scanned))
                del self.last_scanned[item_key]

        print("DELTA ", ' '.join(["{}{}".format(x, y) for y,x in sorted([(y,x) for x,y in tracker_delta.items()])]))

        return changed

    def commit(self):
        print("SUCCESS PURGING")
        for tracker in list(self.last_scanned):
            del self.last_scanned[tracker]

    def __str__(self):
        return "Filter SwmStatus"


if __name__ == '__main__':
    factory = MonitorFactory(ss_file='status.json')

    monitors = []
    monitors += factory.launchpad_project('kernel-sru-workflow')
    monitors += factory.swm_status()
    monitors += factory.kernel_series()
    monitors += factory.swm_monitor()
    monitors += factory.trello_disposition('swm-trello.yaml')
    monitors += factory.launchpad_queues()

    command = None

    updates_before = perf_counter()

    # Look for updates in each monitor.
    changed = set()
    for monitor in monitors:
        print("***", monitor)
        sys.stdout.flush()
        before = perf_counter()
        new = monitor.changed()
        after = perf_counter()
        #if len(new) > 0:
        #    print(monitor, "CHANGED", list(new))
        print(monitor, "changed={} time={}".format(new, after - before))
        sys.stdout.flush()
        changed = changed | new

    updates_after = perf_counter()
    print("CHANGED changed={} time={} wall={}".format(changed, updates_after - updates_before, time()))

    swm_filter = FilterSwmStatus(factory=factory)
    changed = swm_filter.filter(changed)
    print("NEEDED", len(changed), changed)

    # We have converted the scan data into a list for scanning
    # so it is safe to save our state ready to scan.
    factory.sync()

    sys.stdout.flush()

    if len(changed) > 0:
        cmd_before = perf_counter()
        ss = factory.ss
        swm_work = SwmWork(config="~/.kernel-swm-worker.yaml")
        for cmd, tracker in changed:
            print("QUEUE: {} {}".format(cmd, tracker))
            if cmd == 'shank':
                scanned = ss.trackers.get(tracker,{}).get('manager', {}).get('time-scanned')
                swm_work.send_shank(tracker, scanned=scanned)
            elif cmd == 'instantiate':
                swm_work.send_instantiate(tracker)
        swm_work.send_barrier()
        cmd_after = perf_counter()
        print("COMMAND COMPLETE time={} wall={}".format(cmd_after - cmd_before, time()))

        swm_filter.commit()
        factory.sync()
