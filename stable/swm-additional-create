#!/usr/bin/python3

from argparse import ArgumentParser
from copy import deepcopy

from ktl.kernel_series import KernelSeries
from ktl.swm_status import SwmStatus
from ktl.tracking_bug2 import TrackingBugError, TrackingBugs


class SwmAdditionalCreate:

    def __init__(self):
        self.ss = SwmStatus()
        self.ks = KernelSeries.tip()

    def fix_snap_to_snap_linkage(self, dry_run=True):
        snap_parent = {}
        snap_link = []
        for tracker_id, tracker in self.ss.trackers.items():
            cycle = tracker.get("cycle")
            series = tracker.get("series")
            source = tracker.get("source")
            target = tracker.get("target")
            parent = tracker.get("master-bug")
            if series == "focal" and source == "linux-uc20-intel-iotg":
                if target == "intel-iotg-kernel":
                    snap_parent[cycle] = str(tracker_id)
                elif target == "intel-kernel":
                    snap_link.append((str(tracker_id), cycle, series, source, target, str(parent)))

        tbs = None
        for tracker_id, cycle, series, source, target, parent in snap_link:
            want_parent = snap_parent[cycle]
            if parent != want_parent:
                print(f"{tracker_id}: {cycle} {series} {source} {target} update parent {parent} -> {want_parent}")
                if tbs is None:
                    tbs = TrackingBugs()
                tb = tbs.add(tracker_id)
                if not dry_run:
                    tb.wf_set_property("kernel-stable-master-bug", int(want_parent))
                    tb.save()

    def fix_esm_stream(self, dry_run=True):
        tbs = None
        for tracker_id, tracker in self.ss.trackers.items():
            cycle = tracker.get("cycle")
            series = tracker.get("series")
            source = tracker.get("source")
            target = tracker.get("target")
            parent = tracker.get("master-bug")
            ks_series = self.ks.lookup_series(codename=series)
            if ks_series is None or not ks_series.esm:
                continue

            prepare_package = tracker.get("task", {}).get("prepare-package", {})
            snap_prepare = tracker.get("task", {}).get("snap-prepare", {})
            if prepare_package.get("status", "Invalid") not in ("New", "Confirmed") and snap_prepare.get(
                "status", "Invalid"
            ) not in ("New", "Confirmed"):
                continue

            stream_id = tracker.get("built", {}).get("route-entry")
            if stream_id != 2:
                continue

            if tbs is None:
                tbs = TrackingBugs()
            tb = tbs.add(tracker_id)
            built_old = tb.wf_get_property("built")
            built = deepcopy(built_old)
            built["route-entry"] = 1
            if built_old != built:
                print(f"{tracker_id}: {cycle} {series} {source} ESM unprepared stream#2 updating to stream#1")
                if not dry_run:
                    tb.wf_set_property("built", built)
                    tb.save()

    def fix_snaps_on_stream_2(self, dry_run=True):
        tbs = None

        # Close out any snap-debs tracker in stream#2.  Certification cannot
        # (yet) test them and we have had regressions as a result.
        for tracker_id, tracker in self.ss.trackers.items():
            cycle = tracker.get("cycle")
            series = tracker.get("series")
            source = tracker.get("source")
            target = tracker.get("target")
            parent = tracker.get("master-bug")

            prepare_package = tracker.get("task", {}).get("snap-prepare", {})
            if prepare_package.get("status", "Invalid") not in ("New", "Confirmed"):
                continue

            stream_id = tracker.get("built", {}).get("route-entry")
            if stream_id != 2:
                continue

            if tbs is None:
                tbs = TrackingBugs()
            tb = tbs.add(tracker_id)
            built = tb.wf_get_property("built")

            if built.get("route-entry") != 2:
                continue

            print(f"{tracker_id}: {cycle} {series} {source} {target} snap unprepared stream#2")
            if not dry_run:
                tb.invalidate()

        # Close out any linux-ucNN trackers in stream#2 as these exist purely to
        # provide binaries for the trackers above which we are closing out.
        # Also close our a selection of manually curated kernels which serve the
        # same purpose.
        snap_only = set(
            [
                "focal:linux-iot",
                "focal:linux-denver",
                "focal:linux-ein",
                "focal:linux-havana",
                "focal:linux-nuremberg",
                "focal:linux-shiner",
            ]
        )
        for tracker_id, tracker in self.ss.trackers.items():
            cycle = tracker.get("cycle")
            series = tracker.get("series")
            source = tracker.get("source")
            target = tracker.get("target")
            parent = tracker.get("master-bug")

            if not source.startswith("linux-uc2") and not f"{series}:{source}" in snap_only:
                continue

            prepare_package = tracker.get("task", {}).get("prepare-package", {})
            if prepare_package.get("status", "Invalid") not in ("New", "Confirmed"):
                continue

            stream_id = tracker.get("built", {}).get("route-entry")
            if stream_id != 2:
                continue

            if tbs is None:
                tbs = TrackingBugs()
            tb = tbs.add(tracker_id)
            built = tb.wf_get_property("built")

            if built.get("route-entry") != 2:
                continue

            print(f"{tracker_id}: {cycle} {series} {source} {target} snap (linux-ucNN) unprepared stream#2")
            if not dry_run:
                tb.invalidate()

    def main(self):
        parser = ArgumentParser()
        parser.add_argument("--dry-run", action="store_true", help="List changes rather than perform")
        args = parser.parse_args()

        self.fix_snap_to_snap_linkage(dry_run=args.dry_run)
        self.fix_esm_stream(dry_run=args.dry_run)
        self.fix_snaps_on_stream_2(dry_run=args.dry_run)


if __name__ == "__main__":
    SwmAdditionalCreate().main()
