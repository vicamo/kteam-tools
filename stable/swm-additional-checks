#!/usr/bin/python3

import sys

from datetime import datetime, timedelta, timezone

import lazr

from ktl.kernel_series import KernelSeries
from ktl.swm_status import SwmStatus

from wfl.launchpad import LaunchpadDirect

#parser = argparse.ArgumentParser()
#parser.add_argument('--no-header', action='store_true')
#parser.add_argument('--no-queue', action='store_true')
#parser.add_argument('pocket')
#args = parser.parse_args()

#pocket = args.pocket

lp = LaunchpadDirect.login_application("swm-engine")
lp_distro = lp.distributions['ubuntu']
lp_archive = lp_distro.getArchive(name='primary')
lp_ckt = lp.people['canonical-kernel-team']
#print(lp_archive, lp_ckt)

lp_wf_project = lp.projects['kernel-sru-workflow']
lp_wf_kernel_signoff = lp_wf_project.getSeries(name='kernel-signoff')
lp_wf_signing_signoff = lp_wf_project.getSeries(name='signing-signoff')
#print(lp_wf_project, lp_wf_kernel_signoff)

ks = KernelSeries()

# Scan the existing variants and identify the primary variants; those which
# "roll".  These are characterised by having and '-edge' form.'
primary_variants = set()
for series in ks.series:
    if not series.supported and not series.development:
        continue
    for source in series.sources:
        if not source.supported:
            continue
        if source.variants is None:
            continue
        for variant in source.variants:
            if variant.endswith('-edge'):
                variant = variant[:-5]
                primary_variants.add(variant if variant != '' else '--')

#bumping = []
#for series in ks.series:
#    #if series.codename != 'bionic':
#    #    continue
#    if not series.supported and not series.development:
#        continue
#
#    # Grab the launchpad series and live architectures.
#    lp_series = lp_distro.getSeries(name_or_version=series.codename)
#    lp_series_archs = lp_series.architectures
#
#    for source in series.sources:
#        #if '-aws' not in source.name:
#        #    continue
#        if source.private:
#            continue
#        if not source.supported:
#            continue
#        if source.variants is None:
#            continue
#        interesting_variants = primary_variants.intersection(set(source.variants))
#        if len(interesting_variants) == 0:
#            continue
#        if len(source.testable_flavours) == 0:
#            continue
#        print(source.series.codename, source.name, source.variants)
#        flavours = source.testable_flavours
#        for flavour in flavours:
#            for variant in interesting_variants:
#                metapkg = 'linux-image-' + flavour.name + (variant if variant != '--' else '')
#                print(" ", source.series.codename, metapkg)
#
#                pubs = lp_archive.getPublishedBinaries(binary_name=metapkg, exact_match=True, status='Published')
#                found = {}
#                for pub in pubs:
#                    if pub.distro_arch_series not in lp_series_archs:
#                        continue
#                    pocket = pub.pocket
#                    if pocket not in ('Release', 'Updates', 'Proposed'):
#                        continue
#                    if pocket in found:
#                        continue
#
#                    #print(pub, pub.binary_package_name, pub.binary_package_version, pub.pocket, pub.status)
#                    found[pocket] = pub.binary_package_version
#                    if len(found) == 2:
#                        break
#                version_released = found.get('Updates', found.get('Release', '0.0'))
#                version_proposed = found.get('Proposed')
#                print(" Released: ", version_released)
#                print(" Proposed: ", version_proposed)
#                #if version_proposed is None:
#                #    continue
#
#                #if version_released.split('.')[0:2] != version_proposed.split('.')[0:2]:
#                #    print("  Major version bump detected -- kernel-signoff warranted")
#                #    bumping.append([source, version_released, version_proposed])

trackers = SwmStatus().trackers

for tracker_id, tracker in trackers.items():
        workflow_status = tracker.get("task", {}).get("kernel-sru-workflow", {}).get("status", "Invalid")
        if workflow_status != "In Progress":
            continue

        meta_name = tracker.get("packages", {}).get("meta")
        meta_version = tracker.get('versions', {}).get('meta')
        if meta_name is None or meta_version is None:
            continue
        #if not meta_name.startswith("linux-meta-azure"):
        #    continue
        signing_present = "signed" in tracker.get("packages", {})

        series_name = tracker.get("series")
        if series_name is None:
            continue
        series = ks.lookup_series(codename=series_name)
        if series is None:
            continue
        source_name = tracker.get("source")
        if source_name is None:
            continue
        source = series.lookup_source(source_name)
        routing = source.routing
        if routing is None:
            continue
        interesting_variants = primary_variants.intersection(set(source.variants or []))
        if len(interesting_variants) == 0:
            continue
        if len(source.testable_flavours) == 0:
            continue

        # Find the list of binaries of interest.
        lp_series = lp_distro.getSeries(name_or_version=series_name)
        for dest in source.routing.lookup_route("build"):
            lp_archive = lp.archives.getByReference(reference=dest.reference)
            if lp_archive is None:
                continue
            srcs = lp_archive.getPublishedSources(
                order_by_date=True,
                exact_match=True,
                distro_series=lp_series,
                pocket=dest.pocket,
                source_name=meta_name,
                version=meta_version,
            )
            if len(srcs) > 0:
                break
        if len(srcs) == 0:
            continue

        print("II: considering {} cycle={}".format(tracker_id, tracker.get("cycle", "??")))
        src = srcs[0]
        bins = src.getPublishedBinaries(active_binaries_only=False)
        bins_image = []
        for binary in bins:
            binary_name = binary.binary_package_name
            if "-image-" in binary_name:
                bins_image.append(binary)

        print(" ", bins_image)

        # Find the "previous" published version for comparison.
        updates = source.routing.lookup_route("updates")
        release = source.routing.lookup_route("release")

        print(" ", source.series.codename, source.name, source.variants)

        some = False
        signing_signoff = False
        kernel_signoff = False
        for route in (updates, release):
            if route is None or len(route) == 0:
                continue
            dest = route[0]
            lp_archive = lp.archives.getByReference(reference=dest.reference)
            if lp_archive is None:
                continue

            for binary in bins_image:
                pubs = lp_archive.getPublishedBinaries(
                    order_by_date=True,
                    exact_match=True,
                    distro_arch_series=binary.distro_arch_series,
                    pocket=dest.pocket,
                    status='Published',
                    binary_name=binary.binary_package_name,
                )
                for pub in pubs:
                    prev_version = pub.binary_package_version
                    if prev_version == meta_version:
                        continue
                    some = True
                    print(" ", pub.binary_package_name, meta_version, prev_version)

                    if meta_version.split('.')[0:2] != prev_version.split('.')[0:2]:
                        print("  ", "DIFFERENT")
                        if signing_present:
                            signing_signoff = True
                        kernel_signoff = True
            if some:
                break

        print(" ?DIFFERENT kernel-signoff={} signing_signoff={}".format(kernel_signoff, signing_signoff))

        continue
        if bin_found is None:
            version_found = "0.0"
        else:
            version_found = bin_found.binary_package_version

        print(" ", version_meta, version_found)

        if version_meta.split('.')[0:2] != version_found.split('.')[0:2]:
            print("  ", "DIFFERENT -- needs signing-signoff maybe")
        continue

        version_meta = tracker.get('versions', {}).get('meta', '0.0')
        if version_meta != version_proposed:
            continue

        # Found a relevant tracker, ensure it has a kernel-signoff.
        #print(tracker['task'])
        if 'kernel-signoff' in tracker.get('task', {}):
            continue

        print(" kernel-signoff missing -- adding")
        lp_tracker = lp.bugs[tracker_id]
        lp_task = None
        try:
            lp_task = lp_tracker.addTask(target=lp_wf_kernel_signoff)
        except lazr.restfulclient.errors.BadRequest:
            pass

        if lp_task is not None:
            lp_task.importance = 'Medium'
            lp_task.assignee = lp_ckt
            lp_task.lp_save()

            if version_released == '0.0':
                message = "New kernel requires kernel-signoff before publishing"
            else:
                message = "Major kernel version bump; requires kernel-signoff when additional upgrade testing is complete."
            lp_tracker.newMessage(content=message)
