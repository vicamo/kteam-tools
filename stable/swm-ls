#!/usr/bin/env python3
#
from __future__ import print_function

import argparse
import os
import sys

import yaml

from ktl.swm_status import SwmStatus


def bug_prefix(bugid):
    if bugid != "":
        bugid = "LP: #" + str(bugid)
    else:
        bugid = "--  --"
    return bugid


def sort_by_cycle_series(entry):
    cycle = entry.get("cycle")
    if cycle != "-":
        cycle_bits = cycle.split("-")
        cycle_bits[-1] = "{:03}".format(int(cycle_bits[-1]))
        cycle_pad = "-".join(cycle_bits)
    else:
        cycle_pad = "-"

    return "{cycle_pad} {series} {bugid_parent} {bugid}".format(cycle_pad=cycle_pad, **entry)


def sort_by_phase(entry):
    stage = entry.get("stage")
    return (stage, sort_by_cycle_series(entry))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="SWM status tool")
    parser.add_argument("--phase", help="Display phase information", action="store_true", default=False)
    parser.add_argument("--show-occupancy", help="Display occupancy information", action="store_true", default=False)
    parser.add_argument(
        "--show-vt", help="Display verification-testing information", action="store_true", default=False
    )
    parser.add_argument("--reasons", help="Display reason information", action="store_true", default=False)
    parser.add_argument("--tasks", help="Display task information", action="store_true", default=False)
    parser.add_argument("--separate-target", help="Display full target information", action="store_true", default=False)
    parser.add_argument("--show-assignee", help="Display task assignee", action="store_true", default=False)
    parser.add_argument("--show-owner", help="Display target owner", action="store_true", default=False)
    parser.add_argument("--show-stream", help="Display stream", action="store_true", default=False)
    parser.add_argument("--limit-owner", help="Limit display target to owner", action="append")
    parser.add_argument(
        "--sort-phase", help="Sort by phase (including entry and exit)", action="store_true", default=False
    )
    args = parser.parse_args()

    # Ask for nothing, get reasons only.
    if (
        args.phase is False
        and args.reasons is False
        and args.tasks is False
        and args.show_occupancy is False
        and args.show_vt is False
    ):
        args.reasons = True

    status = SwmStatus()

    results = []

    generate_sort = sort_by_cycle_series
    if args.sort_phase:
        generate_sort = sort_by_phase

    for bug_id, bug_data in status.trackers.items():
        # Limits.
        if args.limit_owner and bug_data.get("owner") not in args.limit_owner:
            continue
        for key in bug_data.keys():
            if ord(key[0]) == 160:
                print(bug_id, bug_data)
        if len(bug_data.get("reason", {}).keys()) == 0:
            phase = bug_data.get("phase", "Holding not ready")
            phase = phase.replace(" ", " -- ", 1)
            bug_data["reason"] = {
                "idle": phase,
            }

        if args.tasks is True:
            for task in sorted(bug_data.get("task", {}).keys()):
                task_name = ("" if task[0] == ":" else " ") + task
                entry = {
                    "bugid": bug_prefix(bug_id),
                    "bugid_parent": bug_prefix(bug_data.get("master-bug", "")),
                    "cycle": bug_data.get("cycle", "-"),
                    "series": bug_data.get("series", "-"),
                    "source": bug_data.get("source", "-"),
                    "target": bug_data["task"][task].get("target", bug_data.get("target", "-")),
                    "version": bug_data.get("version", "--not-specified--"),
                    "phase": task_name,
                    "phase_status": bug_data["task"][task]["status"],
                    "stage": bug_data.get("stage", 10000),
                    "assignee": bug_data["task"][task].get("assignee", "unassigned"),
                    "owner": bug_data.get("owner", "-"),
                    "stream": bug_data.get("built", {}).get("route-entry", "-"),
                    "occupancy": bug_data.get("occupancy", []),
                    "vt": bug_data.get("testing", {}).get("verification-bugs", "-"),
                }
                results.append((generate_sort(entry), entry))

        if args.reasons is True:
            for task in sorted(bug_data.get("reason", {}).keys()):
                task_name = ("" if task[0] == ":" else " ") + task
                entry = {
                    "bugid": bug_prefix(bug_id),
                    "bugid_parent": bug_prefix(bug_data.get("master-bug", "")),
                    "cycle": bug_data.get("cycle", "-"),
                    "series": bug_data.get("series", "-"),
                    "source": bug_data.get("source", "-"),
                    "target": bug_data["task"].get(task, {}).get("target", bug_data.get("target", "-")),
                    "version": bug_data.get("version", "--not-specified--"),
                    "phase": task_name,
                    "phase_status": bug_data["reason"][task],
                    "stage": bug_data.get("stage", 10000),
                    "assignee": bug_data["task"].get(task, {}).get("assignee", "unassigned"),
                    "owner": bug_data.get("owner", "-"),
                    "stream": bug_data.get("built", {}).get("route-entry", "-"),
                    "occupancy": bug_data.get("occupancy", []),
                    "vt": bug_data.get("testing", {}).get("verification-bugs", "-"),
                }
                print(bug_id)
                results.append((generate_sort(entry), entry))

        if args.phase is True or args.show_occupancy or args.show_vt:
            entry = {
                "bugid": bug_prefix(bug_id),
                "bugid_parent": bug_prefix(bug_data.get("master-bug", "")),
                "cycle": bug_data.get("cycle", "-"),
                "series": bug_data.get("series", "-"),
                "source": bug_data.get("source", "-"),
                "target": bug_data.get("target", "-"),
                "version": bug_data.get("version", "--not-specified--"),
                "phase": "overall",
                "phase_status": bug_data.get("phase", "Not Ready"),
                "stage": bug_data.get("stage", 10000),
                "assignee": "--",
                "owner": bug_data.get("owner", "-"),
                "stream": bug_data.get("built", {}).get("route-entry", "-"),
                "occupancy": bug_data.get("occupancy", []),
                "vt": bug_data.get("testing", {}).get("verification-bugs", "-"),
            }
            results.append((generate_sort(entry), entry))

    results.sort(key=lambda x: x[0])

    # Size the various stretchy fields.
    measure = ("series", "source", "target", "version", "full_target", "phase", "owner", "assignee")
    sizes = {}
    for sort, entry in results:
        entry["full_target"] = entry["source"]
        if entry["target"] not in ("-", entry["source"]):
            entry["full_target"] += "/" + entry["target"]

        for key in measure:
            lkey = "len_" + key
            if len(entry.get(key, "")) > sizes.get(lkey, 0):
                sizes[lkey] = len(entry[key])

    fmt = "{bugid:13} {bugid_parent:13} {cycle:15} {series:{len_series}}"
    if args.separate_target:
        fmt += " {source:{len_source}} {target:{len_target}}"
    else:
        fmt += " {full_target:{len_full_target}}"
    fmt += " {version:{len_version}}"
    if args.show_owner:
        fmt += " {owner:{len_owner}}"
    if args.show_assignee:
        fmt += " {assignee:{len_assignee}}"
    if args.show_stream:
        fmt += " {stream}"
    if args.show_occupancy:
        fmt += "  {occupancy}"
    if args.show_vt:
        fmt += "  {vt}"
    else:
        fmt += "  {phase:{len_phase}} {phase_status:35}"
    sort_prev = None
    count = 0
    for sort, entry in results:
        entry_plus = entry
        entry_plus.update(sizes)
        row = fmt.format(**entry_plus)

        if sort != sort_prev:
            sort_prev = sort
            count += 1

        if os.isatty(sys.stdout.fileno()) and False:  # Blocked
            (colour_on, colour_off) = ("\033[31m", "\033[0m")
        elif os.isatty(sys.stdout.fileno()) and count % 2 == 0:
            (colour_on, colour_off) = ("\033[33m", "\033[0m")
        else:
            (colour_on, colour_off) = ("", "")

        print(colour_on + row + colour_off)
# vi:set ts=4 sw=4 expandtab:
