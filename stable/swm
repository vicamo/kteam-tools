#!/usr/bin/env python3
#
# SWM - SRU Workflow Manager  (aka: shankbot)
#

import sys
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, WARNING, INFO
import traceback

from wfl.log                            import Clog, center, cleave, cdebug
from wfl.manager                        import WorkflowManager
from wfl.bugmail                        import BugMailConfigFileMissing
from wfl.bug                            import WorkflowBug
from wfl.task                           import WorkflowBugTask

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I do increadible things to kernel workflow bugs.
    '''
    app_epilog = '''
examples:
    swm
    swm --debug
    swm --bugs 1134424 1133589
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug',                      action='store_true', default=False, help='')
    parser.add_argument('--dry-run', '--dryrun',        action='store_true', default=False, help='Make no permanent changes.', dest='dryrun')
    parser.add_argument('--no-status-changes',          action='store_true', default=False, help='Make no status changes.')
    parser.add_argument('--no-phase-changes',           action='store_true', default=False, help='Make no phase changes.')
    parser.add_argument('--no-assignments',             action='store_true', default=False, help='Make no assignee assignments.')
    parser.add_argument('--no-announcements',           action='store_true', default=False, help='Send no email, msgq or other announcements.')
    parser.add_argument('--no-timestamps',              action='store_true', default=False, help='Don\'t set any timestamps in the properties.')
    parser.add_argument('--sauron',                     action='store_true', default=False, help='I\'m a professional, I know what I\'m doing. (will work on bugs marked \'invalid\')')
    parser.add_argument('--no-color',                   action='store_true', default=False, help='Turn off colorisationn.)')
    parser.add_argument('--dependants',                 action='store_true', default=False, help='Include dependant bugs of specified bugs.')
    parser.add_argument('--dependants-only',            action='store_true', default=False, help='Only scan dependant bugs.')
    parser.add_argument('--queue-only',                 action='store_true', default=False, help='Only queue bugs requiring further scan.')
    parser.add_argument('--queue-direct',               action='store_true', default=False, help='Only queue proffered bugs.')
    parser.add_argument('--logfile',                                         default=None, help='Where to log the output.')
    parser.add_argument('--log-prefix',                                      default=None, help='Logfile prefix to disabiguate overlapping runs.')
    parser.add_argument('--local-msgqueue-port',  type=int,                  default=None,  help='The local port to be used to talk to the Rabbit MQ service.')
    parser.add_argument('bugs',  metavar='BUGS', nargs="*",                  default=None, help='A list of Launchpad bug ids that are to be processed.')

    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_prefix = ''
    if args.log_prefix is not None:
        log_prefix = args.log_prefix + ' '
    if args.debug:
        log_format = log_prefix + "%(levelname)05s - %(message)s"
        basicConfig(filename=args.logfile, level=DEBUG, format=log_format)
        Clog.dbg = True
    else:
        log_format = log_prefix + "%(message)s"
        basicConfig(filename=args.logfile, level=INFO, format=log_format)
        Clog.dbg = False

    # Turn off color for logging.
    if args.no_color:
        Clog.color = False

    center('__main__')
    if args.debug:
        cdebug('Configuration:')
        for arg in vars(args):
            cdebug('    %s: %s' % (arg, getattr(args, arg)))

    try:
        # Pass along any "global" settings to the WorkflowBugTask.
        #
        WorkflowBug.sauron            = args.sauron
        WorkflowBug.dryrun            = args.dryrun
        WorkflowBug.no_status_changes = args.no_status_changes
        WorkflowBug.no_phase_changes  = args.no_phase_changes
        WorkflowBug.no_assignments    = args.no_assignments
        WorkflowBug.no_announcements  = args.no_announcements
        WorkflowBug.no_timestamps     = args.no_timestamps
        WorkflowBug.local_msgqueue_port = args.local_msgqueue_port

        WorkflowBugTask.dryrun = WorkflowBug.dryrun
        WorkflowBugTask.no_status_changes = WorkflowBug.no_status_changes
        WorkflowBugTask.no_assignments = WorkflowBug.no_assignments
        WorkflowBugTask.no_timestamps = WorkflowBug.no_timestamps

        retval = WorkflowManager(args).manage()

    except BugMailConfigFileMissing as e:
        print(e.message)
        retval = -1

    except Exception:
        trace = traceback.format_exc()
        try:
            sys.stderr.write(trace)
        except:
            pass
        logfile = open('/tmp/exceptions.log', 'w')
        logfile.write('Critical exception in core')
        logfile.write(trace)
        logfile.write('----------------------------------------\n\n')
        logfile.close()
        retval = -2

    cleave('__main__ (%s)' % (retval))
    exit(retval)

# vi:set ts=4 sw=4 expandtab:
