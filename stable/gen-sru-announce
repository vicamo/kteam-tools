#!/usr/bin/env python3
#

from datetime                           import datetime, timedelta
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from os                                 import path
from subprocess                         import Popen, PIPE
import re
import sys

from ktl.sru_cycle                      import SruCycle


# ErrorExit
#
class ErrorExit(Exception):
    def __init__(s, emsg):
        s.message = emsg

# TheApp
#
class TheApp(object):
    '''
    '''
    # sd
    #
    def sd(s, date):
        '''
        Starting date. Take the string passed in, verify it's a date we recognize and then pull it
        appart into the pieces that we need, returning a datetime object.
        '''
        date_rc = re.compile("^\d\d\d\d\.\d\d\.\d\d$")
        m = date_rc.match(date)
        if m is not None:
            t = datetime.strptime(date, '%Y.%m.%d')

            # Verify that the starting date is a friday.
            #
            if t.isoweekday() != 1:
                raise ErrorExit('The date specified must be the start date (Monday) of an SRU cycle.')
        else:
            raise ErrorExit('Badly formed date. Must be in YYYY.MM.DD format. For example: 2018.04.23')
        return t

    # layout_cycle
    #
    def layout_cycle(s, date, security=False):
        if security:
            sru_cycle = SruCycle().lookup_cycle('s%s' % (date))
        else:
            sru_cycle = SruCycle().lookup_cycle(date)

        if sru_cycle is None:
            # If the cycle is not yet defined, assume a 4 week cadance
            # for regular cycles and 2 weeks for security cycles
            if security:
                # If the security cycle is not found, try to guess the
                # dates based on the regular cycle date
                cycle_name = 's%s' % (date)
                sru_cycle = SruCycle().lookup_cycle(date)
                if sru_cycle:
                    cycle_start = sru_cycle.release_date
                else:
                    cycle_start = s.sd(date) + timedelta(days=28)
                cycle_end = cycle_start + timedelta(days=13)
            else:
                cycle_name = date
                cycle_start = s.sd(date)
                cycle_end = cycle_start + timedelta(days=27)
        else:
            cycle_name = sru_cycle.name
            cycle_start = sru_cycle.start_date
            cycle_end = sru_cycle.release_date - timedelta(days=1)

        patch_end = cycle_start - timedelta(days=5)

        prep_start = cycle_start
        prep_end = cycle_start + timedelta(days=4)

        test_start = cycle_start + timedelta(days=7)
        test_end = cycle_end - timedelta(days=2)

        release_end = cycle_end + timedelta(days=1)

        length = release_end - cycle_start
        length = int(length.days / 7)

        return ({'cycle_name': cycle_name,
                 'cycle_start_date': cycle_start,
                 'cycle_end_date': cycle_end,
                 'cycle_start': cycle_start.strftime('%d-%b'),
                 'cycle_end': cycle_end.strftime('%d-%b'),
                 'length': length,
                 'patch_end': patch_end.strftime('%d-%b'),
                 'prep_start': prep_start.strftime('%d-%b'),
                 'prep_end': prep_end.strftime('%d-%b'),
                 'test_start': test_start.strftime('%d-%b'),
                 'test_end': test_end.strftime('%d-%b'),
                 'release_end': release_end.strftime('%d-%b')}
            )

    # print_cycle
    #
    def print_cycle(s, layout):

        print('')
        print('cycle: %s through %s (%s weeks)' % (layout['cycle_start'], layout['cycle_end'], layout['length']))
        print('====================================================================')
        print('         %s   Last day for kernel commits for this cycle.' % (layout['patch_end']))
        print('%s - %s   Kernel prep week.' % (layout['prep_start'], layout['prep_end']))
        print('%s - %s   Bug verification & Regression testing.' % (layout['test_start'], layout['test_end']))
        print(' Week of %s   Release to -updates.' % (layout['release_end']))
        print('')


    # Print the cycle dates as HTML table
    #
    def print_cycle_html(s, cycles, cycle_type=None):
        '''
        Arguments:
          cycles: list of tuples with (layout, current)
            Where:
              layout: dictionary as returned by layout_cycle()
              current: whether this is the current cycle (Bool)
          cycle_type: cycle type header (String)
        '''

        cycle_phases = {}
        cycle_phases['patch_end'] = 'Last day for kernel patches'
        cycle_phases['prep_start'] = 'Kernel prep and testing weeks'
        cycle_phases['release_end'] = 'Release to -updates'

        if cycle_type:
            print('<h2>%s</h2>' % (cycle_type))

        print('<table width="100%%" border="0" class="sru" style="text-align: center;"> <!-- -->')

        # SRU Title line
        print('    <tr>')
        print('        <td width="25%%">&nbsp;</td>')
        for cycle in cycles:
            layout = cycle['layout']
            cycle_title = layout['cycle_name']
            cycle_class = "sru-current" if cycle['current'] else "sru-other"

            print('        <td class="sru-pad">&nbsp;</td>')
            print('        <td colspan="2" class="sru-title %s">%s<br>(%s weeks)</td>' % (cycle_class, cycle_title, layout['length']))
        print('    </tr>')

        # Last day for commits line
        print('    <tr>')
        print('        <td class="sru-caption">%s</td>' % (cycle_phases['patch_end']))
        for cycle in cycles:
            layout = cycle['layout']
            cycle_class = "sru-current" if cycle['current'] else "sru-other"
            print('        <td class="sru-pad">&nbsp;</td>')
            print('        <td class="sru-date">&nbsp;</td>')
            print('        <td class="sru-date %s">%s</td>' % (cycle_class, layout['patch_end']))
        print('    </tr>')

        # Kernel prep and testing weeks line
        print('    <tr>')
        print('        <td class="sru-caption">%s</td>' % (cycle_phases['prep_start']))
        for cycle in cycles:
            layout = cycle['layout']
            cycle_class = "sru-current" if cycle['current'] else "sru-other"
            print('        <td class="sru-pad">&nbsp;</td>')
            print('        <td class="sru-date %s">%s</td>' % (cycle_class, layout['prep_start']))
            print('        <td class="sru-date %s">%s</td>' % (cycle_class, layout['test_end']))
        print('    </tr>')

        # Release to -updates line
        print('    <tr>')
        print('        <td class="sru-caption">%s</td>' % (cycle_phases['release_end']))
        for cycle in cycles:
            layout = cycle['layout']
            cycle_class = "sru-current" if cycle['current'] else "sru-other"
            print('        <td class="sru-pad">&nbsp;</td>')
            print('        <td class="sru-date">&nbsp;</td>')
            print('        <td class="sru-date %s">Week of %s</td>' % (cycle_class, layout['release_end']))
        print('    </tr>')

        print('</table>')


    # Print kernel versions
    #
    def print_kernel_versions(s):
        cmd = "%s --no-devel --no-esm" % path.join(path.dirname(__file__), 'sru-cycle-kernel-versions')
        try:
            for line in Popen(cmd, shell=True, stdout=PIPE).stdout.readlines():
                print(line.rstrip().decode())
        except:
            raise ErrorExit('Failed calling %s for kernel versions.' % (cmd))

    # main
    #
    def main(s, args):
        retval = 0

        sc = SruCycle()

        # Regular stable cycles
        layout_curr = s.layout_cycle(args.date)

        days_prev = 0
        while days_prev < 70:
            days_prev += 7
            date_prev = (layout_curr['cycle_start_date'] - timedelta(days=days_prev)).strftime('%Y.%m.%d')
            sru_cycle = sc.lookup_cycle(date_prev)
            if sru_cycle:
                break
        if sru_cycle:
            layout_prev = s.layout_cycle(date_prev)
        else:
            layout_prev = None
            print("WARNING: no previous cycle\n", file=sys.stderr)

        date_next = (layout_curr['cycle_end_date'] + timedelta(days=1)).strftime('%Y.%m.%d')
        layout_next = s.layout_cycle(date_next)

        # Security updates cycles
        # The current and previous security cycles depend on having a previous
        # regular cycle
        if layout_prev:
            layout_sec_curr = s.layout_cycle(layout_prev['cycle_name'], security=True)

            days_prev = 0
            while days_prev < 70:
                days_prev += 7
                date_prev = (layout_prev['cycle_start_date'] - timedelta(days=days_prev)).strftime('%Y.%m.%d')
                sru_cycle = sc.lookup_cycle('s%s' % (date_prev))
                if sru_cycle:
                    break
            if sru_cycle:
                layout_sec_prev = s.layout_cycle(date_prev, security=True)
            else:
                layout_sec_prev = None
        else:
            layout_sec_curr = None
            layout_sec_prev = None

        if layout_sec_prev is None:
            print("WARNING: no previous security cycle\n", file=sys.stderr)
        if layout_sec_curr is None:
            print("WARNING: no current security cycle\n", file=sys.stderr)

        # The start of the next security cycle is based on the end of the
        # date of the current regular cycle, not on the current security
        # cycle
        layout_sec_next = s.layout_cycle(layout_curr['cycle_name'], security=True)

        if args.html:
            # Stable updates cycles
            cycles = []
            if layout_prev is not None:
                cycles.append({'layout': layout_prev, 'current': False})
            cycles.append({'layout': layout_curr, 'current': True})
            cycles.append({'layout': layout_next, 'current': False})
            s.print_cycle_html(cycles, 'Stable Updates Cycles')

            # Security updates cycles
            cycles = []
            if layout_sec_prev is not None:
                cycles.append({'layout': layout_sec_prev, 'current': False})
            if layout_sec_curr is not None:
                cycles.append({'layout': layout_sec_curr, 'current': True})
            cycles.append({'layout': layout_sec_next, 'current': False})
            s.print_cycle_html(cycles, 'Security Updates Cycles')
        else:
            print('To: Kernel SRU Announcements <kernel-sru-announce@lists.ubuntu.com>, '
                  'Ubuntu Kernel Team <kernel-team@lists.ubuntu.com>')
            print('Subject: A new SRU cycle started...')
            s.print_cycle(layout_curr)
            print('')
            s.print_kernel_versions()
            print('')
            s.print_cycle(layout_next)

        return retval

if __name__ == '__main__':
    retval = -1

    # Command line argument setup and initial processing
    #
    app_description = '''
    Generates the text for the email announcing the new SRU cycle dates and kernel
    versions. Using the alternate HTML mode will produce an HTML table which only
    contains the cycle dates in the format used on kernel.ubuntu.com

    The date which has to be given is the Monday which starts the new cycle.
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--html', action='store_true', default=False, help='Generate output suitable to be embedded into a web page (table)')
    parser.add_argument('date', metavar='<SRU cycle start date>', type=str, help='Date format: YYYY.MM.DD)')
    args = parser.parse_args()

    try:
        app = TheApp()
        retval = app.main(args)
    except ErrorExit as e:
        print('\n*** Error:')
        print('      %s\n' % e.message)

    exit(retval)

# vi:set ts=4 sw=4 expandtab syntax=python:
