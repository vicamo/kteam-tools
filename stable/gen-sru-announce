#!/usr/bin/env python3
#

from datetime                           import datetime, timedelta
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from os                                 import path
from subprocess                         import Popen, PIPE
import re

from ktl.sru_cycle                      import SruCycle


# ErrorExit
#
class ErrorExit(Exception):
    def __init__(s, emsg):
        s.message = emsg

# TheApp
#
class TheApp(object):
    '''
    '''
    # sd
    #
    def sd(s, date):
        '''
        Starting date. Take the string passed in, verify it's a date we recognize and then pull it
        appart into the pieces that we need, returning a datetime object.
        '''
        date_rc = re.compile("^\d\d\d\d\.\d\d\.\d\d$")
        m = date_rc.match(date)
        if m is not None:
            t = datetime.strptime(date, '%Y.%m.%d')

            # Verify that the starting date is a friday.
            #
            if t.isoweekday() != 1:
                raise ErrorExit('The date specified must be the start date (Monday) of an SRU cycle.')
        else:
            raise ErrorExit('Badly formed date. Must be in YYYY.MM.DD format. For example: 2018.04.23')
        return t

    # layout_cycle
    #
    def layout_cycle(s, date):
        sru_cycle = SruCycle().lookup_cycle(date)
        # If the cycle is not yet defined, assume a 4 week cadance.
        if sru_cycle is None:
            cycle_start = s.sd(date)
            cycle_end = cycle_start + timedelta(days=27)
        else:
            cycle_start = sru_cycle.start_date
            cycle_end = sru_cycle.release_date - timedelta(days=1)

        patch_end = cycle_start - timedelta(days=5)

        prep_start = cycle_start
        prep_end = cycle_start + timedelta(days=4)

        test_start = cycle_start + timedelta(days=7)
        test_end = cycle_end - timedelta(days=2)

        release_end = cycle_end + timedelta(days=1)

        length = release_end - cycle_start
        length = int(length.days / 7)

        return (cycle_start,
                cycle_end,
                cycle_start.strftime('%d-%b'),
                cycle_end.strftime('%d-%b'),
                length,
                patch_end.strftime('%d-%b'),
                prep_start.strftime('%d-%b'),
                prep_end.strftime('%d-%b'),
                test_start.strftime('%d-%b'),
                test_end.strftime('%d-%b'),
                release_end.strftime('%d-%b'),
            )

    # print_cycle
    #
    def print_cycle(s, layout):
        (_, _, cycle_start, cycle_end, length, patch_end, prep_start, prep_end, test_start, test_end, release_end) = layout

        print('')
        print('cycle: %s through %s (%s weeks)' % (cycle_start, cycle_end, length))
        print('====================================================================')
        print('         %s   Last day for kernel commits for this cycle.' % (patch_end))
        print('%s - %s   Kernel prep week.' % (prep_start, prep_end))
        print('%s - %s   Bug verification & Regression testing.' % (test_start, test_end))
        print(' Week of %s   Release to -updates.' % (release_end))
        print('')


    # Print the cycle dates as HTML table
    #
    def print_cycle_html(s, cycles=[]):
        '''
        Arguments:
          cycles: list of tuples with (layout, current)
            Where:
              layout: tuple consisting of
                (cycle_date, cycle_end, cycle_start, cycle_end, length, patch_end, prep_start, prep_end, test_start, test_end, release_end)
              current: whether this is the current cycle (Bool)
        '''

        cycle_phases = {}
        cycle_phases['patch_end'] = 'Last day for kernel commits for this cycle'
        cycle_phases['prep_start'] = 'Kernel prep week'
        cycle_phases['test_start'] = 'Bug verification &amp; Regression testing'
        cycle_phases['release_end'] = 'Release to -updates'

        print('<table width="100%%" border="0" class="sru" style="text-align: center;"> <!-- -->')

        # SRU Title line
        print('                <tr>')
        print('                   <td width="25%%">&nbsp;</td>')
        for cycle in cycles:
            layout = cycle['layout']
            cycle_title = layout[0].strftime('%Y.%m.%d')
            cycle_class = "sru-current" if cycle['current'] else "sru-other"

            print('                   <td class="sru-pad">&nbsp;</td>')
            print('                   <td colspan="2" class="sru-title %s">%s<br>(%s weeks)</td>' % (cycle_class, cycle_title, layout[4]))
        print('                </tr>')

        # Last day for commits line
        print('                <tr>')
        print('                <td class="sru-caption">%s</td>' % (cycle_phases['patch_end']))
        for cycle in cycles:
            layout = cycle['layout']
            cycle_class = "sru-current" if cycle['current'] else "sru-other"
            print('                <td class="sru-pad">&nbsp;</td>')
            print('                <td class="sru-date">&nbsp;</td>')
            print('                <td class="sru-date %s">%s</td>' % (cycle_class, layout[5]))

        # Kernel prep week line
        print('                <tr>')
        print('                <td class="sru-caption">%s</td>' % (cycle_phases['prep_start']))
        for cycle in cycles:
            layout = cycle['layout']
            cycle_class = "sru-current" if cycle['current'] else "sru-other"
            print('                <td class="sru-pad">&nbsp;</td>')
            print('                <td class="sru-date %s">%s</td>' % (cycle_class, layout[6]))
            print('                <td class="sru-date %s">%s</td>' % (cycle_class, layout[7]))

        # Verification and test weeks line
        print('                <tr>')
        print('                <td class="sru-caption">%s</td>' % (cycle_phases['test_start']))
        for cycle in cycles:
            layout = cycle['layout']
            cycle_class = "sru-current" if cycle['current'] else "sru-other"
            print('                <td class="sru-pad">&nbsp;</td>')
            print('                <td class="sru-date %s">%s</td>' % (cycle_class, layout[8]))
            print('                <td class="sru-date %s">%s</td>' % (cycle_class, layout[9]))

        # Release to -updates line
        print('                <tr>')
        print('                <td class="sru-caption">%s</td>' % (cycle_phases['release_end']))
        for cycle in cycles:
            layout = cycle['layout']
            cycle_class = "sru-current" if cycle['current'] else "sru-other"
            print('                <td class="sru-pad">&nbsp;</td>')
            print('                <td class="sru-date">&nbsp;</td>')
            print('                <td class="sru-date %s">Week of %s</td>' % (cycle_class, layout[10]))

        print('</table>')


    # Print kernel versions
    #
    def print_kernel_versions(s):
        cmd = "%s --no-devel --no-esm" % path.join(path.dirname(__file__), 'sru-cycle-kernel-versions')
        try:
            for line in Popen(cmd, shell=True, stdout=PIPE).stdout.readlines():
                print(line.rstrip().decode())
        except:
            raise ErrorExit('Failed calling %s for kernel versions.' % (cmd))

    # main
    #
    def main(s, args):
        retval = 0

        sc = SruCycle()

        layout_curr = s.layout_cycle(args.date)
        days_prev = 0
        while days_prev < 70:
            days_prev += 7
            date_prev = (layout_curr[0] - timedelta(days=days_prev)).strftime('%Y.%m.%d')
            sru_cycle = sc.lookup_cycle(date_prev)
            if sru_cycle:
                break
        if sru_cycle:
            layout_prev = s.layout_cycle(date_prev)
        else:
            layout_prev = None
            print("WARNING: no previous cycle\n", file=sys.stderr)
        date_next = (layout_curr[1] + timedelta(days=1)).strftime('%Y.%m.%d')
        layout_next = s.layout_cycle(date_next)

        if args.html:
            cycles = []
            if layout_prev is not None:
                cycles.append({'layout': layout_prev, 'current': False})
            cycles.append({'layout': layout_curr, 'current': True})
            cycles.append({'layout': layout_next, 'current': False})

            s.print_cycle_html(cycles)
        else:
            print('To: Kernel SRU Announcements <kernel-sru-announce@lists.ubuntu.com>, '
                  'Ubuntu Kernel Team <kernel-team@lists.ubuntu.com>')
            print('Subject: A new SRU cycle started...')
            s.print_cycle(layout_curr)
            print('')
            s.print_kernel_versions()
            print('')
            s.print_cycle(layout_next)

        return retval

if __name__ == '__main__':
    retval = -1

    # Command line argument setup and initial processing
    #
    app_description = '''
    Generates the text for the email announcing the new SRU cycle dates and kernel
    versions. Using the alternate HTML mode will produce an HTML table which only
    contains the cycle dates in the format used on kernel.ubuntu.com

    The date which has to be given is the Monday which starts the new cycle.
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--html', action='store_true', default=False, help='Generate output suitable to be embedded into a web page (table)')
    parser.add_argument('date', metavar='<SRU cycle start date>', type=str, help='Date format: YYYY.MM.DD)')
    args = parser.parse_args()

    try:
        app = TheApp()
        retval = app.main(args)
    except ErrorExit as e:
        print('\n*** Error:')
        print('      %s\n' % e.message)

    exit(retval)

# vi:set ts=4 sw=4 expandtab syntax=python:
