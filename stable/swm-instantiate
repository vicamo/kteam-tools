#!/usr/bin/env python3
#
# SWM - SRU Workflow Manager  (aka: shankbot)
#
# swm-publishing -- monitor publishing of things.
#

import os
import logging
import re
import sys
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from contextlib                         import contextmanager
from fcntl                              import lockf, LOCK_EX, LOCK_NB, LOCK_UN

import yaml

# Add ../libs to the Python search path
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir, 'libs')))

from ktl.kernel_series import KernelSeries
from ktl.workflow import Workflow, DefaultAssigneeMissing
from lazr.restfulclient.errors import BadRequest
from wfl.log import Clog, cdebug, cinfo, cerror, cwarn, center, cleave
from wfl.launchpad import LaunchpadDirect
from wfl.work import SwmWork


class TrackerProduction:

    def __init__(self, project, lp=None, ks=None, wf=None):
        if lp is None:
            lp = LaunchpadDirect.login()
        if ks is None:
            ks = KernelSeries()
        if wf is None:
            wf = Workflow()

        self.lp = lp
        self.ks = ks
        self.wf = wf
        self.project_name = project
        self.project = self.lp.projects[project]

    title2sp_rc = re.compile(r'^([^/]*)/?(\S+):')

    def lookup_source(self, bug_id, bug):
        title = bug.title
        match = self.title2sp_rc.match(title)
        if not match:
            raise ValueError("{}: title not parsable".format(bug_id))

        (series_name, source_name) = (match.group(1), match.group(2))

        cinfo("series_name<{}> source_name<{}>".format(series_name, source_name))

        series = self.ks.lookup_series(codename=series_name)
        if series is None:
            raise ValueError("{}: series not in kernel-series".format(bug_id))
        source = series.lookup_source(source_name)
        if series is None:
            raise ValueError("{}: source not found in series".format(bug_id))

        cinfo(source)

        return source

    def load_properties(self, bug):
        description = bug.description
        return yaml.safe_load(description.split('-- swm properties --')[-1])

    def lp_task_update(self, lp_task, status=None, importance=None, assignee=None):
        changed = []
        if status is not None and lp_task.status != status:
            lp_task.status = status
            changed.append('status {}'.format(status))

        if importance is not None and lp_task.importance != importance:
            lp_task.importance = importance
            changed.append('importance {}'.format(importance))

        if assignee is not None:
            lp_assignee = self.lp.people[assignee]
            if lp_task.assignee != lp_assignee:
                lp_task.assignee = lp_assignee
                changed.append('assignee {}'.format(assignee))

        if len(changed) > 0:
            cinfo("task updated: " + ', '.join(changed))
            lp_task.lp_save()

    def instantiate(self, bug_id, lp_bug):
        cinfo("INSTANTIATE {}".format(bug_id))

        # Can we add assignees and subscribers.
        is_private = lp_bug.private
        is_mute = False
        for tag in lp_bug.tags:
            if tag == 'kernel-release-tracking-bug-test':
                is_mute = True
                break

        # Figure out the package we are instantiating for.
        ks_source = self.lookup_source(bug_id, lp_bug)
        swm_props = self.load_properties(lp_bug)
        variant = swm_props.get('variant', 'combo')
        master = swm_props.get('master-bug', swm_props.get('kernel-stable-master-bug'))

        # Pick up the invalidation hints from kernel-series.
        ks_invalid_tasks = []
        if ks_source.invalid_tasks is not None:
            ks_invalid_tasks = ks_source.invalid_tasks

        # Run the existing tags and record them by self_link.
        lp_tasks = {}
        for lp_task in lp_bug.bug_tasks:
            lp_tasks[lp_task.target.self_link] = lp_task

        # First add all of the required workflow tasks
        for wf_task in self.project.series_collection:
            cinfo(wf_task)
            if not self.wf.is_task_valid(wf_task, ks_source, variant, snap_name=swm_props.get('snap-name')):
                continue
            wf_name = wf_task.display_name
            cdebug('    adding: %s' % wf_name)
            if wf_task.self_link not in lp_tasks:
                lp_tasks[wf_task.self_link] = lp_bug.addTask(target=wf_task)
            lp_task = lp_tasks[wf_task.self_link]

            status = 'New'
            if wf_name in ks_invalid_tasks:
                status = 'Invalid'

            assignee = None
            if status != 'Invalid' and not is_private:
                try:
                    assignee = self.wf.assignee_ex(ks_source.series.codename, ks_source.name, wf_task.display_name, ks_source.development)
                except DefaultAssigneeMissing:
                    pass

            self.lp_task_update(lp_task, status=status, importance='Medium', assignee=assignee)

        # Subscribers.
        if not is_private and not is_mute:
            subscriber_present = {}
            for subscriber in lp_bug.subscriptions:
                subscriber_present[subscriber.person.self_link] = True
            for subscriber in self.wf.subscribers(ks_source.name, ks_source.development):
                lp_subscriber = self.lp.people[subscriber]
                if lp_subscriber.self_link in subscriber_present:
                    continue
                cdebug('    subscriber {}'.format(subscriber))
                lp_bug.subscribe(person=lp_subscriber)


        # Add the package/series nomination.
        if variant in ('debs', 'combo'):
            cdebug("series/package task ({}/{})".format(ks_source.series.codename, ks_source.name))
            lp_ubuntu = self.lp.distributions['ubuntu']
            lp_series = lp_ubuntu.getSeries(name_or_version=ks_source.series.codename)
            lp_package = lp_series.getSourcePackage(name=ks_source.name)

            lp_task = None
            if lp_package is not None and lp_package.self_link not in lp_tasks:
                try:
                    cdebug("    adding: {}".format(lp_package.self_link))
                    lp_tasks[lp_package.self_link] = lp_bug.addTask(target=lp_package)
                except BadRequest:
                    lp_package = lp_series.getSourcePackage(name='linux')
                    cdebug("    failed, adding: {}".format(lp_package.self_link))
                    lp_tasks[lp_package.self_link] = lp_bug.addTask(target=lp_package)

            if lp_package is not None:
                lp_task = lp_tasks.get(lp_package.self_link)
            if lp_task is not None:
                self.lp_task_update(lp_task, status='New', importance='Medium')

        # If this is a key package default to derivatives held.
        if master is None:
            cinfo('blocking derivatives')
            tags = lp_bug.tags
            tags.append('kernel-block-derivatives')
            lp_bug.tags = tags
            lp_bug.lp_save()

        # All done, mark ready.
        lp_task = lp_tasks[self.project.self_link]
        cdebug("liven workflow task")

        self.lp_task_update(lp_task, status='Triaged', importance='Medium')

    def instantiate_all(self):
        bugs = {}

        tasks = self.project.searchTasks(
            status=['Confirmed'],
            omit_duplicates=False)
        for task in tasks:
            bug = task.bug
            bugs[bug.id] = bug

        cinfo("Run found {} trackers".format(len(bugs)))

        for bug_id, bug in sorted(bugs.items()):
            self.instantiate(bug_id, bug)

    @contextmanager
    def lock_bug(self, what, block=True):
        with open("swm.lock", "w") as lockfd:
            mode = LOCK_EX
            if block is False:
                mode |= LOCK_NB
            lockf(lockfd, mode, 1, int(what))
            yield
            lockf(lockfd, LOCK_UN, 1, int(what))

    def request_shank(self, bug_id):
        work = SwmWork(config=os.path.expanduser("~/.kernel-swm-worker.yaml"))
        work.send_shank(bug_id, priority=3)

    def instantiate_one(self, bug_id):
        try:
            with self.lock_bug(bug_id, block=False):
                bug = self.lp.bugs[bug_id]
                self.instantiate(bug_id, bug)
                self.request_shank(bug_id)
        except BlockingIOError:
            cinfo("INSTANTIATE {} already in-progress, skipped".format(bug_id))


if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
SWM tracker instantiator
    '''
    app_epilog = '''
examples:
    swm-instantiate --help
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('trackers', nargs="*", help='Trackers to scan')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    logging.basicConfig(format='%(asctime)s %(levelname)-8s %(message)s', datefmt='%Y-%m-%d %H:%M:%S', level=logging.INFO)
    logger = logging.getLogger('swm-instantiate')
    logger.setLevel(level=logging.DEBUG if args.debug else logging.INFO)

    app = TrackerProduction('kernel-sru-workflow')
    if len(args.trackers) == 0:
        app.instantiate_all()
    else:
        for tracker in args.trackers:
            app.instantiate_one(tracker)
