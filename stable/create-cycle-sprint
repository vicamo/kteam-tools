#!/usr/bin/env python3
"""
Create JIRA sprint for SRU and security cycles.
"""
import yaml
import argparse
import os
import re

from datetime      import datetime, timedelta
from ktl.sruboard  import SRUBoard, SRUBoardError
from ktl.utils     import run_command


class Cycle:
    def __init__(self, name):
        '''
        Create a new cycle object.

        :param name: string containing the cycle name (format: [s]YYYY.MM.DD)
        '''
        self._type = 'SRU'
        self._name = name
        if not name[0].isdigit():
            if name[0] == 's':
                self._type = 'security'
            else:
                raise SRUBoardError('Unknown cycle prefix ({})'.format(name[0]))
            name = name[1:]

        # sanity check the cycle date (must be on the right format and be a monday)
        date_re = re.compile("^\d\d\d\d\.\d\d\.\d\d$")
        match = date_re.match(name)
        if match is None:
            raise SRUBoardError('Unexpected date format ({})'.format(name))

        date = datetime.strptime(name, '%Y.%m.%d')
        if date.isoweekday() != 1:
            raise SRUBoardError('Date provided is not a Monday')

        if self._type == "SRU":
            self._startdate = date
            self._enddate = date + timedelta(days=28)
        else:
            self._startdate = date + timedelta(days=28)
            self._enddate = self._startdate + timedelta(days=14)

    @property
    def name(self):
        return self._name

    @property
    def security(self):
        return self._type == "security"

    @property
    def start_date(self):
        return self._startdate

    @property
    def release_date(self):
        return self._enddate


class SRUCreator:
    def __init__(self, cycle):
        """
        :param cycle: an object of type cycle containing the data
        """
        self.cycle = cycle
        if cycle.security:
            cfgfile = 'sprint-issues-security.yaml'
        else:
            cfgfile = 'sprint-issues-sru.yaml'
        self.config_file = '{}/{}'.format(os.path.dirname(__file__), cfgfile)
        self.config = {}
        self.config_load()

    def config_load(self):
        """
        Load the config file which describes the issues to add (title,
        description, and initial status.
        """
        with open(self.config_file, 'r') as cfd:
            self.config = yaml.safe_load(cfd)

    def create(self, dryrun=False):
        """
        Create the new sprint in the backlog area and populate it with issues
        defined in the config file.

        :param dryrun: boolean causing a dry run if set to true (default false)
        :return: None
        """
        # create the board with the lists on the organization
        daterange = (self.cycle.start_date, self.cycle.release_date)
        board = SRUBoard(self.cycle.name, create_range=daterange, dryrun=dryrun)

        # add the cards to the board, under the default list
        for card in self.config['cards']:
            name = card['name']
            desc = None
            if 'description' in card:
                # Fields in the yaml file get encoded with escapes when it's loaded.
                # Un-escape the card description so they have the desired formatting.
                desc = card['description'].encode().decode('unicode_escape')

            state = card.get('list', self.config['board']['default_list'])
            if state not in self.config['board']['lists']:
                raise SRUBoardError("Undefined target state for '{}'({})".format(name, state))
            board.add_issue(name, desc, state)

        if dryrun:
            print("This was a dry-run - sprint {} was NOT created".format(board.sprint))
        else:
            print("Sprint '{}' created".format(board.sprint))


def update_cycle_info(cycle, dryrun=False):
    """
    Add a new entry on the sru-cycle info file for the given cycle.

    :param cycle: an object of type cycle
    :param dryrun: boolean to do a dry run of true
    """
    file_name = '{}/../info/sru-cycle.yaml'.format(os.path.dirname(__file__))

    new_entry = "\'{}\':".format(cycle.name)
    if cycle.security:
        new_entry += "\n    start-date: \'{}\'".format(cycle.start_date.strftime('%Y-%m-%d'))
    new_entry += "\n    release-date: \'{}\'".format(cycle.release_date.strftime('%Y-%m-%d'))
    if cycle.security:
        new_entry += "\n    stream: 2"
    else:
        new_entry += "\n    stream: 1"

    with open(file_name, "r") as f:
        new_file = ""
        entry_added = False
        for line in f:
            if not entry_added and line[0] != "#":
                # this should be the first non commented line of the file
                new_file += "\n{0}\n".format(new_entry)
                entry_added = True
            elif line.partition('\n')[0] == new_entry.partition('\n')[0]:
                raise SRUBoardError('SRU cycle entry already present on the info file')
            new_file += line
    if not entry_added:
        raise SRUBoardError('Could not find a place on the file for the new entry')

    print("Adding following entry to {}".format(file_name))
    print("-----")
    print(new_entry)
    print("-----")
    if not dryrun:
        with open(file_name, "w") as f:
            f.write(new_file)

    # commit the file change
    if cycle.security:
        commit_subject = "security-cycle: Add {} cycle info".format(cycle.name)
    else:
        commit_subject = "sru-cycle: Add {} cycle info".format(cycle.name)
    if not dryrun:
        cmd = "git commit -sm '{0}' {1}".format(commit_subject, file_name)
        run_command(cmd)
    print("Added commit '{0}' to {1}".format(commit_subject, file_name))


if __name__ == '__main__':
    retval = 0
    description = 'Create a JIRA sprint with issues for SRU/security cycles'
    epilog = '''
The script creates a new JIRA sprint for either a SRU cycle (4w) or a security
cycle (2w) adding initial issues (manual tasks) defined in config files for
each cycle type.
This also updates the sru-cycle info file with relevant data for the sprint.

Examples:
    Run with the default options:
    $ {0} 2018.09.10

    Do not create anything, just print what would be done:
    $ {0} --dry-run 2018.09.10

    Create a security cycle sprint instead of a SRU cycle one:
    $ {0} --security 2018.09.10

    Do not add the new cycle entry to the cycle info file
    $ {0} --no-cycle-info 2018.09.10
'''.format(os.path.basename(__file__))
    parser = argparse.ArgumentParser(description=description, epilog=epilog,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('cycle', metavar='<cycle date>', action='store',
                        help='cycle date (expected format: YYYY.MM.DD)')
    parser.add_argument('--no-cycle-info', required=False, action='store_true', default=False,
                        help='do not add an entry to the cycle info yaml file')
    parser.add_argument('--dry-run', required=False, action='store_true', default=False,
                        help='only print steps, no action done')
    args = parser.parse_args()

    try:
        cycle = Cycle(args.cycle)
        if not args.no_cycle_info:
            update_cycle_info(cycle, dryrun=args.dry_run)
        SRUCreator(cycle).create(dryrun=args.dry_run)
    except SRUBoardError as e:
        retval = 1
        print('Error: {}'.format(e))

    exit(retval)
