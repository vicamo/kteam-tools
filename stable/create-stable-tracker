#!/usr/bin/env python3
#

import sys
import os
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), '..', 'py3')))

from sys                                import argv
from getopt                             import getopt, GetoptError
from ktl.utils                          import stdo, eout, run_command
from datetime                           import datetime
from ktl.std_app                        import StdApp
from ktl.debian                         import Debian
from lpltk.LaunchpadService             import LaunchpadService, LaunchpadServiceError

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': print(e)
        self.usage(defaults)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [options]                                                                         \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --staging        Use the staging LP server to create the bug. This is just for       \n")
        stdo("                         testing and will go away when the database is reset.                \n")
        stdo("                                                                                             \n")
        stdo("        --version        Version number of the upstream stable release,                      \n")
        stdo("                         or 'patchset' for an arbitrary set of patches.                      \n")
        stdo("                                                                                             \n")
        stdo("        --package        Package to use for the bug instead of getting the package from      \n")
        stdo("                         the changelog.                                                      \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --staging --version v4.15.8                                                       \n" % self.cfg['app_name'])
        stdo("        %s --staging --version patchset                                                      \n" % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'staging', 'version=', 'package=']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--staging'):
                    self.cfg['staging'] = True

                elif (opt == '--version'):
                    self.cfg['version'] = val

                elif (opt == '--package'):
                    self.cfg['package'] = val

        except GetoptError as error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        if 'version' not in self.cfg:
            raise CmdlineError('The version command line parameter is required.')
        return


# AppError
#
# A general exception that can be raised when an error is encountered in the app.
#
class AppError(Exception):
    # __init__
    #
    def __init__(self, error=''):
        self.msg = error

# CreateTrackingBug
#
class CreateTrackingBug(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}

    # initialize
    #
    def initialize(self):
        if 'staging' in self.cfg:
            self.defaults['launchpad_services_root'] = 'qastaging'
        try:
            self.lp = LaunchpadService(self.defaults)
        except LaunchpadServiceError as e:
            print(e.msg)
            raise

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)
            self.initialize()

            #-------------------------------------------------------------------------------------
            # B U G   W O R K
            version = self.cfg['version']
            if version == 'patchset':
                datestr = datetime.now().strftime("%Y-%m-%d")
                update_desc = "upstream stable patchset %s" % datestr
            else:
                update_desc = "%s upstream stable release" % version
            changelog = Debian.changelog(local=True)
            series_name = changelog[0]['release']
            if series_name == 'UNRELEASED':
                series_name = changelog[1]['release']

            try:
                pversion_ = version.lstrip("v").split(".")
                pversion_[-1] = str(int(pversion_[-1]) - 1)
                pversion = ".".join(pversion_)
                (status, output) = run_command("git log --format='%%s' %s..%s" % ("v" + pversion, "v" + version.lstrip("v")))
                if status:
                    log = ""
                else:
                    log = "\n".join(output)
            except:
                log = ""

            # Title:
            title = "%s update: %s" % (series_name.title(), update_desc)

            print(title)

            # Repository - see if it's a tree we maintain
            if "-ckt" in version:
                repository = "git://git.launchpad.net/~canonical-kernel/linux/+git/linux-stable-ckt"
            else:
                repository = "git://git.kernel.org/"

            # Description
            description = """
    SRU Justification

    Impact:
       The upstream process for stable tree updates is quite similar
       in scope to the Ubuntu SRU process, e.g., each patch has to
       demonstrably fix a bug, and each patch is vetted by upstream
       by originating either directly from a mainline/stable Linux tree or
       a minimally backported form of that patch. The following upstream
       stable patches should be included in the Ubuntu kernel:

       %s
       from %s

            """ % (update_desc, repository)

            if 'package' in self.cfg:
                package = self.cfg['package']
            else:
                package = changelog[0]['package']
            description = description + "\n" + log
            bug = self.lp.create_bug(project='ubuntu', package=package, title=title, description=description)

            # Set the status to 'Confirmed'
            for task in bug.tasks:
                task.status = 'Confirmed'

            # Tags:
            #    kernel-stable-tracking-bug
            #
            bug.tags.append('kernel-stable-tracking-bug')

            # Teams / individuals to be automatically subscribed to the tracking bugs
            #   Hardware Certification Team     "hardware-certification"
            #   Ubuntu Stable Release           "ubuntu-sru"
            #
            teams = ["ubuntu-sru"]
            for team in teams:
                lp_team = self.lp.launchpad.people[team]
                bug.lpbug.subscribe(person=lp_team)

            # For the given version, figure out the series and nominate that series.
            #
            lp = self.lp.launchpad
            ubuntu = lp.distributions["ubuntu"]
            sc = ubuntu.series_collection
            for s in sc:
                if s.name == series_name:
                    try:
                        nomination = bug.lpbug.addNomination(target=s)
                        if nomination.canApprove():
                            nomination.approve()
                    except:
                        print("WARNING: Bug created, but series nomination failed!")

            if 'staging' in self.cfg:
                print("https://bugs.%s.launchpad.net/bugs/%s" % (self.defaults['launchpad_services_root'], bug.id))
            else:
                print("https://bugs.launchpad.net/bugs/%s" % (bug.id))

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle ommand line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        except AppError as e:
            eout(e.msg)

        return

if __name__ == '__main__':
    app = CreateTrackingBug()
    app.main()

# vi:set ts=4 sw=4 expandtab:

