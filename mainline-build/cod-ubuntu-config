#!/bin/bash
P='cod-ubuntu-config'

if [ "$#" -ne 4 ]; then
	echo "Usage: $0 <series> <package> <version> <tag>" 1>&2
	exit 1
fi

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

. "$here/lib-build"
. "$here/lib-chroot"

series="$1"
package="$2"
#version="$3"  # XXX: we no longer need this because we look it up below.
tag="$4"

case "$package" in
*-uc20-*)
	echo "NO CONFIG IN $series:$package"
	exit 0 ;;
esac

start_time=$(date +%s)

master_tree_select

# Ensure we have the commit identified.
repo_remote_update_list "$series--$package"

# Clean out the rubbish.
rm -rf CONFIGS

# Pick a sensible release to build the configs in.
series_to_build_release "$series"
build_release="$RET"

# Make sure git is ready for anything...
rm -rf .git/rebase-apply
git reset --hard HEAD
git clean -x -f -d

# Make a branch at the specified commit.
git checkout HEAD^ --
git branch -D "config-$tag" || true
git checkout -b "config-$tag" "$tag" || exit 1

# Generate the configs at this checkout.
do_chroot "$build_release-amd64" \
	fakeroot debian/rules clean genconfigs

# Pick out the actual changelog version from debian/changelog.
version=$(dpkg-parsechangelog -Sversion)

# Pick out the mainline base kernel version from the Makefile.
mainline_ver=$(<Makefile awk '
	($1 == "VERSION") {v=$3;}
	($1 == "PATCHLEVEL") {p=$3;}
	($1 == "SUBLEVEL") {s=$3;}
	($1 == "NAME") {print(v "." p "." s); last}
')

end_time=$(date +%s)

# Output.
html="$HOME/public_html/config/$series/$package/$version"
mkdir -p "$html"

cat - >"$html/summary.yaml" <<EOL
build-host: $(uname -n)
start-time: $start_time
end-time: $end_time
ubuntu-tag: $tag
ubuntu-version: $version
mainline-version: $mainline_ver
EOL
cp -p CONFIGS/* "$html"
