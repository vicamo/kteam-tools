#!/bin/bash

# Fix kernel annotations for an upstream kernel using Ubuntu configs as
# a baseline. Use the default values for new options but try to set new
# tristate options to 'm'.
function fix_annotations()
{
	local chroot_name=${1} configs=${2}
	local try

	try=0
	while [ ${try} -lt 20 ] ; do
		try=$((try + 1))
		echo "fix-annotations: iteration ${try} ..."

		do_chroot "${chroot_name}" \
			fakeroot debian/rules clean defaultconfigs
		git diff --exit-code debian.master/config && break

		# Create the overrides, i.e., try to enable new tristates
		git diff HEAD | grep "^+CONFIG_.*'n'" | \
			sed -e "s/^+//" -e "s/'n'/'m'/g" > __overrides__
		echo "v-- OVERRIDES"
		cat __overrides__
		echo "^-- OVERRIDES"

		# Commit the differences
		if [ ${try} -eq 1 ]; then
			git commit -a -m "configs (based on $configs)"
		else
			git commit --no-edit -a --amend
		fi

		# Append the overrides for the next iteration
		cat debian.master/config/annotations __overrides__ > __annotations__
		mv __annotations__ debian.master/config/annotations
	done
	rm -f __overrides__
}

# Fix kernel configs for an upstream kernel using Ubuntu configs as
# a baseline. Use the default values for new options but try to set new
# tristate options to 'm'.
function fix_configs()
{
	local chroot_name=${1} configs=${2} overrides=${3}
	local try

	# Take the defaults for the configuration, applying any local
	# overrides for the series and also applying a default =m
	# for tristate options regardless of the kernel default.
	{
		[ -f "${overrides}" ] && cat "${overrides}"
	} >debian.master/config/OVERRIDES

	try=0
	while [ $try -lt 20 ] ; do
		try=$((try + 1))
		echo "fix-configs: iteration ${try} ..."

		# Take the defaults, if nothing changes we are done.
		do_chroot "${chroot_name}" \
			fakeroot debian/rules clean defaultconfigs
		git diff --exit-code debian.master/config && break

		# Attempt to enable any tri-state options.
		{
			git diff HEAD | grep '^+# .* is not set' | awk '{print $2 "=m"}'
			[ -f "${overrides}" ] && cat "${overrides}"
		} >debian.master/config/OVERRIDES
		echo "v-- OVERRIDES"
		cat debian.master/config/OVERRIDES
		echo "^-- OVERRIDES"

		# Commit the differences.
		if [ ${try} -eq 1 ]; then
			git commit -a -m "configs (based on ${configs})"
		else
			git commit --no-edit -a --amend
		fi
	done
	rm -f debian.master/config/OVERRIDES
}

P='cod-mainline-core'

# Options.
TEMP=$(getopt \
	-n "$P" \
	-o 'p:' -l "priority:" \
	-- "$@"
)
[ "$?" != 0 ] && exit 1
eval set -- "$TEMP"
priority=
while :
do
	case "$1" in
	-p|--priority)	priority="$2"; shift 2 ;;
	--)		shift 1; break ;;
	*)		break ;;
	esac
done

if [ "$#" -ne 3 ]; then
	echo "Usage: $0 <remote> <commit-ish> <publish>" 1>&2
	exit 1
fi

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

. "$here/lib-build"
. "$here/lib-chroot"

remote="$1"
commit="$2"
publish="$3"

id="$commit"

master_tree_select

result="../RESULT"
rm -rf "$result"
mkdir -p "$result"

# Log all the output from this script
exec > >(tee -a "$result/log") 2>&1

echo "$P $remote $commit $publish" >"$result/REBUILD"

host=$( hostname )
start_time=$( date +%s )

# Ensure we have the commit identified.
repo_remote_update_list $remote

# Make sure git is ready for anything...
rm -rf .git/rebase-apply
git reset --hard HEAD
git clean -x -f -d

# Make a branch at the specified commit.
git checkout HEAD^ --
git branch -D "tip-$id" || true
git checkout -b "tip-$id" "$commit" || {
	echo "Unable to checkout requested commit; aborting" 1>&2
	exit 1
}

# Find the commit time.
#sha=$( git log -1 --pretty=format:%H "$commit" )
cts=$( git log -1 --pretty=format:%ct "$commit" )
title=$( git log -1 --pretty=format:%s "$commit" | sed -e "s/'/''/g" )

# Find the mainline tip official version and use that to find a reasonable
# series to get a configuration from.
full_version=$( awk '
	/^VERSION/	{ version=$3 }
	/^PATCHLEVEL/	{ patchlevel=$3 }
	/^SUBLEVEL/	{ sublevel=$3 }
	/^EXTRAVERSION/	{ extraversion=$3 }
	END		{ print version "." patchlevel "." sublevel extraversion }
' <Makefile )
map_version_to_series "$full_version"
series="$RET"

# Find a live series to build it in.
map_series_to_build_series "$series"
build_release="$RET"

# Set the chroot to use.
build_arch=$(dpkg --print-architecture)
chroot_name=${build_release}-${build_arch}

echo "II: repo-series=$series build-series=$build_release build-arch=$build_arch"

# Ensure we have the latest and greatest code in the master release.
repo_remote_update "$series"

# use the date as an upload number so we can tell different builds apart.
upload=".`date +%Y%m%d%H%M`"

# Produce CHANGES fragment.
log_from=`git describe "$commit^"`
if [ "$?" -eq 0 ]; then
	log_from="${log_from%-*}"
	log_from="${log_from%-*}"

	git shortlog "$log_from..$commit" >"$result/CHANGES"
fi

# The short version is used in branch names in unstable.
short_version=$(echo "${full_version#v}" | cut -d. -f1-2)
branches="master-$short_version master-next master"

# Convert possible branch names into concrete existant git refs
# ordering them by the most recently committed to so we we avoid those
# which are languishing.
git_refs=$(git for-each-ref --sort=-committerdate $(echo $branches | sed -e 's@\(^\| \)@\1refs/remotes/'"$series"'/@g') | awk '{print $NF;}')

# The base version is always the first X.Y.Z part of the version number.  If we
# do not maintain this then the modules directory will not match uname -r.
version=`echo "${full_version#v}" | cut -d. -f1-3 | cut -d- -f1`
if [ "$(echo $version|cut -d. -f3)" = "" ]; then
       version="${version}.0"
fi

# Encode the real version number as the ABI.  We encode the version
# number by expanding the numbers to be at least 2 digits and removing the
# '.' and '-' characters, for example:
#
#  2.6.27.12	02062712
#  2.6.29-rc3   020629rc3
#
abinum=`echo "$full_version" | awk -F'[.-]' '{
	for (i = 1; i <= NF; i++) {
		if ($i ~ /^[0-9][0-9]*$/) {
			printf("%02d", $i);
		} else {
			printf("%s", $i);
		}
	}
}'`

# If we are doing a cod/tip/* we need to add that to abinum here.
case "$commit" in
cod/tip/*) abinum="$abinum$(echo "$commit" | sed -e 's@cod/tip/@@' -e 's@[./-]@@g')"
esac

# Report the head for posterity.
echo "vvv - build head"
git log -1 HEAD
echo "^^^ - build head"

#
# Pull in the packaging from the head of our tree.
#
echo "II: searching for packaging on $git_refs"
for git_ref in $git_refs
do
	git checkout "$git_ref" -- debian && break
done
git checkout "$git_ref" -- 'debian.master*'
echo "II: found packaging on $git_ref"

# Mark this as a mainline-build.
cat - <<EOM >>debian.master/rules.d/hooks.mk
# Mainline Build.
do_mainline_build=true
EOM
git add debian.master/rules.d/hooks.mk

# Disable the ABI, module, and aliases checks.
for i in debian/scripts/*-check debian/scripts/checks/*-check debian.master/reconstruct
do
	if [ -f "$i" ]; then
		cat - <<EOM >"$i"
#!/bin/sh
exit 0
EOM
		chmod 755 "$i"
	fi
done

# Ensure we do not have any unexpected version tags.
rm -f localversion-*

# Commit the packaging.
git commit -a -m "base packaging"

# Arbitrary patch trigger support.
adhoc="$here/adhoc"
for trigger in "$adhoc"/*.trigger
do
	[ -x "$trigger" ] && "$trigger" "$series" "$build_release"
done

# Identify the last Ubuntu version which used the same main version
# to use for the configs.
find=`echo "$full_version" | cut -d. -f1-2 | cut -d- -f1`.9999999

found="0"
config_ref=""
for git_ref in $git_refs
do
	echo "II: searching for configs on $git_ref"
	let off=-1
	while :
	do
		let "off=$off+1"
		fversion=`git cat-file -p "$git_ref:debian.master/changelog" | \
			    dpkg-parsechangelog -l- --count 1 --offset "$off" | awk '
			BEGIN				{ v="END"; }
			/^Version:/			{ v=$2; last }
			END				{ print v }
		'`
		[ "$fversion" = 'END' ] && break
		echo "II:  $fversion <=> $find"
		dpkg --compare-versions "$fversion" lt "$find" && break
	done

	[ "$fversion" = 'END' ] && continue
	dpkg --compare-versions "$fversion" lt "$found" && break
	found="$fversion"
	config_ref="$git_ref"
done
configset="Ubuntu-$short_version-$found Ubuntu-$found Ubuntu-unstable-$found $config_ref"
echo "II:  chose $config_ref $found ($configset)"

#
# Rebuild the changelog.
#
changelog=debian.master/changelog
rm -f "$changelog"

{
	cat - <<EOL
linux (${version}-$abinum$upload) $build_release; urgency=low

  Mainline build at commit: $commit

 -- Mainline Build <$(id -n -u)@$(hostname)>  $(date -R)

EOL
} >"$changelog.new"
mv -f "$changelog.new" "$changelog"
git commit -a -m "debian changelog"

#
# Pull the specified version of the configs and default any new
# configuration options.
#
echo "II: locating configs from $configset"
for configs in $configset
do
	git checkout "$configs" -- debian.master/config && break
done
echo "II: using configs from $config_ref $configs"

if [ -e debian.master/config/config.common.ubuntu ] ; then
	if ! [ -e debian.master/etc/kernelconfig ] ; then
		# We pull packaging scripts and kernel configs from different points
		# in time. For this build, the configs are still old-style so the
		# old config scripts are used which need etc/kernelconfig.
		# Reconstruct it.
		archs=
		for arch in debian.master/abi/* ; do
			if [ -d "$arch" ] ; then
				archs="${archs} ${arch##*/}"
			fi
		done
		echo "archs=\"${archs# }\"" > debian.master/etc/kernelconfig
		git add debian.master/etc/kernelconfig
	fi

	overrides=${here}/configs.${series}
	fix_configs "${chroot_name}" "${configs}" "${overrides}"
else
	fix_annotations "${chroot_name}" "${configs}"
fi

# The sha we are building in the tip builds will be this bundle tip.
sha=$( git log -1 --pretty=format:%H "HEAD" )
bundle_tag="cod/mainline/$commit"

# Drop a git bundle for this commit.
git tag -f "$bundle_tag"
git bundle create "$result/crack.bundle" "$commit..refs/tags/$bundle_tag"

#
# Record the patches.
#
#git format-patch -o ".." "$commit..HEAD"

# Clean the tree so we can tell what architectures need building.
git clean -x -f -d
do_chroot "${chroot_name}" \
	fakeroot debian/rules clean
archs=$(
	grep Architecture debian/control |
	awk '{ for (c=2; c <= NF; c++) { print $c } }' |
	sed -e 's/all/amd64/' |
	sort -u
)

build_archs=""
for arch in $archs
do
	case "$arch" in
	all|x32)	continue ;;
	*)		;;
	esac

	build_archs="$build_archs $arch"
done

build_archs_list=$(echo "$build_archs" | sed -e 's/^ */[/' -e 's/ *$/]/' -e 's/  */, /g')

end_time=$( date +%s )
cat - <<EOL >"$result/summary.yaml"
build-host: $host
testsets: $build_archs_list
series: $build_release
commit: $bundle_tag
commit-label: $commit
commit-title: '$title'
commit-time: $cts
commit-hash: $sha
start-time: $start_time
end-time: $end_time
EOL

# Drop a set of messages to enqueue.
for arch in $build_archs
do
	echo "${priority:+--priority $priority }cod-tip-build.$arch $build_release $remote $bundle_tag $arch $publish"
done >"$result/REBUILD.submit"

# Finally mark this as a partial result.
echo "core" >"$result/@publish@"

# Output.
publish="$HOME/public_html/$publish"
mkdir -p "$publish"
mv "$result"/* "$publish"
