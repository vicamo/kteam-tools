#!/usr/bin/env python3
#

import sys
import os
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, WARNING, info, warning, DEBUG
from ktl.log                            import cdebug, center, cleave
from ktl.msgq                           import MsgQueueService
from ktl.announce                       import Announce
import json

#from lib.grinder                        import JenkinsTestResultsTree, JenkinsTestResultsTreeError
#from lib.utils                          import string_to_date
#from lib.jenkins                        import Jenkins

# Exit
#
class Exit(Exception):
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    pass

# TheApp
#
class TheApp():
    '''
    This class is just the engine that makes everything go.
    '''

    # __init__
    #
    def __init__(s, args):
        '''
        '''
        s.args = args


    # main
    #
    def main(s):
        '''
        '''
        center('TheApp::main')
        retval = 1

        try:
            details = {}
            key = ''
            if s.args.to is not None:
                key += 'direct.{}.'.format(s.args.to)
            key += 'todo.' + s.args.command[0]

            details['key'] = key
            details['cmd'] = s.args.command

            # If the user supplied a priority use that.  Otherwise base the
            # priority on whether this is a *-core build or not.  We desire to
            # complete all core builds before the tip builds they produce,
            # while still allowing priorities within each.  With each band have
            # low, medium, and high priorities and prevent them overlapping.
            priority = s.args.priority
            if priority in (None, 'high', 'medium', 'low'):
                if s.args.command[0].endswith('-core') or s.args.command[0] == 'cod-queue-publish':
                    priority = 5
                else:
                    priority = 2
                if s.args.priority == 'high':
                    priority += 1
                elif s.args.priority == 'low':
                    priority -= 1

            # Submit the message to the Message Queue
            #
            mq = MsgQueueService(service='mainline', local=s.args.local, exchange='mainline-todo')

            mq.publish(details['key'], details, priority=int(priority))

            # Announce this for the logs.
            announce = Announce()
            job_tag = ' '.join(details['cmd'])
            announce.send('cod-job-enqueued', 'cod-job-enqueued queuing {} (priority={} key={})'.format(job_tag, priority, details['key']))


            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            warning("Aborting ...")

        except Exit:
            print("")
            print("Due to the above error(s), this script is unable to continue and is terminating.")
            print("")

        cleave('TheApp::main')
        return retval

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I'm a application skeleton, your job is to make me into something useful.
    '''
    app_epilog = '''
examples:
    jc --help
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--priority', action='store', help='Queue priority for this message.')
    parser.add_argument('--to', action='store', help='Target of this message (defaults to command)')
    parser.add_argument('--local', action='store_true', default=False, help='Assume we have sshuttle setup to the MQ server.')
    parser.add_argument('command', nargs='+')

    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.debug:
        basicConfig(level=DEBUG, format=log_format)
    else:
        basicConfig(level=WARNING, format=log_format)

    try:
        app = TheApp(args)
        exit(app.main())
    except Exit:
        pass

# vi:set ts=4 sw=4 expandtab:

