#!/bin/bash
#
# cod-incoming-publish -- pull publishable images out of incoming and 
# install them, upload them, and/or announce them as required.
#
P="cod-incoming-publish"

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

incoming="$HOME/mainline-builds/incoming"
lock_tmp="$incoming/.LOCK-$$"
lock="$incoming/.LOCK"

out="$HOME/mainline-builds/xfer"

mkdir -p "$incoming"

# Locking: we wish to allow multiple results to be pushed in parallel.  But
# once the publisher starts we want it to preempt any further uploaders
# starting to push.  We use two lockfiles.  Exclusive lockers (publisher) take
# an exclusive lock on A and then an exclusive lock on B.  Shared lockers
# (uploaders) take an exclusive lock on A, then a shared lock on lock on B, and
# then drop their lock on A.
echo "LL: $$ aquiring exclusive lock"
exec 8>>"$lock-A" 9>>"$lock-B"
flock --verbose --exclusive 8 || exit 1
flock --verbose --exclusive 9 || exit 1
echo "LL: $$ aquired exclusive lock"

if [ -d "$incoming/upload" ]; then
	echo "$P: Scanning upload ..."
	# Look for any uploads for various PPAs.
	for ppa in 'test-devel' 'pre-proposed'
	do
		(
			[ ! -d "$incoming/upload/$ppa" ] && exit 0
			cd "$incoming/upload/$ppa" || exit 1
			mkdir -p failed

			for package in *_source.changes
			do
				package=${package%_source.changes}
				if [ "$package" = "*" ]; then
					continue
				fi

				echo "$P: $package: uploading ..."

				# Sign the package we are meant to be uploading.
				echo "n" | debsign -kkernel-ppa "${package}_source.changes"

				# And upload it.
				dput "$ppa" ${package}_source.changes && \
					rm -f "${package}"* || mv "${package}"* failed
			done
		)
	done
	find "$incoming/upload" -empty -type d -delete
fi

if [ -d "$incoming/native" ]; then
	echo "$P: Scanning native ..."
	# Look for any source packages for the native PPA builders.
	(
		cd "$incoming/native/source" || exit 1

		for package in *_source.changes
		do
			package=${package%_source.changes}
			if [ "$package" = "*" ]; then
				continue
			fi

			echo "$P: $package: mainline-native job queueing ..."

			# Sign the package we are meant to be uploading.
			echo "n" | debsign -kkernel-ppa "${package}_source.changes"

			# Move it to the queue directory so we only queue it once.
			mkdir -p "$incoming/native/queue"
			mv -f "${package}"* "$incoming/native/queue"

			# Queue it up.
			"$here/cod-enqueue" --to mainline-native "cod-mainline-native-build" "${package}"
		done
	)
	# Look for any completed native builds.
	(
		outgoing="$outgoing/native"

		[ ! -d "$incoming/native/publish" ] && exit 0
		mkdir -p "$outgoing"
		cd "$incoming/native/publish" || exit 1
		for prefix in *
		do
			if [ "$prefix" = "*" ]; then
				continue
			fi
			# Identify the build.
			{
				read commit
				read sha1
			} <"$prefix/COMMIT"
			build="$commit"

			echo "$P: $build: native build publishing ..."

			mkdir -p "$outgoing"
			if [ -d "$outgoing/$build" ]; then
				echo "$P: $build: result already published, removing previous ..."
				rm -rf "$outgoing/$build"
			fi
			mv "$prefix" "$outgoing/$build" && \
			{
				# Sign the publication.
				rm -f "$outgoing/$build/CHECKSUMS.gpg"
				gpg -a -b --sign --output "$outgoing/$build/CHECKSUMS.gpg" "$outgoing/$build/CHECKSUMS"
			}
		done
	)
	find "$incoming/native" -empty -type d -delete
fi

# Copy in incoming configuration dumps.
mkdir -p "$out/config"
if [ -d "$incoming/config" ]; then
	echo "$P: Scanning config ..."
	rsync -v -a --remove-source-files "$incoming/config/" "$out/config/"
	find "$incoming/config" -empty -type d -delete
fi

publish_tip()
{
	local which="$1"

	echo "$P: Scanning $which (tip) ..."
	(cd "$incoming/$which" && find . -name @publish@) | \
	while read result
	do
		build=`dirname "$result"`
		build=${build#./}

		# Finalise the result, adds checksums and signatures for example.
		echo "$P: $which/$build: finalising ..."
		"$here/cod-result-finalise" "$incoming/$which/$build"

		echo "$P: $which/$build: publishing ..."
		core=
		if [ -f "$incoming/$which/$build/REBUILD.submit" ]; then
			core='build'
			if [ -d "$out/$which/$build" ]; then
				echo "$P: $build: result already published, removing previous ..."
				rm -rf "$out/$which/$build"
				core='rebuild'
			fi
		fi
		mkdir -p "$out/$which/$build"
		rm -f "$incoming/$which/$build/@publish@"
		mv "$incoming/$which/$build"/* "$out/$which/$build"
		if [ "$core" != '' ]; then
			# Record that this is an unannounced core build.
			echo "$core" >"$out/$which/$build/.flag.announce"
		fi
		if [ -f "$out/$which/$build/crack.bundle" ]; then
			(
				# Bundle found.
				echo "$P: $which/$build: publishing crack.bundle ..."
				cd /srv/kernel.ubuntu.com/git/virgin/testing/crack.git || exit 1
				git bundle list-heads "$out/$which/$build/crack.bundle" | \
				while read sha ref
				do
					git tag -d "$ref"
					git fetch "$out/$which/$build/crack.bundle" "$ref:$ref"
				done
			)
		fi
		if [ -f "$out/$which/$build/REBUILD.submit" ]; then
			# Now we have installed the core result, submit our builds.
			while read command
			do
				echo "$here/cod-enqueue" $command
				"$here/cod-enqueue" $command
			done <"$out/$which/$build/REBUILD.submit"
		fi
		# Find the containing result and resummarise it.
		echo "$P: $which/$build: summarising ..."
		for relative in . .. ../..
		do
			if [ -f "$out/$which/$build/$relative/REBUILD.submit" ]; then
				"$here/cod-result-summarise" "$out/$which/$build/$relative"
				break
			fi
		done
	done
	find "$incoming/$which" -empty -type d -delete
}

rebuild_indexes()
{
	local which="$1"
	local pattern="$2"

	# Rebuild the indexes.
	(
		cd "$out/$which" || exit 1

		for sp in $pattern
		do
			[ ! -d "$sp" ] && continue

			echo "$P: $which/$sp: rebuild index ..."
			"$here/cod-result-index" "$sp" "$sp"
			mv -f "$sp/index.html.new" "$sp/index.html"
			mv -f "$sp/latest.json.new" "$sp/latest.json"
			mv -f "$sp/order.new" "$sp/order"
		done
	)
	# Rebuild the dashboard.
	echo "$P: $which: rebuild dashboard ..."
	"$here/cod-result-dashboard" "$out/$which"
	mv -f "$out/$which/index.html.new" "$out/$which/index.html"
}

if [ -d "$incoming/mainline" ]; then
	publish_tip "mainline"

	# Re-evaluate any 'current' links.
	(
		cd "$out/mainline" || exit 1

		echo "$P: mainline: rebuilding current links ..."

		find . -name current | \
		while read current
		do
			dir=`dirname "$current"`
			latest=`ls -1 "$dir" | grep -v '^current$' | tail -1`

			is=`readlink "$current"`
			if [ "$is" != "$latest" ]; then
				echo "$P: $dir: updating current to $latest"
				rm -f "$current"
				ln -s "$latest" "$current"
			fi
		done
	)
fi

if [ -d "$incoming/ubuntu-stable" ]; then
	publish_tip "ubuntu-stable"

	rebuild_indexes 'ubuntu-stable' '*'

	rmdir "$incoming/ubuntu-stable"
fi

if [ -d "$incoming/test-build" ]; then
	publish_tip "test-build"

	rebuild_indexes 'test-build' '*/*'

	rmdir "$incoming/test-build"
fi

if [ -d "$incoming/static-analysis" ]; then
	echo "$P: Scanning static-analysis ..."
	rsync -v -a --remove-source-files "$incoming/static-analysis/" "$out/static-analysis/"
	find "$incoming/static-analysis" -empty -type d -delete
fi

if [ -d "$incoming/centos" ]; then
	echo "$P: scanning centos builds ..."
	(
		cd "$incoming/centos" || exit 1
		centos="$HOME/centos/publish--internal"
		for build in *
		do
			[ ! -d "$build" ] && continue
			echo "$P: publishing $build ..."
			if [ -d "$centos/$build" ]; then
				echo "$P: purging $build ..."
				rm -rf "$centos/$build"
			fi
			mv "$build" "$centos"
		done
	)
	find "$incoming/centos" -empty -type d -delete
fi

echo "LL: $$ releasing exclusive lock"
flock --unlock 9 || exit 1
flock --unlock 8 || exit 1
echo "$P: publishing run complete"
