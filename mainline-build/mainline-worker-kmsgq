#!/usr/bin/env python3
#

import os
import sys
import traceback
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, WARNING, error
import socket
import threading
from ktl.log                            import cdebug, center, cleave, cerror
from ktl.msgq                           import MsgQueueService, MsgQueueCredentials
import time
from subprocess                         import Popen
from ktl.announce                       import Announce

from secrets import Secrets


# TheApp
#
class TheApp():
    '''
    This class is just the engine that makes everything go.
    '''

    # __init__
    #
    def __init__(s, args):
        '''
        '''
        s.args = args

        s.queue = s.args.queue
        s.direct = s.args.queue + '--' + s.args.name
        #s.admin = 'admin-' + s.args.name

    # _announce
    #
    def _announce(s, to, message):
        message = to + " " + s.args.name + " " + message

        announce = Announce()
        announce.send(to, message, message)

    # _handler
    #
    def _handler(s, channel, method, properties, payload):
        cdebug("TheApp::_handler")

        if 'key' not in payload or 'cmd' not in payload or \
           not isinstance(payload['cmd'], list) or len(payload['cmd']) < 1:
            error("invalid work request form, ignored")
            return

        if payload['cmd'][0] == 'quit':
            s.mq.listen_stop()
            return

        if payload['cmd'][0] not in s.valid or '/' in payload['cmd'][0]:
            error("invalid work request cmd, ignored")
            s.mq.listen_stop()
            return

        job_tag = ' '.join(payload['cmd'])
        s._announce('cod-job-start', 'starting {} (priority={} key={})'.format(job_tag, properties.priority, method.routing_key))

        # Qualfied commands.  Pull the qualifier(s) off.
        payload['cmd'][0] = payload['cmd'][0].split('.')[0]

        # Ensure we look in the current directory for these commands.
        payload['cmd'][0] = './' + payload['cmd'][0]
        if s.args.prefix_arg:
            payload['cmd'] = s.args.prefix_arg + payload['cmd']

        cdebug(payload)
        try:
            print("Starting", payload['cmd'], '(priority={} key={})'.format(properties.priority, method.routing_key))
            sys.stdout.flush()
            child = Popen(payload['cmd'])
            iteration = 0
            while True:
                res = child.poll()
                if res != None:
                    break

                iteration += 1
                time.sleep(1 if iteration < 60 else 10)
                s.mq.connection.process_data_events()
            print("Complete", payload['cmd'])
            sys.stdout.flush()

            s._announce('cod-job-stop', 'finished ' + job_tag)


        except OSError:
            error("work request failed")

            s._announce('cod-job-stop', 'failed ' + job_tag)

        except:
            error("work request exploded")
            #print(sys.exc_info()[0])
            print(traceback.format_exc())

            s._announce('cod-job-stop', 'exploded ' + job_tag)

        cdebug(payload)


    # main
    #
    def main(s):
        '''
        '''
        retval = 1

        valid = []
        direct = []
        grouped = {}
        for cmd in s.args.command:
            (group, command) = (['legacy'] + cmd.split(':', 1))[-2:]
            grouped.setdefault(group, []).append('todo.{}'.format(command))
            direct.append('direct.{}.todo.{}'.format(s.args.name, command))
            valid.append(command)
        for command in s.args.admin:
            direct.append('direct.{}.todo.{}'.format(s.args.name, command))
            valid.append(command)

        s.valid = valid

        try:
            s.secrets = Secrets(os.path.expanduser('~/.kernel-mainline-worker.yaml'))

            # Pass in credentials if we have them, else use the limited defaults.
            hostname = s.secrets.data.get('amqp-hostname')
            username = s.secrets.data.get('amqp-username')
            password = s.secrets.data.get('amqp-password')
            credentials = None
            if username is not None and password is not None:
                credentials = MsgQueueCredentials(username, password)

            s.mq = MsgQueueService(service='mainline', local=s.args.local, host=hostname, credentials=credentials, exchange='mainline-todo', heartbeat_interval=60)

            #s.mq.queue_delete(s.args.queue)
            #raise "FOO"

            s._announce('cod-job-control', 'start')

            q_args = {'x-max-priority': 7}
            for group, group_cmds in grouped.items():
                s.mq.listen_worker('{}.{}'.format(s.queue, group), group_cmds, handler=s._handler, queue_arguments=q_args)
            s.mq.listen_worker(s.direct, direct, handler=s._handler, queue_arguments=q_args, auto_delete=True)

            s.mq.listen_start()

            s._announce('cod-job-control', 'quit')

            print("Exiting")
            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        return retval

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I'm a application skeleton, your job is to make me into something useful.
    '''
    app_epilog = '''
examples:
    KernelMQ --help
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--local', action='store_true', default=False, help='Assume we have sshuttle setup to the MQ server.')
    parser.add_argument('--command', action='append', default=[], help='Add a valid command to the validator.')
    parser.add_argument('--admin', action='append', default=['quit'], help='Add an admin (direct only) command to the validator.')
    parser.add_argument('--prefix-arg', action='append', default=[], help='Add a valid command to the validator.')
    parser.add_argument('name', help='Name of this instance in the admin domain')
    parser.add_argument('queue', help='Name of the queue to use')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.debug:
        basicConfig(level=DEBUG, format=log_format)
    else:
        basicConfig(level=WARNING, format=log_format)

    app = TheApp(args)
    exit(app.main())


# vi:set ts=4 sw=4 expandtab:

