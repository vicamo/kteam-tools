#!/usr/bin/python2
from __future__ import print_function

import json
import os
import sys
from urllib import quote

import yaml

directory = sys.argv[1]
directory_title = sys.argv[2]

html = os.path.join(directory, "index.html.new")
latest = os.path.join(directory, "latest.json.new")
order = os.path.join(directory, "order.new")

section = None
for relative in (os.path.curdir, os.path.pardir,
        os.path.join(os.path.pardir, os.path.pardir),
        os.path.join(os.path.pardir, os.path.pardir, os.path.pardir)):
    section_path = os.path.join(directory, relative, 'section.yaml')
    if os.path.exists(section_path):
        with open(section_path) as sfd:
            section = yaml.safe_load(sfd)
            break

meta = {}
results = []
for (dirname, dirs, files) in os.walk(directory):
    if 'aggregate.yaml' in files:
        with open(os.path.join(dirname, 'aggregate.yaml')) as afd:
            entry = yaml.safe_load(afd)
            entry['directory'] = os.path.basename(dirname)

        results.append((entry['commit-time'], entry))

    elif 'SUMMARY' in files:
        with open(os.path.join(dirname, 'SUMMARY')) as summary_fd:
            entry = {
                'directory': os.path.basename(dirname),
                'build-host': '-',
            }
            overall = None
            for line in summary_fd:
                bits = line.strip().split(None, 1) + [ '' ]
                (key, value) = (bits[0][:-1].lower(), bits[1])
                if key == 'status':
                    sbits = value.split(None, 1) + [ '256' ]
                    (arch, value) = sbits[0:2]
                    key += '/' + arch
                    if not overall:
                        overall = value
                    elif value != '0':
                        overall = value
                entry[key] = bits[1]
            entry['overall'] = overall

            for fix_from, fix_to in [
                    ('host', 'build-host'),
                    ('hash', 'commit-hash'),
                    ('subject', 'commit-title'),
                    ('id', 'commit-label'),
                    ]:
                if fix_from not in entry:
                    continue
                entry[fix_to] = entry[fix_from]
                del entry[fix_from]

            if 'committed' in entry:
                entry['commit-time'] = float(entry['committed'])
                results.append((entry['commit-time'], entry))

results.sort(reverse=True)

with open(order, "w") as order_fd:
    for _, entry in results:
        print(entry['directory'], file=order_fd)

meta = section
meta['series'] = results[0][1]['series']
meta['package'] = results[0][1].get('package')
meta['directory_title'] = directory_title

with open(html, "w") as html_fd:
    print('''<html>
<head>
<title>{title} for {directory_title}</title>
<style>
.GOOD {{ background-color: green; }}
.WARN {{ background-color: yellow; }}
.FAIL {{ background-color: red; }}
.UBUNTU {{ background-color: #FFFF99; }}
table.matrix {{
    border-collapse: collapse;
}}
table.matrix th {{
    text-align: left;
    padding-left: 5px;
    padding-right: 5px;
}}
table.matrix td {{
    text-align: left;
    padding-left: 5px;
    padding-right: 5px;
}}
#table.matrix, table.matrix th, table.matrix td {{
#   border: 1px solid black;
#}}
#.row:nth-child(6n+1) {{ background-color: darkgrey }}
#.row:nth-child(6n+2) {{ background-color: darkgrey }}
#.row:nth-child(6n+3) {{ background-color: darkgrey }}
.row:nth-child(even) {{ background-color: lightgrey }}

</style>
</head>
<body>
<h1>{title} for {directory_title}</h1>
<table class="matrix">
<tr><th>{title}<th>Progress<th>Status'''.format(**meta), file=html_fd)
    for _, entry in results:
        row_class = 'row'
        commit_id = entry.get('commit-label', entry.get('commit'))
        if commit_id.startswith('Ubuntu-'):
            row_class = 'UBUNTU'

        status = entry['overall']
        if status == 'in-progress':
            status_string = 'IN-PROGRESS'
            status_class = 'WARN'
        elif status == 'succeeded':
            status_string = 'GOOD'
            status_class = 'GOOD'
        elif status == 'failed':
            status_string = 'FAIL'
            status_class = 'FAIL'
            for test, test_data in entry.get('tests', {}).items():
                if test_data.get('status-rc', 0) != 0:
                    status_string = "TEST {} rc={}".format(test, test_data['status-rc'])
                    break
        elif status == '0':
            status_string = 'GOOD'
            status_class = 'GOOD'
        else:
            status_string = 'FAIL rc=' + str(status)
            status_class = 'FAIL'
        commit_url = section.get('repo', '').format(**entry)
        status_url = quote("{directory}".format(**entry))

        progress_total = '-'
        progress_done = '-'
        if 'testsets' in entry:
            progress_total = len(entry['testsets'])
            if 'tests' in entry:
                progress_done = progress_total
                for test, test_data in entry['tests'].items():
                    if test_data['status'] == 'missing':
                        progress_done -= 1
        progress = "{}/{}".format(progress_done, progress_total)
        print('<tr class="{row_class}"><td><a href="{commit_url}">{commit_id}</a> -- {commit_title}<td>{progress}<td class="{status_class}"><a href="{status_url}">{status_string}</a>'.format(
            commit_url=commit_url,
            status_string=status_string,
            status_class=status_class,
            status_url=status_url,
            row_class=row_class,
            commit_id=commit_id,
            commit_title=entry.get('commit-title'),
            progress=progress,
            ), file=html_fd)
    print('''</table>
<body>
</html>''', file=html_fd)

with open(latest, "w") as latest_fd:
    json.dump(results[0][1], latest_fd)
