#!/bin/bash
P='cod-tip-build'

# Options.

if [ "$#" -ne 5 ]; then
	echo "Usage: $0 <series> <remote> <commit-ish> <arch> <out>" 1>&2
	exit 1
fi

here=$(dirname "$0")
case "$here" in
/*) ;;
*)  here=$(pwd)/$here ;;
esac

# 'master_main' is sourced from 'lib-build' but declare it here to please shellcheck.
master_main=

# shellcheck disable=SC1091
. "$here/lib-build"
# shellcheck disable=SC1091
. "$here/lib-chroot"

series="$1"
remote="$2"
commit="$3"
arch="$4"
out="$5"

build_release="$series"
id="$commit"

master_tree_select

result_topdir="../RESULT"
rm -rf "$result_topdir"
result="$result_topdir/$arch"
mkdir -p "$result"

echo "$P.$arch $series $remote $commit $arch $out" >"$result/REBUILD"

host=$( hostname )

# Ensure we have the commit identified.
repo_remote_update_list "$remote"

# Make sure git is ready for anything...
rm -rf .git/rebase-apply
git reset --hard HEAD
git clean -x -f -d

# Make a branch at the specified commit.
git checkout HEAD^ --
git branch -D "tip-$id" || true
git checkout -b "tip-$id" "$commit" || {
	echo "Unable to checkout requested commit; aborting" 1>&2
	exit 1
}

# Lookup the sha we are building so we can validate the combined results.
sha=$( git log -1 --pretty=format:%H "$commit" )

# Clean the tree.
git clean -x -f -d

build()
{
	local build_release="$1"
	local build_arch="$2"
	local arch="$3"
	local result="$4"

	local opts
	local start_time
	local end_time
	local jobs

	start_time=$(date +%s)

	# Clean out any existing .debs.
	rm  "$master_main/"linux-{headers,image,modules}-*.deb

	case "$arch" in
	all|x32)	return ;;
	amd64)		build=-b ;;
	*)		build=-B ;;
	esac

	mkdir -p "$result"
	echo "build $arch/build on $build_arch ..."
	{
		echo "build from $commit ($sha)"

		# Make things shiney.
		git clean -x -f -d
		do_chroot "$build_release-$build_arch" \
			fakeroot debian/rules clean

		# On large systems, limit the number of parallel jobs to 32 to prevent
		# build failures like 'sh: 1: Cannot fork'. Hopefully...
		jobs=$(getconf _NPROCESSORS_ONLN || echo 1)
		if [ "$jobs" -gt 32 ] ; then
			jobs=32
		fi
		echo "use $jobs parallel build jobs"

		version=$(do_chroot_quiet "$build_release-$build_arch" dpkg-buildpackage --version | \
			awk '(found == 1) {next;} {found=1; print $NF;}')
		echo "dpkg-buildpackage version=$version"

		# Assemble the dpkg-buildpackage commandline arguments
		opts=("-j$jobs" "-uc" "-a$arch" "$build" "-d")
		if dpkg --compare-versions "$version" ge "1.18.19"; then
			opts+=("-ui")
		fi
		do_chroot "$build_release-$build_arch" \
			dpkg-buildpackage "${opts[@]}"
		rc="$?"
		echo "$rc" >"$result/status"
	} 2>&1 | tee -a "$result/log"
	read -r rc <"$result/status"
	echo "build $arch/build on $build_arch ... rc=$rc"

	# Copy the resulting .debs into the results.
	mv "$master_main/"linux-{headers,image,modules}-*.deb "$result"

	# Write the summary YAML.
	end_time=$( date +%s )
	cat - <<EOL >"$result/summary.yaml"
build-host: $host
build-arch: $build_arch
arch: $arch
series: $series
commit-hash: $sha
start-time: $start_time
test: build
status: $rc
end-time: $end_time
EOL
}

build_selftests()
{
	local build_release="$1"
	local build_arch="$2"
	local arch="$3"
	local result="$4"

	local start_time
	local end_time
	local fat_arch

	start_time=$(date +%s)

	# Make things shiney -- so we can work out if this is a fat arch.
	git clean -x -f -d
	do_chroot "$build_release-$build_arch" \
		fakeroot debian/rules clean

	# Work out if this is fat architecture.
	fat_arch=$(grep-dctrl --regex --field Architecture "\(^\| \)$arch\( \|$\)" -s Package debian/control | grep -c -v linux-libc-dev)

	# On non-crosscompiled architectures build the selftests.
	if [ "$arch" = "$build_arch" ] && [ "$fat_arch" -ne 0 ]; then
		mkdir -p "$result"
		echo "build $arch/self-tests on $build_arch ..."
		{
			echo "build from $commit ($sha)"

			# Make things shiney.
			git clean -x -f -d
			do_chroot "$build_release-$build_arch" \
				fakeroot debian/rules clean
			do_chroot "$build_release-$build_arch" \
				fakeroot debian/rules compileselftests
			rc="$?"
			echo "$rc" >"$result/status"
		} 2>&1 | tee -a "$result/log"
		read -r rc <"$result/status"
		echo "build $arch/self-tests on $build_arch ... rc=$rc"

		# Write the summary YAML.
		end_time=$( date +%s )
		cat - <<EOL >"$result/summary.yaml"
build-host: $host
build-arch: $build_arch
arch: $arch
series: $series
commit-hash: $sha
start-time: $start_time
test: self-tests
status: $rc
end-time: $end_time
EOL
	fi
}

build_arch=$(dpkg --print-architecture)
# We can build i386 and amd64 nativly on amd64 hosts.
case "$build_arch/$arch" in
amd64/i386)	build_arch='i386' ;;
esac

build "$build_release" "$build_arch" "$arch" "$result"
build_selftests "$build_release" "$build_arch" "$arch" "$result/self-tests"

# Finally mark this as a partial result.
echo "$out $arch/$build_arch" >"$result/@publish@"

# Output.
publish="$HOME/public_html/$out"
mkdir -p "$publish"
mv "$result_topdir"/* "$publish"

# Tidy up our mess at the end of the job.
rm -f "$master_main/"*.{deb,ddeb,udeb,buildinfo,changes,tar.gz}
