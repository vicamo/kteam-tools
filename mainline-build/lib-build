#
# lib-build -- helpers for triggers and build recipies
#
here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

if [ -d "$HOME/COD" ]; then
	master_main="$HOME/COD"
else
	master_main="$HOME/mainline-builds"
fi
master_tree="$master_main/linux"

master_state="$master_main/state"

#master_repo="/srv/kernel.ubuntu.com/git/ubuntu"
archive_repo="git://kernel.ubuntu.com/ubuntu-archive"
master_repo="git://kernel.ubuntu.com/ubuntu"

# Select the master tree, creating it if necessary.
master_tree_select()
{
	repo_select "$master_tree"
}

# Select a repo, make it if it does not exist, and init it in git
# in preparation for a repo_remote_update().
repo_select()
{
	# Build us a master tree if we do not have one.
	if [ ! -d "$1" ]; then
		echo "$P: creating primary build tree ..."
		mkdir -p "$1"
		cd "$1"
		git init
	else
		cd "$1"
	fi
}

# Map remote names to real URLs for use when remotes are missing.
repo_remote_url_set()
{
        local remote="$1"

        remote=${remote//./__dt__}
        remote=${remote//-/__mi__}
        remote=${remote//+/__pl__}

	eval url_${remote}='"$2"'
}

repo_remote_url()
{
        local remote="$1"

        remote=${remote//./__dt__}
        remote=${remote//-/__mi__}
        remote=${remote//+/__pl__}

	eval RET="\$url_${remote}"
}

repo_remote_url_set	'linus'			'git://git.launchpad.net/~ubuntu-kernel-test/+git/linus--linux'
repo_remote_url_set	'linux-stable'		'git://git.launchpad.net/~ubuntu-kernel-test/+git/linux-stable'
repo_remote_url_set	'airlied--linux'	'git://git.launchpad.net/~ubuntu-kernel-test/+git/airlied--linux'
repo_remote_url_set	'drm-intel'		'git://git.launchpad.net/~ubuntu-kernel-test/+git/freedesktop--drm-intel'
repo_remote_url_set	'freedesktop--drm-tip'	'git://git.launchpad.net/~ubuntu-kernel-test/+git/freedesktop--drm-tip'

repo_remote_url_set	'2.6.32.y.33.z'		'git://kernel.ubuntu.com/smb/linux-2.6.32.y-drm33.z.git'
repo_remote_url_set	'ubuntu-stable'		'git://kernel.ubuntu.com/herton/linux-stable.git'
repo_remote_url_set	'extended-stable'	'git://git.launchpad.net/~canonical-kernel/linux/+git/linux-stable-ckt'

repo_remote_url_set	'crack'			'git://git.launchpad.net/~ubuntu-kernel-test/ubuntu/+source/linux/+git/mainline-crack'
repo_remote_url_set	'crack-push'		'git://git.launchpad.net/~ubuntu-kernel-test/ubuntu/+source/linux/+git/mainline-crack'
repo_remote_url_set	'crack-extra'		'git://git.launchpad.net/~ubuntu-kernel-test/ubuntu/+source/linux/+git/cod-extra'

repo_remote_url_set	'stable-queue'		'git://git.kernel.org/pub/scm/linux/kernel/git/stable/stable-queue.git'
repo_remote_url_set	'stable-queue-3.2'	'git://git.kernel.org/pub/scm/linux/kernel/git/bwh/linux-3.2.y-queue.git'

repo_remote_url_set	'unstable'		'git://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/unstable'

# Use kernel-series.yaml to load up the repo definitions for Ubuntu packages.
eval $( "$here/mainline-config" 'lib-build' )

# Update a specific remote to the latest available, if the remote is missing
# then add it using the urls above.
repo_remote_update_as()
{
	local remote="$1"
	local url="$2"
	local curr
	local rc

	rc=0
	curr=`git config "remote.$remote.url"` || rc=1
	if [ "$rc" -eq 0 -a "$curr" != "$url" ]; then
		echo "$P: removing $remote remote ($curr) ..."
		git remote rm "$remote" || true
		curr=""
	fi
	if [ "$curr" = "" ]; then
		echo "$P: adding $remote remote ($url) ..."
		git remote add "$remote" "$url"
	fi
	echo "$P: fetching $remote remote ..."
	git fetch -vv "$remote" "+refs/heads/*:refs/remotes/$remote/*" '+refs/tags/*:refs/tags/*' || true
}

repo_remote_update()
{
	local remote="$1"
	local url
	
	repo_remote_url "$remote"; url="$RET"
	if [ "$url" = '' ]; then
		remote="${remote%--*}"
		repo_remote_url "$remote"; url="$RET"
	fi

	repo_remote_update_as "$remote" "$url"
}

repo_remote_update_list()
{
	local remote

	for remote in "$@"
	do
		repo_remote_update "$remote"
	done
}

#
# Add and update the upstream repositories as needed.
#
repo_update_ubuntu()
{
	local repo="$1"
	local series="$2"
	local url

	(
		repo_select "$master_main/$repo"
		remote=`echo "$repo" | sed -e "s/linux/$series/"`
		repo_remote_url "$remote"; url="$RET"

		repo_remote_update_as "$series" "$url"
	)
}

#
# Add and update the remote repositories as needed.
#
repo_update_remote()
{
	local repo="$1"
	local package="$2"
	local url

	(
		repo_select "$master_main/$repo"
		repo_remote_url "$package"; url="$RET"

		repo_remote_update_as "$package" "$url"
	)
}


#
# series_to_build_release -- map from a series to a sane build series.
#
series_to_build_release()
{
	# We cannot use the previous LTS as we are tied somewhat to compiler
	# versions and features in later releases.
	case "$series" in
	hardy|intrepid|jaunty|karmic|lucid|maverick|natty|oneiric|precise|quantal|raring|saucy)
		RET="precise" ;;
	trusty|utopic)
		RET="trusty" ;;
	unstable)
		RET="wily" ;;
	*)
		RET="$series" ;;
	esac
}
