#!/bin/bash

here=$(dirname $(readlink -f "$0"))

if [ "$#" -ne 2 ]; then
	echo "Usage: $0 <data-directory> <published-info-directory>" 1>&2
	exit 1
fi
data="$(readlink -e "$1")"
out="$(readlink -e "$2")"

echo "$(date): starting"

cd "$out" || exit "$?"

# Update the data and tooling.
if [ ! -d "$data/kteam-tools" ]; then
	git clone git://git.launchpad.net/~canonical-kernel/+git/kteam-tools "$data/kteam-tools" || exit "$?"
else
	(
		cd "$data/kteam-tools" || exit 1
		git fetch origin
		git reset --hard origin/master
	) || exit "$?"
fi
if [ ! -d "$data/kernel-versions" ]; then
	git clone git://git.launchpad.net/~canonical-kernel/+git/kernel-versions "$data/kernel-versions" || exit "$?"
else
	(
		cd "$data/kernel-versions" || exit 1
		git fetch origin
		git reset --hard origin/master
	) || exit "$?"
fi

# Update and convert branches...
{
	(
		cd "$data/kteam-tools" || exit 1
		git for-each-ref --format "$data/kteam-tools kernel-series %(objectname) %(refname)" refs/remotes/origin/master
		git for-each-ref --format "$data/kteam-tools sru-cycle %(objectname) %(refname)" refs/remotes/origin/master
		git for-each-ref --format "$data/kteam-tools signing-config %(objectname) %(refname)" refs/remotes/origin/master
	)
	(
		cd "$data/kernel-versions" || exit 1
		git for-each-ref --format "$data/kernel-versions kernel-series %(objectname) %(refname)" refs/remotes/origin | grep -v -- "-next$"
	)
} | \
while read repo filename objectname refname x
do
	case "$repo:$refname" in
	*/kernel-versions:*/HEAD)		continue ;;
	*/kernel-versions:*/master)		continue ;;
	esac

	cycle="$(basename $refname)"
	objectname_file="$out/.$filename.$cycle.on"
	case "$repo" in
	*/kteam-tools)		variant="" ;;
	*/kernel-versions)	variant="@$cycle" ;;
	*)			variant="@$(basename "$repo")@$cycle" ;;
	esac
	#echo "REPO<$repo> ON<$objectname> RN<$refname>  cycle<$cycle> objectname_file<$objectname_file>"
	objectname_existing="$(cat "$objectname_file" 2>/dev/null)"
	if [ "$objectname_existing" = "$objectname" ]; then
		continue
	fi
	echo "II: upstream $(basename "$repo") $cycle $filename.yaml changed ..."
	(
		cd "$repo" || exit 1
		git show "$refname:info/$filename.yaml" >"$out/$filename.yaml.new" || exit 0
		"$here/ks-convert" "$out/$filename.yaml.new" "$out/$filename.json.new" || exit 0
		gzip -9 <"$out/$filename.json.new" >"$out/$filename.json.gz.new"
		mv -f "$out/$filename.yaml.new" "$out/$filename.yaml$variant"
		mv -f "$out/$filename.json.new" "$out/$filename.json$variant"
		mv -f "$out/$filename.json.gz.new" "$out/$filename.json.gz$variant"
	) || exit "$?"
	echo "$objectname" >"$objectname_file"
done

echo "$(date): complete"
