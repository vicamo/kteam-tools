#!/usr/bin/env python3
#
# Collect Bug Data (CBD)
#

from sys                                import argv
from os                                 import path
from getopt                             import getopt, GetoptError
from ktl.utils                          import stdo, error, o2ascii
from ktl.bugs                           import Bugs
from ktl.kernel_bug                     import KernelBug
from ktl.std_app                        import StdApp
from lpltk.LaunchpadService             import LaunchpadService
from datetime                           import datetime
from ktl.kernel_series                  import KernelSeries
import json

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': error(e)
        self.usage(defaults)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--config=<cfg file>] [--debug=<dbg options>]                         \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --config=<cfg file>                                                                  \n")
        stdo("                         The full path to the configuration file to use instead of           \n")
        stdo("                         the default location.                                               \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("        --db=<database>                                                                      \n")
        stdo("                         The name of the json file that is to be used to track the bug       \n")
        stdo("                         information.                                                        \n")
        stdo("                                                                                             \n")
        stdo("        --as-me                                                                              \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --verbose                                                                         \n" % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'verbose', 'config=', 'debug=', 'db=', 'as-me']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--db'):
                    self.cfg['database'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

                elif opt == '--as-me':
                    self.cfg['as-me'] = True


        except GetoptError as e:
            print(e, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        if 'database' not in self.cfg:
            raise CmdlineError('The --db command line parameter is required.\n')
        return

# CollectRegressionsDataError
#
class CollectRegressionsDataError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# CollectRegressionsData
#
class CollectRegressionsData(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}
        self.defaults['as-me'] = False

    # __initialize
    #
    # A separate initialize that we can control when it gets called (not
    # when the object is instantiated).
    #
    def __initialize(self):
        if not self.cfg['as-me']:
            self.cfg['read_only'] = True
        self.cfg['launchpad_client_name'] = 'kernel-team-bjf-collect-bug-data'
        if 'staging' in self.cfg:
            self.cfg['launchpad_services_root'] = 'qastaging'
        self.verbose(" . Connecting to Launchpad\n")
        self.lp = LaunchpadService(self.cfg)

        # The service.distributions property is a collection of distributions. We
        # pretty much only care about one, 'ubuntu'.
        #
        self.distro = self.lp.distributions['ubuntu']
        return

    # __get_relevant_task
    #
    def __get_relevant_task(self, bug, pkg):
        retval = None
        for t in bug.tasks:
            task       = t.bug_target_name
            p = task.replace(' (Ubuntu)', '')
            if pkg == p:
                retval = t
                break
        return retval

    # __verbose_bug_info
    #
    def __verbose_bug_info(self, bug):
        if 'verbose' in self.cfg and self.cfg['verbose']:
            print(" ")
            print("    %s: %s" % (bug.id, bug.title))
            print(" ")

            tags = ""
            for t in bug.tags:
                tags += t
                tags += " "
            print("        Tags:")
            print("            %s" % (tags))

            tasks = bug.tasks
            print("        Tasks:")
            for task in tasks:
                print("            %45s %20s %20s" % (task.bug_target_name, task.status, task.importance))

    # date_to_string
    #
    def date_to_string(self, date):
        return date.strftime("%A, %d. %B %Y %H:%M UTC")

    # string_to_date
    #
    def string_to_date(self, date):
        return datetime.strptime(date, '%A, %d. %B %Y %H:%M UTC')

    # bug_needs_attention
    #
    def bug_needs_attention(self, bug, package, db):
        retval = False

        if bug.id in db['bug-collections'][package]['bugs']:
            retval = True
        else:
            retval = False

        return retval

    # main
    #
    def main(self):
        kernel_series = KernelSeries()

        cmdline = Cmdline()
        using_search_since = False
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

            self.__initialize()
            now = datetime.utcnow()

            # First, determine if we are starting from scratch or are "simply" updating
            # an existing .json database file.
            #
            bugs_db = None
            if path.exists(self.cfg['database']):
                with open(self.cfg['database'], 'r') as f:
                    bugs_db = json.load(f)

                if 'updated' in bugs_db:
                    using_search_since = True
                    search_since = datetime.strptime(bugs_db['updated'], '%A, %d. %B %Y %H:%M UTC')

            if bugs_db is None:
                bugs_db = {}
                bugs_db['bug-collections'] = {}
            bugs_db['updated'] = now.strftime("%A, %d. %B %Y %H:%M UTC")
            bugs_db_projects = bugs_db['bug-collections']

            #-------------------------------------------------------------------------------------------
            #
            projects_of_interest = bugs_db['lp']['projects']
            if 'task-status' in bugs_db['lp']:
                search_status          = bugs_db['lp']['task-status']
            else:
                search_status          = ["New","Incomplete","Confirmed","Triaged","In Progress"] # A list of the bug statuses that we care about

            if 'bug-tags-combinator' in bugs_db['lp']:
                search_tags_combinator = bugs_db['lp']['bug-tags-combinator']
            else:
                search_tags_combinator = "Any"

            for project in projects_of_interest:

                #
                try:
                    lp_project = self.lp.projects[project]
                except KeyError:
                    error("The project (%s) does not exist." % project)
                    raise

                self.verbose('%s (%s)\n' % (project, lp_project.name))

                try:
                    self.verbose(" . Searching ...")
                    if using_search_since:
                        # Issue: We could have collected a bug that has it's status set to one of those listed above
                        #        and in subsequent runs, it's status could have changed to "Won't Fix". It's also
                        #        possible that the release tag has been removed. Since we want to notice those changes,
                        #        and remove the bug from our db, we want to do the search strictly on a "since" basis.
                        #
                        self.verbose("   since: %s" % (search_since))
                        tasks = lp_project.search_tasks(status=search_status, modified_since=search_since)
                    else:
                        self.verbose("   since: The Beginning")
                        tasks = lp_project.search_tasks(status=search_status)
                    self.verbose("\n")

                    #limit = 5
                    this_package_bugs = None
                    for task in tasks:
                        if project not in bugs_db_projects:
                            bugs_db_projects[project] = {}
                            bugs_db_projects[project]['bugs'] = {}
                        this_package_bugs = bugs_db_projects[project]['bugs']

                        bug = KernelBug(task.bug)
                        primary_task = self.__get_relevant_task(bug, lp_project.name)
                        self.__verbose_bug_info(bug)

                        if using_search_since:
                            pass
                        else:
                            this_package_bugs[bug.id] = Bugs.bug_info(bug, now, primary_task)

                        #if limit == 0:
                        #    break
                        #limit -= 1

                    # Even if nothing changed on a bug, the gravity may have changed as the bug
                    # ages.
                    #
                    if project in bugs_db_projects and 'bugs' in bugs_db_projects[project]:
                        for bug_id in bugs_db_projects[project]['bugs']:
                            bug = KernelBug(self.lp.get_bug(bug_id))
                            bugs_db_projects[project]['bugs'][bug_id]['kernel_gravity'] = bug.kernel_gravity

                except:
                    error("Exception caught processing the tasks, building the bugs database.\n")
                    bugs_db = None
                    raise

            development_series = kernel_series.lookup_series(development=True)
            bugs_db['info'] = {}
            if development_series is not None:
                bugs_db['info']['dev series'] = development_series.codename

            # Add a list of ESM series
            bugs_db['info']['esm series'] = []
            for series in kernel_series.series:
                if series.esm:
                    bugs_db['info']['esm series'].append(series.codename)

            if bugs_db != None:
                with open(self.cfg['database'], 'w') as f:
                    f.write(json.dumps(bugs_db, sort_keys=True, indent=4))
                #report = RegressionsReport(self.lp, bugs_db)
                #print(report)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Keyboard interrupt")
            pass

        # Handle application errors.
        #
        except CollectRegressionsDataError as e:
            error(e.msg)

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        return

if __name__ == '__main__':
    app = CollectRegressionsData()
    app.main()

# vi:set ts=4 sw=4 expandtab:

