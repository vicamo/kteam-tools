#!/usr/bin/env python3
#

from sys                                import argv
from os                                 import path
from getopt                             import getopt, GetoptError
import json
from utils                              import stdo
from std_app                            import StdApp

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '':
            print(e)
        self.usage(defaults)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--config=<cfg file>] [--debug=<dbg options>] <srus.json>             \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --config=<cfg file>                                                                  \n")
        stdo("                         The full path to the configuration file to use instead of           \n")
        stdo("                         the default location.                                               \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --verbose                                                                         \n" % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'verbose', 'config=', 'debug=']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

            if result: # No errors yet

                # At lease one source package must be specified.
                #
                if len(args) > 0:
                    self.cfg['sru'] = args[0]

        except GetoptError as error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        if 'sru' not in self.cfg:
            raise CmdlineError('A json file containing the sru information is required. This is generated by the sru-report script.')
        return


class SruReport:
    # __init__
    #
    def __init__(self, data):
        self.data = data

    def __str__(self):
        retval  = self.head()
        retval += self.body()
        retval += self.tail()
        return retval

    def head(self):
        return '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>Kernel Packages Versions</title>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript" charset="utf-8"></script>

        <link href='http://fonts.googleapis.com/css?family=Cantarell&subset=latin'              rel='stylesheet' type='text/css'>

        <link title="light" rel="stylesheet" href="css/light-style.css" type="text/css" media="print, projection, screen" />
        <link title="dark" rel="stylesheet" href="css/dark-style.css" type="text/css" media="print, projection, screen" />

        <script type="text/javascript" src="js/styleswitcher.js"></script>

    </head>
        '''

    def tail(self):
        return '''

</html>
        '''

    def body(self):
        retval =  '''
    <body class="bugbody">
        <div class="outermost">'''
        retval += '\n'

        trackers_only_packages = ['linux-lts-backport-maverick']
        suite_keys = sorted(self.data['releases'].keys())
        for rls in suite_keys:
            if len(self.data['releases'][rls]) == 0:
                retval += "                    <div class=\"l2-section-heading\">%s</div>\n<div class=\"section\">                    No packages in proposed.</div>\n" % rls
            else:
                pkg_keys = sorted(self.data['releases'][rls].keys())
                odd_row = False

                retval += "            <div class=\"l2-section-heading\">%s</div>\n" % rls
                retval += '            <div class=\"section\">\n'
                retval += '                    <table width="100%" cellpadding="2" cellspacing="0">\n'
                retval += '                        <tr><th>Package</th><th align="left">PPA</th><th align="left">Release</th><th align="left">Updates</th><th align="left">Proposed</th><th align="left">&nbsp;</th></tr>\n'
                for pkg in pkg_keys:
                    if odd_row:
                        row_color = 'table-zebra-odd'
                        odd_row   = False
                    else:
                        row_color = 'table-zebra-even'
                        odd_row   = True

                    lpurl = 'https://launchpad.net/ubuntu/%s/+source/%s/' % (rls, pkg)
                    ppaurl = 'https://launchpad.net/~canonical-kernel-team/+archive/ppa/+packages'
                    retval += '                        <tr class="%s">\n' % (row_color)
                    retval += '                            <td width="400" valign="top"><a href="%s"        >%s  </a></td>\n' % (lpurl, pkg)

                    # ppa
                    #
                    if 'ppa' not in self.data['releases'][rls][pkg] or self.data['releases'][rls][pkg]['ppa'] == '':
                        retval += '                            <td width="200" valign="top">&nbsp;</td>\n'
                    else:
                        tmp = ppaurl
                        retval += '                            <td width="200" valign="top"><a href="%s" >%s</a></td>\n' % (tmp, self.data['releases'][rls][pkg]['ppa'])

                    # Release
                    #
                    if 'Release' not in self.data['releases'][rls][pkg] or self.data['releases'][rls][pkg]['Release'] == '':
                        retval += '                            <td width="200" valign="top">&nbsp;</td>\n'
                    else:
                        tmp = ppaurl
                        retval += '                            <td width="200" valign="top"><a href="%s" >%s</a></td>\n' % (tmp, self.data['releases'][rls][pkg]['Release'])

                    # Updates
                    #
                    if 'Updates' not in self.data['releases'][rls][pkg] or self.data['releases'][rls][pkg]['Updates'] == '':
                        retval += '                            <td width="200" valign="top">&nbsp;</td>\n'
                    else:
                        tmp = lpurl + self.data['releases'][rls][pkg]['Updates']
                        retval += '                            <td width="200" valign="top"><a href="%s" >%s</a></td>\n' % (tmp, self.data['releases'][rls][pkg]['Updates'])

                    # Proposed
                    #
                    if 'Proposed' not in self.data['releases'][rls][pkg] or self.data['releases'][rls][pkg]['Proposed'] == '':
                        retval += '                            <td width="200" valign="top">&nbsp;</td>\n'
                        proposed_version = None
                    else:
                        proposed_version = self.data['releases'][rls][pkg]['Proposed']
                        tmp = lpurl + proposed_version
                        retval += '                            <td width="200" valign="top"><a href="%s" >%s</a></td>\n' % (tmp, self.data['releases'][rls][pkg]['Proposed'])

                    retval += '                            <td>&nbsp;</td>\n'
                    retval += '                        </tr>\n'

                retval += '                   </table>\n'
                retval += '                   <br />\n'
                retval += '            </div>\n'

        retval += '            <div>\n'
        retval += '                <br />\n'
        retval += '                <hr />\n'
        retval += '                <table width="100%" cellspacing="0" cellpadding="0">\n'
        retval += '                    <tr>\n'
        retval += '                        <td>\n'
        retval += '                            %s\n' % self.data['updated']
        retval += '                        </td>\n'
        retval += '                        <td align="right">\n'
        retval += '                            Themes:&nbsp;&nbsp;\n'
        retval += '                            <a href=\'#\' onclick="setActiveStyleSheet(\'dark\'); return false;">DARK</a>\n'
        retval += '                            &nbsp;\n'
        retval += '                            <a href=\'#\' onclick="setActiveStyleSheet(\'light\'); return false;">LIGHT</a>\n'
        retval += '                        </td>\n'
        retval += '                    </tr>\n'
        retval += '                </table>\n'
        retval += '                <br />\n'
        retval += '            </div>\n'
        retval += '''

        </div> <!-- Outermost -->
    </body>
        '''

        return retval

# Sru2Html
#
class Sru2Html(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}

    # initialize
    #
    def initialize(self):
        self.dbg('core', "initialize: enter\n")
        self.dbg('core', "initialize: leave\n")
        return

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

            self.initialize()

            if path.exists(self.cfg['sru']):
                with open(self.cfg['sru'], 'r') as f:
                    sru = json.load(f)

            print(SruReport(sru))

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle ommand line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        return

if __name__ == '__main__':
    app = Sru2Html()
    app.main()

# vi:set ts=4 sw=4 expandtab:

