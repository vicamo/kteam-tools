#!/usr/bin/env python3
#
# This script is intended to produce an html, report of all the bugs in any "open"
# state that have been tagged with a "regression" tag.
#

from sys                                import argv
from os                                 import path
from getopt                             import getopt, GetoptError
from ktl.utils                          import stdo, error, stde
from ktl.bugs                           import DeltaTime
from ktl.std_app                        import StdApp
from ktl.dbg                            import Dbg
from datetime                           import datetime
import json

# FileDoesntExist
#
class FileDoesntExist(Exception):
    def __init__(self, file_name=''):
        self.file_name = file_name

    def print_std_error(self):
        error('The file (%s) does not exist.\n' % self.file_name)

    def print_std_warning(self):
        stde('** Warning: The file (%s) does not exist.\n' % self.file_name)

# json_load
#
def json_load(file_name):
    """
    Load the indicated json format file, returning the created object.
    """
    Dbg.enter("json_load")

    retval = None
    if path.exists(file_name):
        with open(file_name, 'r') as f:
            retval = json.load(f)
    else:
        raise FileDoesntExist(file_name)

    Dbg.leave("json_load")
    return retval

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': error(e)
        self.usage(defaults)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--config=<cfg file>] [--debug=<dbg options>]                         \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --config=<cfg file>                                                                  \n")
        stdo("                         The full path to the configuration file to use instead of           \n")
        stdo("                         the default location.                                               \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("        --xtra                                                                               \n")
        stdo("                         There are other columns that will be reported.                      \n")
        stdo("                                                                                             \n")
        stdo("        --sru                                                                                \n")
        stdo("                         Path to a sru.json data file.                                       \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --verbose                                                                         \n" % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'verbose', 'config=', 'debug=', 'xtra', 'sru=' ]
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif (opt == '--xtra'):
                    self.cfg['xtra'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

                elif (opt == '--sru'):
                    self.cfg['sru_data_file'] = val

            if result: # No errors yet

                # At lease one source package must be specified.
                #
                if len(args) > 0:
                    self.cfg['database'] = args[0]

        except GetoptError as e:
            print(e, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        if 'database' not in self.cfg:
            raise CmdlineError('A json file containing the sru information is required. This is generated by the sru-report script.')
        return

# RegressionsReport
#
class RegressionsReport():
    # __init__
    #
    def __init__(self, db, xtra=False, sru_data=None):
        self.db = db
        self.importance_color = {
                "Unknown"       : "importance-unknown",
                "Critical"      : "importance-critical",
                "High"          : "importance-high",
                "Medium"        : "importance-medium",
                "Low"           : "importance-low",
                "Wishlist"      : "importance-wishlist",
                "Undecided"     : "importance-undecided"
            }
        self.status_color     = {
                "New"           : "status-new",
                "Incomplete"    : "status-incomplete",
                "Confirmed"     : "status-confirmed",
                "Triaged"       : "status-triaged",
                "In Progress"   : "status-in_progress",
                "Fix Committed" : "status-fix_committed",
                "Fix Released"  : "status-fix_released",
                "Invalid"       : "status-invalid",
                "Won't Fix"     : "status-wont_fix",
                "Opinion"       : "status-opinion",
                "Expired"       : "status-expired",
                "Unknown"       : "status-unknown"
            }

        self.show_xtra = xtra

        self.use_sru_data = False
        self.sru_data = sru_data
        if sru_data is not None:
            self.use_sru_data = True
        return

    # __str__
    #
    def __str__(self):
        retval  = self.__head()
        retval += self.__body()
        retval += self.__tail()
        return retval

    # __head
    #
    # The begining of the html file.
    #
    # TODO: A bunch of this should probably be pulled out and put into a template file rather
    #       than coded here.
    #
    def __head(self):
        retval = '''<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />'''
        if 'tags' in self.db:
            if   self.db['tags'] == 'regression-potential':
                retval += '        <title>Regressions-Potential Report</title>\n'
            elif self.db['tags'] == 'regression-release':
                retval += '        <title>Regressions-Release Report</title>\n'
            elif self.db['tags'] == 'regression-update':
                retval += '        <title>Regressions-Update Report</title>\n'
            elif self.db['tags'] == 'regression-proposed':
                retval += '        <title>Regressions-Proposed Report</title>\n'
            else:
                retval += '        <title>The Regressions Report</title>\n'
        elif 'title' in self.db:
            retval += '        <title>%s</title>\n' % (self.db['title'])

        retval += '''
        <link title="light" rel="stylesheet" href="css/light-style.css" type="text/css" media="print, projection, screen" />
        <link title="dark" rel="stylesheet" href="css/dark-style.css" type="text/css" media="print, projection, screen" />

        <script type="text/javascript" src="js/styleswitcher.js"></script>

        <link href='http://fonts.googleapis.com/css?family=Cantarell&subset=latin'              rel='stylesheet' type='text/css'>
        <script type="text/javascript" src="js/jquery-latest.js"></script>
        <script type="text/javascript" src="js/jquery.tablesorter.js"></script>'''

        retval += '\n'
        retval += '        <script type="text/javascript">'
        retval += '''
           // add parser through the tablesorter addParser method
           $.tablesorter.addParser({
               // set a unique id
               id: 'age',
               is: function(s) {
                   // return false so this parser is not auto detected
                   return false;
               },
               format: function(s) {
                   // format your data for normalization
                   fields  = s.split('.')
                   days    = parseInt(fields[0], 10) * (60 * 24);
                   hours   = parseInt(fields[1], 10) * 60;
                   minutes = parseInt(fields[2]);
                   total   = minutes + hours + days
                   return total;
               },
               // set type, either numeric or text
               type: 'numeric'
           });

           // add parser through the tablesorter addParser method
           $.tablesorter.addParser({
               // set a unique id
               id: 'importance',
               is: function(s) {
                   // return false so this parser is not auto detected
                   return false;
               },
               format: function(s) {
                   // format your data for normalization
                       return s.toLowerCase().replace(/critical/,6).replace(/high/,5).replace(/medium/,4).replace(/low/,3).replace(/wishlist/,2).replace(/undecided/,1).replace(/unknown/,0);
               },
               // set type, either numeric or text
               type: 'numeric'
           });


           // add parser through the tablesorter addParser method
           $.tablesorter.addParser({
               // set a unique id
               id: 'kv',
               is: function(s) {
                   // return false so this parser is not auto detected
                   return false;
               },
               format: function(s) {
                   // format your data for normalization
                   x = s;
                   x = x.replace(/\[\S+\]/,'');
                   x = x.replace(/^\s+|\s+$/g, '');
                   if (x != '') {
                       version = x
                       fields = version.split('-');
                       lvn  = fields[0];
                       xtra = fields[1];

                       // x.y.z
                       fields = lvn.split('.');
                       v1 = parseInt(fields[0], 10) * 100000000; // x
                       v2 = parseInt(fields[1], 10) * 10000000;  // y
                       v3 = parseInt(fields[2], 10) * 100000;    // z

                       fields = xtra.split('.');
                       abi = parseInt(fields[0], 10) * 1000;
                       upld = parseInt(fields[1], 10);

                       // 2.6.38-10.46     2*100,000,000 + 6*10,000,000 + 38*100000 + 10*1000 + 46
                       // 2.6.38-9.42
                       // 2.6.32-33.72

                       total = v1 + v2 + v3 + abi + upld;
                   }
                   else {
                       total = 0;
                   }
                   return total;
               },
               // set type, either numeric or text
               type: 'numeric'
           });

           // add parser through the tablesorter addParser method
           $.tablesorter.addParser({
               // set a unique id
               id: 'status',
               is: function(s) {
                   // return false so this parser is not auto detected
                   return false;
               },
               format: function(s) {
                   // format your data for normalization
                       return s.toLowerCase().replace(/new/,12).replace(/incomplete/,11).replace(/confirmed/,10).replace(/triaged/,9).replace(/in progress/,8).replace(/fix committed/,7).replace(/fix released/,6).replace(/invalid/,6).replace(/won't fix/,5).replace(/confirmed/,4).replace(/opinion/,3).replace(/expired/,2).replace(/unknown/,1);
               },
               // set type, either numeric or text
               type: 'numeric'
           });
           '''

        retval += '$(function() {\n'
        for pkg in self.db['packages']:
            if len(self.db['packages'][pkg]['bugs']) == 0:
                continue
            retval += '                $("#%s").tablesorter({\n' % pkg.replace('.', '_')
            retval += '                    headers: {\n'
            retval += '                        2: {\n'
            retval += '                            sorter:\'importance\'\n'
            retval += '                        },\n'
            retval += '                        3: {\n'
            retval += '                            sorter:\'status\'\n'
            retval += '                        },\n'
            retval += '                        6: {\n'
            retval += '                            sorter:\'kv\'\n'
            retval += '                        },\n'
            retval += '                        9: {\n'
            retval += '                            sorter:\'age\'\n'
            retval += '                        }\n'
            retval += '                    },\n'
            retval += '                    widgets: [\'zebra\']\n'
            retval += '                });\n'
        retval += '            });\n'
        retval += '        </script>\n'

        retval += '\n'
        retval += '    </head>\n'
        retval += '\n'

        return retval

    # __tail
    #
    def __tail(self):
        return '''

</html>
        '''

    # __body
    #
    def __body(self):
        retval =  '''
    <body class="bugbody">
        <div class="outermost">'''
        retval += '\n'

        retval += '            <div class="title">\n'
        if 'tags' in self.db:
            if   self.db['tags'] == 'regression-potential':
                retval += '                The Regressions-Potential Report\n'
            elif self.db['tags'] == 'regression-release':
                retval += '                The Regressions-Release Report\n'
            elif self.db['tags'] == 'regression-update':
                retval += '                The Regressions-Update Report\n'
            elif self.db['tags'] == 'regression-proposed':
                retval += '                The Regressions-Proposed Report\n'
            else:
                retval += '                The Regressions Report\n'
        elif 'title' in self.db:
            retval += self.db['title']
        retval += '            </div>\n'

        for pkg in self.db['packages']:
            if len(self.db['packages'][pkg]['bugs']) == 0:
                continue
            retval += '                <div class="section">\n'
            retval += '                        <div class="table-heading">&nbsp;%s &nbsp;&nbsp(%d)</div>\n' % (pkg, len(self.db['packages'][pkg]['bugs']))
            retval += '                    <table id="%s" class="tablesorter" border="0" cellpadding="0" cellspacing="1" width="100%%">\n' % pkg.replace('.', '_')
            retval += '                        <thead>\n'
            retval += '                            <tr>\n'
            retval += '                                <th width="40">Bug</th>\n'
            retval += '                                <th>Summary</th>\n'
            retval += '                                <th width="80">Importance</th>\n'
            retval += '                                <th width="80">Status</th>\n'
            retval += '                                <th width="120">Assignee</th>\n'
            retval += '                                <th width="80">Series</th>\n'
            retval += '                                <th width="90">Kernel</th>\n'
            retval += '                                <th width="50">Heat</th>\n'
            retval += '                                <th width="50">Age</th>\n'
            if self.show_xtra:
                retval += '                                <th width="30">&nbsp; T &nbsp;</th>\n'
                retval += '                                <th width="30">&nbsp; E &nbsp;</th>\n'

            retval += '                            </tr>\n'
            retval += '                        </thead>\n'

            retval += '                        <tbody>\n'
            for bug_id in self.db['packages'][pkg]['bugs']:
                retval += self.__bug_details(bug_id, pkg)
            retval += '                        </tbody>\n'

            retval += '                    </table>\n'
            retval += '                </div>\n'
            retval += '                <br />\n'
            retval += '                <br />\n'
        retval += '            <div>\n'
        retval += '                <br />\n'
        retval += '                <hr />\n'
        retval += '                <table width="100%" cellspacing="0" cellpadding="0">\n'
        retval += '                    <tr>\n'
        retval += '                        <td>\n'
        retval += '                            %s\n' % self.db['updated']
        retval += '                        </td>\n'
        retval += '                        <td align="right">\n'
        retval += '                            Themes:&nbsp;&nbsp;\n'
        retval += '                            <a href=\'#\' onclick="setActiveStyleSheet(\'dark\'); return false;">DARK</a>\n'
        retval += '                            &nbsp;\n'
        retval += '                            <a href=\'#\' onclick="setActiveStyleSheet(\'light\'); return false;">LIGHT</a>\n'
        retval += '                        </td>\n'
        retval += '                    </tr>\n'
        retval += '                </table>\n'
        retval += '                <br />\n'
        retval += '            </div>\n'
        retval += '''

        </div> <!-- Outermost -->
    </body>
        '''
        return retval

    # date_to_string
    #
    def date_to_string(self, date):
        return date.strftime("%A, %d. %B %Y %H:%M UTC")

    # string_to_date
    #
    def string_to_date(self, date):
        return datetime.strptime(date, '%A, %d. %B %Y %H:%M UTC')

    def how_long_ago(self, date):
        now = datetime.utcnow()
        now.replace(tzinfo=None)
        ago = DeltaTime(self.string_to_date(date), now)
        #if ago.days > 1:
        #    when = '%d days' % (ago.days)
        #elif ago.days == 1:
        #    when = '1 day, %h hours' % (ago.hours)
        #elif ago.hours > 1:
        #    when = '%h hours' % (ago.hours)
        #elif ago.hours == 1:
        #    when = '1 hour, %d mintues' % (ago.minutes)
        #when = '%d:%02d:%02d' % (ago.days, ago.hours, ago.minutes)
        when = '%d.%d.%d' % (ago.days, ago.hours, ago.minutes)
        when_style = ''
        if ago.days == 0:
            if ago.hours == 0:
                when_style = 'class="date-age-1"'
            else:
                when_style = 'class="date-age-2"'

        return when_style, when

    # __bug_details
    #
    def __bug_details(self, bug_id, pkg):
        try:
            bug_url = "http://launchpad.net/bugs/%s" % bug_id
            bug = self.db['packages'][pkg]['bugs'][bug_id]

            flag = ''
            try:
                if self.use_sru_data and bug['series name'] != '' and bug['booted_kernel_version'] != '':
                    for pocket in self.sru_data['releases'][bug['series name']]['linux']:
                        if self.sru_data['releases'][bug['series name']]['linux'][pocket] == bug['booted_kernel_version']:
                            if pocket == 'Proposed':
                                flag = '<span style="font-weight : bold; color : red;">[P]</span>'
                            elif pocket == 'Updates':
                                flag = '<span style="font-weight : bold; color : red;">[U]</span>'
                            elif pocket == 'Release':
                                #flag = '<span style="font-weight : bold; color : yellow;">[R]</span>'
                                pass
                            elif pocket == 'Security' or pocket == 'ppa':
                                continue
                            break
            except KeyError:
                pass

            retval  = '                                <tr>\n'
            retval += '                                    <td><a href="%s">%s</a></td>\n' % (bug_url, bug_id)                                       # Bug
            retval += '                                    <td class="bug-title">%s</td>\n' % bug['title']                                           # Summary
            retval += '                                    <td class="%s">%s</td>\n' % (self.importance_color[bug['importance']], bug['importance']) # Importance
            retval += '                                    <td class="%s">%s</td>\n' % (self.status_color[bug['status']], bug['status'])             # Status
            retval += '                                    <td class="assignee">%s</td>\n' % bug['assignee']                                         # Assignee
            retval += '                                    <td class="series-name">%s</td>\n' % (bug['series name'])                                 # Series

            if 'booted_kernel_version' in bug:
                retval += '                                    <td class="series-name">%s %s</td>\n' % (flag, bug['booted_kernel_version'])          # Booted Kernel Version
            else:
                retval += '                                    <td class="series-name">&nbsp;</td>\n'                                                # Booted Kernel Version

            if 'heat' in bug:
                retval += '                                    <td >%s</td>\n' % bug['heat']
            else:
                retval += '                                    <td >&nbsp;</td>\n'
            retval += '                                    <td %s>%s</td>\n' % self.how_long_ago(bug['date created'])                                # Age

            if self.show_xtra:
                msg    = 'kj-triage'
                if 'kj-triage' in bug['tags']:
                    img    = 'img/tick.png'
                    retval += '                                   <td title="%s" align="center"><img src="%s"></img></td>\n' % (msg, img)
                else:
                    img    = 'img/error.png'
                    retval += '                                   <td title="%s" align="center">&nbsp;</td>\n' % (msg)

                msg    = 'kj-expired'
                if 'kj-expired' in bug['tags']:
                    img    = 'img/tick.png'
                    retval += '                                   <td title="%s" align="center"><img src="%s"></img></td>\n' % (msg, img)
                else:
                    img    = 'img/error.png'
                    retval += '                                   <td title="%s" align="center">&nbsp;</td>\n' % (msg)

            retval += '                                </tr>\n'
        except:
            print("Exception caught on bug: %s" % (bug_id))
            raise
        return retval


# MkRegressionsReportError
#
class MkRegressionsReportError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# MkRegressionsReport
#
class MkRegressionsReport(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}

    # __initialize
    #
    # A separate initialize that we can control when it gets called (not
    # when the object is instantiated).
    #
    def __initialize(self):
        return

    # main
    #
    def main(self):
        cmdline = Cmdline()
        bugs_db = None
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

            self.__initialize()

            self.sru_data = None
            if 'sru_data_file' in self.cfg:
                self.sru_data = json_load(self.cfg['sru_data_file'])

            if path.exists(self.cfg['database']):
                with open(self.cfg['database'], 'r') as f:
                    bugs_db = json.load(f)

            else:
                raise MkRegressionsReportError('The specified database file (%s) does not exist.' % self.cfg['database'])

            if bugs_db != None:
                if 'xtra' in self.cfg and self.cfg['xtra']:
                    report = RegressionsReport(bugs_db, True, sru_data=self.sru_data)
                else:
                    report = RegressionsReport(bugs_db, False, sru_data=self.sru_data)
                print(report)

        except FileDoesntExist as e:
            e.print_std_error()

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle application errors.
        #
        except MkRegressionsReportError as e:
            error(e.msg)

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        return

if __name__ == '__main__':
    app = MkRegressionsReport()
    app.main()

# vi:set ts=4 sw=4 expandtab:

