#!/usr/bin/env python3
#

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from logging import basicConfig, INFO, DEBUG

from ktl.utils import stdo, eout, run_command
from ktl.git import Git, GitError
from ktl.debian import Debian, DebianError
from ktl.kernel_series import KernelSeries
from ktl.termcolor import colored
from launchpadlib.launchpad import Launchpad
from crl.handle import Handle, HandleError
import re
import os.path


# AppError
#
# A general exception that can be raised when an error is encountered in the app.
#
class AppError(Exception):
    # __init__
    #
    def __init__(s, error=""):
        s.msg = error


# VerifyReleaseReady
#
class VerifyReleaseReady:
    # __init__
    #
    def __init__(s, args):
        s.args = args
        s.defaults = {}
        s.defaults["verbose"] = False
        s.passed = 0
        s.failed = 0
        s.delimiter = 60
        # add launchpadlib support
        s.lp = Launchpad.login_anonymously(s.__class__.__name__, "production")
        s.lp_ubuntu = s.lp.distributions["ubuntu"]
        s.lp_devel_series = s.lp_ubuntu.current_series
        # Instantiate a KernelSeries for package lookups.
        s.kernel_series = KernelSeries()
        s.upstream = Debian.get_upstream()

    # Are we currently in a git repository?
    #
    def is_repo(s):
        retval = True
        if not Git.is_repo():
            raise AppError("This script can only be run from within a git repository.")
        return retval

    # Print colorized status line
    #
    # flag:
    #   False                   -> fail (red)
    #   "warning"               -> warning (yellow)
    #   True or any other value -> pass (green)
    def status(s, msg, flag):
        indent = s.delimiter - len(msg)
        if indent <= 0:
            indent = 0

        stdo("%s" % (" " * indent) + msg + ": ")
        if flag:
            s.passed += 1
            if flag == "warning":
                stdo(colored("warning\n", "yellow"))
            else:
                stdo(colored("pass\n", "green"))
        else:
            s.failed += 1
            stdo(colored("fail\n", "red"))

    def verbose(s, msg):
        if s.args.verbose:
            stdo(colored(msg + "\n", "blue"))

    def verify_linux(s, cl0, cl1):
        if "-" not in cl0["version"]:
            raise AppError("The version string is not well formed (missing '-').")

        (cl0_version, abi_build) = cl0["version"].split("-")  # Current version line
        cl0_abi = cl0["ABI"]
        cl0_build = cl0["upload-number"]

        (cl1_version, abi_build) = cl1["version"].split("-")  # Previous version line
        cl1_abi = cl1["ABI"]
        cl1_build = cl1["upload-number"]

        # Verify the version information in the changelog
        #
        while True:
            # Check: That the release information is correct.
            #
            msg = "release (%s)" % (cl0["release"])
            series = s.kernel_series.lookup_series(codename=cl0["release"])
            if not series:
                s.status(msg, False)
                s.verbose("invalid series specified '%s'" % (cl0["release"],))
            else:
                s.status(msg, True)

            msg = "package (%s)" % (cl0["package"])
            source = None
            if series:
                source = series.lookup_source(cl0["package"])
                if not source:
                    s.status(msg, False)
                    s.verbose(
                        "invalid source specified '%s' not found in series '%s'" % (cl0["package"], cl0["release"])
                    )
                else:
                    s.status(msg, True)

            msg = "version (%s)" % (cl0["version"])
            if source:
                found = False
                for version in source.versions:
                    if cl0["version"].startswith(version + "-"):
                        found = True
                        break
                if not found:
                    s.status(msg, False)
                    s.verbose(
                        "invalid version specified '%s' not found in series '%s' source '%s'"
                        % (cl0["version"], cl0["package"], cl0["release"])
                    )
                else:
                    s.status(msg, True)

            # Check: Make sure the ABI is *always* incremented
            #
            msg = "ABI bump (%d)" % (int(cl0_abi))
            if int(cl0_abi) <= int(cl1_abi):
                s.status(msg, False)
                s.verbose("No ABI bump: %d <= %d" % (int(cl0_abi), int(cl1_abi)))
            else:
                s.status(msg, True)

            # Check: Make sure the current version is correctly incremented from the previous one.
            #
            msg = "build number (%d)" % (int(cl1_build) + 1)
            if int(cl0_build) != int(cl1_build) + 1:
                s.status(msg, "warning")
                s.verbose("expected %d but got: %d" % (int(cl1_build), int(cl0_build)))
            else:
                s.status(msg, True)

            # Check: Make sure that the abi directory has the previous version
            v = cl1["version"]
            msg = "previous abi present (%s)" % (v)
            abi = Debian.abi()
            if abi:
                if v not in abi:
                    s.status(msg, False)
                else:
                    s.status(msg, True)

            # If ABI override is present, then check correctness and print info
            abi_arch, empty = Debian.abi_arch()
            allAbiOverridden = True
            noneAbiOverridden = True
            allModOverridden = True
            noneModOverridden = True
            for arch in abi_arch:
                if "ignore" in abi_arch[arch]:
                    noneAbiOverridden = False
                else:
                    allAbiOverridden = False
                if "ignore.modules" in abi_arch[arch]:
                    noneModOverridden = False
                else:
                    allModOverridden = False
            if noneAbiOverridden is False:
                msg = "ABI override is present"
                s.status(msg, True)
                if allAbiOverridden is False:
                    msg = "Not all arches have ABI overridden"
                    s.status(msg, False)
            if noneModOverridden is False:
                msg = "Module override is present"
                s.status(msg, True)
                if allModOverridden is False:
                    msg = "Not all arches have Module overridden"
                    s.status(msg, False)
            if allAbiOverridden != allModOverridden:
                msg = "Both ABI and Module override must be present"
                s.status(msg, False)
            for emptyFile in empty:
                msg = "Empty override file: %s" % emptyFile
                s.status(msg, False)

            break

        changelog = Debian.changelog()

        # Check: Make sure the commit of the version is the correct text.
        #
        log = Git.log(num=1)  # Only interested in the last commit

        commit = []
        for line in log["commits"][0]["text"]:
            line = line.strip()
            if line != "":
                if "Signed-off-by" not in line:
                    commit.append(line)

        version = "%s-%s.%s" % (cl0["linux-version"], cl0["ABI"], cl0["upload-number"])

        (closed, expected_re) = s.verify_closing_commit(cl0, commit, version)

        # Construct the expected tag, and verify that it matches the
        # latest commit tag
        #
        tag_prefix = cl0["package"]
        v = cl0["version"]
        pkg_prefixes = ["linux", "-meta", "-signed", "-restricted-modules", "-backports-modules-3.2.0"]
        for prefix in pkg_prefixes:
            if tag_prefix.startswith(prefix):
                tag_prefix = tag_prefix.replace(prefix, "", 1)
        expect_tag = "Ubuntu%s-%s" % (tag_prefix, v.replace("~", "_"))
        s.verify_tag(log, expect_tag)

        # Look to see if a tracking bug has been added to the changelog
        #
        found_tracker = False
        for index, line in enumerate(changelog[0]["content"]):
            if "-proposed tracker" in line:
                found_tracker = True
                # Concatenate next line if possible split content
                if index + 1 != len(changelog[0]["content"]):
                    line2 = changelog[0]["content"][index + 1]
                    if line2.startswith("    "):
                        line += line2
                try:
                    (junk, tracker_id) = line.split("#")
                    (tracker_id, junk) = tracker_id.split(")")
                    tracker_id = int(tracker_id)
                except:  # noqa (E722 Do not use bare `except`)
                    tracker_id = "warning"
                s.status("conformant release tracking bug line", tracker_id)
                if tracker_id == "warning":
                    stdo(colored("\t%s\n" % line, "yellow"))
                break
        s.status("release tracking bug", found_tracker)

        # If we are on a topic branch make sure we are not re-using the same tracking
        # bug from as the master branch. (The master and master-next branches can have
        # the same tracking bug #)
        #
        if found_tracker and tracker_id != "warning":
            branch = Git.current_branch()
            if branch not in ["master", "master-next"] and not branch.endswith("-next"):
                master_changelog = Debian.master_changelog()
                found_tracker = False
                master_tracker_id = "NOT-FOUND"
                for index, line in enumerate(master_changelog[0]["content"]):
                    if "-proposed tracker" in line:
                        # Concatenate next line if possible split content
                        if index + 1 != len(master_changelog[0]["content"]):
                            line2 = master_changelog[0]["content"][index + 1]
                            if line2.startswith("    "):
                                line += line2
                        try:
                            (junk, master_tracker_id) = line.split("#")
                            (master_tracker_id, junk) = master_tracker_id.split(")")
                            master_tracker_id = int(master_tracker_id)
                            found_tracker = True
                        except:  # noqa (E722 Do not use bare `except`)
                            break
                        break

                if found_tracker:
                    unique_tracker = tracker_id != master_tracker_id
                    s.status("unique release tracking bug", unique_tracker)
                else:
                    s.status("master release tracking bug found", "warning")

        # Verify that the changelog entry contains no "Miscellaneous" entries
        s.verify_changelog_nomisc()

        # Verify the bugs in the changelog are public, targeted against linux and the
        # proper series, and marked Fix Committed.
        tracker = s.verify_changelog_bugs()

        s.verify_tracker_bug(tracker)

        s.verify_changelog_commits()

        s.verify_content()

    def verify_closing_commit(s, cl0, commit, version):
        # **NOTE: Because we are inconsistent with the exact text used in the last commit
        #         I'm loosing up the matching a bit but making sure that what is in the
        #         last commit matches the tag
        #
        closed = True
        expected = "^UBUNTU: (Ubuntu[-\S]*-(%s|%s))$" % (version, cl0["version"].replace("+", "\+"))
        m = re.match(expected, commit[0])
        msg = "closing release commit"
        if len(commit) != 1:  # There should only be a single line in the commit
            s.status(msg, False)
            s.verbose("too many lines of text")
            closed = False
        elif m is None:
            s.status(msg, False)
            s.verbose("expected '%s', got '%s'" % (expected, commit[0]))
        else:
            expected = m.group(1)  # This should be the tag text
            s.status(msg, True)

        return closed, expected

    def verify_tag(s, log, expected):
        # Check: Make sure the commit corresponds to the tag.
        #        Only runs if we have the expected tag.
        #
        # **NOTE: There can be multiple tags associated with the specific commit.
        #
        tag_found = False
        # '~' are illegal characters in tags, and shall be replaced by an '_'
        expected = expected.replace("~", "_")
        msg = "correct tag (%s)" % expected
        s.verbose("closing commit sha1: %s" % log["commits"][0]["sha1"])
        try:
            tags = Git.describe(exact_match=log["commits"][0]["sha1"])
        except GitError as e:
            eout(colored(e.msg, "red"))
            tags = {}
        for tag in tags:
            if tag == expected:
                s.status(msg, True)
                tag_found = True
                break
        if not tag_found:
            s.status(msg, False)  # the specified commit.
            s.verbose("unable to find any tag that matched (%s) on the last commit " % (expected))
        else:
            # Verify tag has been pushed!
            msg = "tag pushed"
            try:
                branch = Git.remote()
                status, result = run_command("git ls-remote --tags %s %s" % (branch, expected))
                if status == 0 and expected in result[0]:
                    s.status(msg, True)
                else:
                    s.status(msg, "warning")
                # Verify tag signature
                msg = "tag signed"
                status, result = run_command("git tag -v %s" % expected)
                if status == 0:
                    s.status(msg, True)
                else:
                    s.status(msg, "warning")
            except GitError as e:
                eout(colored(e.msg, "red"))

    def verify_changelog_nomisc(s):
        # Verify that no "Miscellaneous {upstream,Ubuntu,whatever} changes"
        # entries were inserted by debian/scripts/misc/git-ubuntu-log
        msg = 'no "Miscellaneous" entries'
        changelog = Debian.changelog()
        content = changelog[0]["own-content"]
        for line in content:
            m = re.match("\* Miscellaneous .* changes$", line.strip())
            if m:
                s.status(msg, False)
                stdo(colored("\t\t" + line + "\n", "red"))
                return
        s.status(msg, True)

    def verify_changelog_bugs(s):
        changelog = Debian.changelog()
        changelog_bugs = changelog[0]["own-bugs"]
        changelog_series = changelog[0]["series"]
        changelog_source_package = changelog[0]["package"]

        tracker = None

        for bug in changelog_bugs:
            # Error on private or invalid bugs
            try:
                lp_bug = s.lp.bugs[bug]
            except:  # noqa (E722 Do not use bare `except`)
                s.status("LP: #%s: invalid/private bug number" % bug, False)
                continue

            # Ignore kernel-release-tracking-bug's
            if "kernel-release-tracking-bug" in lp_bug.tags:
                tracker = lp_bug
                continue

            # Ignore LP: #1786013 (Packaging resync)
            if bug == "1786013":
                continue

            # check bug tasks, is series/package/status correct?
            is_targeted_to_package = False
            is_targeted_to_series = False
            is_fix_committed = False
            for task in lp_bug.bug_tasks:
                task_display_name = task.bug_target_display_name.lower()
                # if the display name 'linux (ubuntu X)' matches our package continue
                if changelog_source_package in task_display_name:
                    is_targeted_to_package = True
                    # if the display name contains the series, or we are devel continue
                    if (changelog_series in task_display_name) or (
                        changelog_series == s.lp_devel_series.displayname.lower()
                    ):
                        is_targeted_to_series = True
                        # if we are on a devel or series targeted task check status of that task
                        if task.status == "Fix Committed":
                            is_fix_committed = True

            # display status based on results
            if not is_targeted_to_package:
                s.status("LP: #%s is not package %s" % (bug, changelog_source_package), False)
            if not is_targeted_to_series:
                s.status("LP: #%s is not series %s" % (bug, changelog_series), "warning")
            if not is_fix_committed:
                s.status("LP: #%s is not fix committed" % bug, "warning")

        return tracker

    def verify_changelog_commits(s):
        # Verify possible issues with the commit subjects added to
        # the changelog.
        msg = "changelog commits subject"
        changelog = Debian.changelog()
        content = changelog[0]["own-content"]
        for line in content:
            # The commit subject comes after the LP bug title and
            # begins with '    - <subject>'
            m = re.match("^- (.*)", line.strip())
            if m:
                subject = m.group(1)
                # Consider normal not starting with '[PATCH]'
                # or not having a special char as the first char
                # other than '[{/<_'
                if subject.startswith("[PATCH]") or not re.match("[a-zA-Z0-9\[{/<_]", subject):
                    s.status(msg, "warning")
                    s.status(subject, "warning")
                    return

                # Check to make sure this commit message is properly formatted
                # to include the upstream source for derivative kernels
                s.verify_upstream_source(subject)

        s.status(msg, True)

    def verify_tracker_bug(s, bug):
        if bug is None:
            s.status("No tracker bug found", "warning")
            return
        s.status("Tracker bug found", bug.id)

    def verify_content(s):
        changelog = Debian.changelog()
        content = changelog[0]["content"]

        # It's important that there be a single blank line at the beginning of
        # the content. (after the package/version/pocket line)
        #
        ei = 1
        et = []
        error_text = "There should be one and only one blank line following the package/version/pocket line."

        test = content[0].strip()
        if test != "":  # Should be a blank line
            s.status("content [%d]" % ei, False)
            ei += 1
            et.append(error_text)

        test = content[1].strip()
        if test == "":  # Should not be a blank line
            s.status("content [%d]" % ei, False)
            ei += 1
            et.append(error_text)

        # The "Final" line in the version content should be a line that starts
        # with two dashes, has an email address and a date/time stamp.
        #
        cl = len(content)
        error_text = (
            "The final lines of a new changelog block should be\n a single blank line, "
            'a "signature" line, and a final blank line.'
        )

        if content[cl - 4] == "":  # Should NOT be a blank line
            s.status("final commit content [%d]" % ei, False)
            ei += 1
            et.append(error_text)

        if content[cl - 3] != "":  # Should be a blank line
            s.status("final commit content [%d]" % ei, False)
            ei += 1
            et.append(error_text)

        # Should be the "signature" line
        m = re.match("^ -- (.*) <(.*)@(.*)> .*$", content[cl - 2])
        if m:
            if "canonical.com" not in m.group(3):
                error_text = "The email address on the signature line does not contain 'canonical.com'."
                s.status("final commit content [%d]" % ei, False)
                ei += 1
                et.append(error_text)
        else:
            error_text = "Failed to parse the signature line."
            et.append(error_text)
            s.status("final commit content [%d]" % ei, False)
            ei += 1

        if content[cl - 1] != "":  # Should be a blank line
            s.status("final commit content [%d]" % ei, False)
            et.append(error_text)

        if et != []:
            print(" ")
            ei = 1
            for e in et:
                print(" [%d] %s" % (ei, e))
                ei += 1
        else:
            s.status("final commit content", True)

    def verify_upstream_source(s, subject):
        # If there is no debian.<flavour>/upstream-* there is nothing to check
        if not bool(s.upstream):
            return

        # Skip if this is the -generic kernel
        if "upstream-stable" in s.upstream:
            return

        # Search for the commit with a matching subject, expect one back.
        log = Git.log(num=1, grep=subject)

        try:
            commit = log["commits"][0]
            sha1 = commit["sha1"][:12]
        except (IndexError, KeyError):
            eout(colored("Unable to find commit", "red"))
            return

        # Check to make sure this isn't an UBUNTU commit
        for line in commit["text"]:
            if line.find(subject) != -1:
                if line.lstrip().startswith("UBUNTU:"):
                    return

        if "upstream_sha1" in commit:
            s.status("commit {0} has upstream source".format(sha1), True)
            return

        s.status("commit {0} has upstream source".format(sha1), False)

    def verify_linux_meta(s, cl0, cl1):
        cl0_build = cl0["upload-number"]

        cl1_build = cl1["upload-number"]

        while True:
            # Check: Make sure the current version is correctly incremented from the previous one.
            #
            msg = "build number (%d)" % (int(cl1_build) + 1)
            if int(cl0_build) != int(cl1_build) + 1:
                s.status(msg, False)
                s.verbose("expected %d but got: %d" % (int(cl1_build) + 1, int(cl0_build)))
                break
            s.status(msg, True)

            break

        # Check: Make sure the commit of the version is the correct text.
        #
        log = Git.log(num=1)  # Only interested in the last commit

        commit = []
        for line in log["commits"][0]["text"]:
            line = line.strip()
            if line != "":
                if "Signed-off-by" not in line:
                    commit.append(line)

        version = "%s.%s.%s" % (cl0["linux-version"], cl0["ABI"], cl0["upload-number"])
        (closed, expected) = s.verify_closing_commit(cl0, commit, version)

        if closed:
            s.verify_tag(log, expected)

        s.verify_content()

    def verify_dir(s):
        try:
            print(os.path.basename(os.getcwd()) + ":")

            # Check: Are we currently in a git repository?
            #
            if not Git.is_repo():
                raise AppError("This script can only be run from within a git repository.")
            s.status("is valid git repo", True)

            branch = Git.current_branch()
            s.verbose("%15s : %s" % ("branch", branch))

            changelog = Debian.changelog()

            cl0 = changelog[0]
            if s.args.verbose:
                s.verbose("\n")
                s.verbose("New version information:")
                for k in cl0:
                    s.verbose("%15s : %s" % (k, cl0[k]))

            cl1 = changelog[1]
            if s.args.verbose:
                s.verbose("\n")
                s.verbose("Previous version information:")
                for k in cl1:
                    s.verbose("%15s : %s" % (k, cl1[k]))

            package_type = False
            series = s.kernel_series.lookup_series(codename=cl0["release"])
            if series is not None:
                for source in series.sources:
                    for package in source.packages:
                        if package.name == cl0["package"]:
                            package_type = package.type
            if package_type == "main":
                s.verify_linux(cl0, cl1)
            elif package_type is not False:
                s.verify_linux_meta(cl0, cl1)
            else:
                stdo(colored("Unrecognised package: %s\n" % cl0["package"], "yellow"))
                stdo(colored("    Trying non-kernel package verification...\n", "yellow"))
                s.verify_linux_meta(cl0, cl1)
                stdo(colored("    Trying kernel package verification...\n", "yellow"))
                s.verify_linux(cl0, cl1)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle all application errors
        #
        except AppError as e:
            eout(colored(e.msg, "red"))

        except DebianError as e:
            eout(colored(e.msg, "red"))

        except GitError as e:
            eout(colored(e.msg, "red"))

    # main
    #
    def main(s):
        if s.args.current:
            s.verify_dir()
        else:
            try:
                handle = Handle().lookup_set(os.getcwd())

                for tree in handle.trees:
                    os.chdir(tree.directory)
                    s.verify_dir()

            except HandleError as e:
                eout(colored(e, "red"))

        return s.failed


if __name__ == "__main__":
    # Command line argument setup and initial processing
    #
    app_description = """
Verify various parameters (eg. release/package names, ABI, git tags, LP bugs)
of main and dependent kernel packages for release.
"""

    app_epilog = """
Examples:
  $ cranky verify-release-ready

"""

    parser = ArgumentParser(
        description=app_description,
        formatter_class=RawDescriptionHelpFormatter,
        epilog=app_epilog,
        prog="cranky verify-release-ready",
    )
    parser.add_argument(
        "-c",
        "--current",
        action="store_true",
        default=False,
        help="Only verify current package",
    )
    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        default=False,
        help="Print out a lot of messages about what is going on.",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        default=False,
        help="Print out more an usual amount of information about what is happening.",
    )
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.debug:
        basicConfig(level=DEBUG, format=log_format)
    else:
        basicConfig(level=INFO, format=log_format)

    app = VerifyReleaseReady(args)
    exit(app.main())

# vi:set ts=4 sw=4 expandtab:
