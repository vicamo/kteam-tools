#!/usr/bin/env python3
#
# cranky rmadison: An rmadison-like script for querying the Ubuntu archives
#                  and private PPAs.
#
# Copyright (C) 2018, Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

import argparse
import logging
import os
import sys

from launchpadlib.launchpad import Launchpad

from crl.handle import Handle, HandleError
from ktl.log import cerror


def pocket_order(val):
    """
    Return a sort order number based on the pocket name
    """
    if "-proposed" in val[2]:
        return 3
    if "-updates" in val[2]:
        return 2
    if "-security" in val[2]:
        return 1
    return 0


def rmadison_lp(handle_set, show_all=False, show_ext=False, show_pocket=None):
    """
    Query Launchpad for source package information
    """
    series = handle_set.series.codename
    routing = handle_set.source.routing
    packages = [package.name for package in handle_set.source.packages]

    # Temporarily disable logging of level INFO to silence launchpadlib and
    # then reenable logging again
    logging.disable(logging.INFO)
    lp = Launchpad.login_with("cranky", "production", version="devel")
    logging.disable(logging.NOTSET)

    lp_series = lp.distributions["ubuntu"].getSeries(name_or_version=series)

    result = []
    for route in routing:
        dest = route[0]
        count = 0
        for ppa, pocket in route[1]:
            count += 1
            dest_n = dest + '#' + str(count)

            if show_pocket and dest != show_pocket:
                # Skip it if a pocket was provided but the route doesn't match
                continue

            elif ((dest not in ("release", "security", "updates", "proposed") and
                 not show_all)):
                # This is a non-standard PPA and we didn't ask for it, so
                # skip it
                continue

            lp_archive = lp.archives.getByReference(reference=ppa)
            if not lp_archive:
                # Archive not found (private?)
                continue

            for package in sorted(packages):
                lp_sources = lp_archive.getPublishedSources(source_name=package,
                                                            distro_series=lp_series,
                                                            pocket=pocket,
                                                            exact_match=True,
                                                            order_by_date=True,
                                                            status="Published")
                if not lp_sources:
                    # Nothing found in this PPA/pocket
                    continue

                # The package version
                package_version = lp_sources[0].source_package_version

                # Generate the pocket name to display
                if dest == "release":
                    pocket_name = series
                elif dest in ("security", "updates", "proposed"):
                    pocket_name = "%s-%s" % (series, dest)
                else:
                    pocket_name = "%s (ppa:%s)" % (series, dest_n)

                # The basic data that we always display
                route_data = [(package, pocket_order(pocket_name), count), package, package_version, pocket_name, "source"]

                if show_ext:
                    # Pull additional (non-rmadison) data from launchpad
                    route_data.append(lp_sources[0].date_published.strftime("%Y-%m-%d %H:%M"))

                result.append(route_data)

    # Sort the list by package and pocket names, and strip the order key.
    return [a[1:] for a in sorted(result)]


def print_table(data, show_ext=False, script=False):
    """
    Print the package list
    """
    if script:
        # Dump all the data without formatting it into a fancy table
        for row in data:
            print(' '.join(row))
        return

    # Add a header if we show extended info
    if show_ext:
        data.insert(0, ["Name", "Version", "Pocket/PPA", "Type",
                        "Date Published"])

    # Determine the max width of each column
    widths = [len(max(col, key=len)) for col in zip(*data)]

    # Insert a header separator
    if show_ext:
        data.insert(1, ["-" * w for w in widths])

    # Print the formatted data
    for row in data:
        print('|'.join((" {:%d} " % w).format(r) for w, r in zip(widths, row)))


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    desc = """
Query the Ubuntu archives and private PPAs for kernel source package
information and print the data in an 'rmadison'-like format.

For regular distribution packages, the standard Ubuntu archive is queried. For
special kernel packages like ESM or private packages, the relevant private PPAs
are queried.

Note: That the user who runs this script needs to have sufficient Launchpad
privileges to query the various private PPAs.
"""

    epilog = """
Examples:
  $ cranky rmadison bionic:linux
      Print information for the source packages that make up the set of Bionic
      linux kernel packages.

  $ cranky rmadison -e -a bionic:linux-ibm-gt
      Print all information from all archives and PPAs.

  $ cranky rmadison -p updates groovy:linux-aws
      Print information for the source packages that make up the set of Groovy
      linux-aws kernel packages from the -updates pocket.
"""

    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog=epilog, prog="cranky rmadison")
    parser.add_argument("handle", nargs='?', help="A kernel package handle "
                        "in the form of <series>:<source>. If not specified, "
                        "the information is retrieved from the current git "
                        "repo.")
    parser.add_argument("-a", "--show-all", action="store_true",
                        help="Show source package information from all "
                        "routing destinations.")
    parser.add_argument("-e", "--show-extended", action="store_true",
                        help="Show extendend source package information in "
                        "addition to the standard rmadison data")
    parser.add_argument("-s", "--script", action="store_true",
                        help="Dump the data in a format suitable for "
                        "subsequent consumption by a script, i.e., don't "
                        "render a fancy table")
    parser.add_argument('-p', '--pocket', choices=['build', 'release',
                                                   'security', 'updates',
                                                   'proposed'],
                        help='Only show source package information from the '
                        'provided pocket.')
    args = parser.parse_args()

    try:
        handle_set = Handle().lookup_set(args.handle if args.handle else
                                         os.getcwd(), validate=False)
    except HandleError as e:
        cerror(e)
        sys.exit(1)

    # Query the Launchpsd PPAs for the packages referenced by the provided
    # handle and print the result in an 'rmadison'-like table
    print_table(rmadison_lp(handle_set, show_all=args.show_all,
                            show_ext=args.show_extended,
                            show_pocket=args.pocket),
                show_ext=args.show_extended, script=args.script)
