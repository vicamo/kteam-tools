#!/bin/bash -eu

function out()
{
	local rc=$?

	trap - EXIT INT TERM HUP

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function build_src()
{
	local dir=$1 session=$2 current=$3
	local -a extra_opts=()
	[ -n "$4" ] && IFS=" " read -r -a extra_opts <<< "$4"

	if [ "${current}" -eq 1 ] && [ "${PWD}" != "${dir}" ] ; then
		# Skip the build of this source package if --current is specified and
		# the current directory doesn't match the package directory
		return
	fi

	(
		cd "$dir" || exit 1

		git clean -x -f -d
		schroot -r -c "$session" -- fakeroot debian/rules clean
		schroot -r -c "$session" -- dpkg-buildpackage -S -i -I -uc -us -d "${extra_opts[@]}"
	)
}

function usage()
{
	cat <<EOF
Usage: cranky build-sources [-c] [-h] [--no-orig] [--build-opts OPTS ...] [--cycle CYCLE] [handle]

Build all source packages for the specified series and source as specified in
kernel-series.yaml.

Positional arguments:
  handle         Handle to a kernel source tree, either a path to a kernel
                 source tree or a handle in <series>:<package> format.
                 If not given the current working directory is used.

Optional arguments:
  -c, --current  Only build the source package for the current working
                 directory.
  -h, --help     Show this help message and exit.

  --no-orig      Does not require an orig file.

  --build-opts   Supply additional options for dpkg-buildpackage when building
                 the specified source package type. OPTS is a string of the
                 format "type:opts". This option can be supplied multiple times
                 to supply options for multiple package types.

  --cycle        Work against a specific cycle, defaults to the tree cycle
                 when handle is a directory and the tip otherwise.

Examples:
  $ cranky build-sources
      Build all source packages for the kernel source tree in the current
      working directory.

  $ cranky build-sources bionic:linux
      Build all source packages defined under the bionic:linux source in
      ktl/kernel-series.yaml. Finds the source trees based on 'package-path'
      from the cranky config file.

  $ cranky build-sources --current
      Build only the source package for the current working directory.

  $ cranky build-sources --build-opts "main:-sa"
      Build source packages for the kernel source tree in the current
      directory, passing '-sa' to dpkg-buildpackage to include the orig
      tarball in the upload.
EOF
}

require_orig="--source-option=-sp"
current=0
cycle=()
handle=${PWD}
declare -A build_opts=()

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-c|--current)
			current=1
			;;
		-h|--help)
			usage
			exit
			;;
		--no-orig)
			require_orig=""
			;;
		--build-opts)
			shift
			IFS=':' read -r type opts <<< "$1"
			if [ -v "build_opts[$type]" ]; then
				echo "$P: Only a single --build-opts per type should be provided!" >&2
				exit 2
			fi
			build_opts[$type]="$opts"
			;;
		--cycle)
			shift
			cycle=("--cycle" "${1}")
			;;
		-*)
			usage
			exit 2
			;;
		*)
			if [ ${#} -gt 1 ] ; then
				usage
				exit 2
			fi
			handle=${1}
			break
			;;
	esac
	shift
done

trap out EXIT INT TERM HUP

sources=$("$C" shell-helper source-packages-path -t "${cycle[@]}" "$handle")
if [ -z "$sources" ] ; then
	exit 1
fi

session=$("$C" chroot map-session "$handle")
if [ -z "$session" ] ; then
	echo "$P: sources session not available -- run: $C chroot create-session \"$handle\"" >&2
	exit 1
fi

# Build the source.
while read -r source
do
	IFS=' ' read -r type path <<< "$source"
	opts=""
	if [ -n "${build_opts[$type]:-}" ] ; then
		opts=${build_opts[$type]}
	fi
	if [ "$type" = "main" ] ; then
		opts="$opts $require_orig"
	fi
	build_src "$path" "$session" "$current" "$opts"
done <<< "$sources"
