#!/usr/bin/env python3
#
# Checkout the trees that make up a set of kernel packages
#

import argparse
import logging
import os
import sys
import datetime

from crl.git import GitHandleSet, GitError
from crl.config import Config
from crl.cycle_ref import CycleRef, Git
from crl.exceptions import CrankyException
from crl.handle import Handle, HandleError
from ktl.log import cdebug, cerror, cnotice, Clog


def checkout_repos(handle, reference=None, dissociate=False, depth=None, crd=None, nc=False, cycle=None):
    """
    Clone the repos that make up the set of kernel packages
    """
    Clog.color = not nc

    # Cycle through the trees and clone/update the package specific
    # repositories.
    ghs = GitHandleSet(handle)

    cnotice("Codename: {}".format(ghs.codename))
    cnotice("Source:   {}".format(ghs.source.name))

    summary = []
    for gh in ghs:
        repo_dir = gh.directory

        # Make the parental directories.
        if not os.path.exists(os.path.dirname(repo_dir)):
            os.makedirs(os.path.dirname(repo_dir))

        # Update an existing repo or otherwise clone it
        if os.path.exists(os.path.join(repo_dir, '.git')):
            gh.update_remote(gh.remote, gh.get_url())
        else:
            gh.clone(reference, dissociate, depth)

        # Configure the git repo. Do this every time in case things have
        # changed, for example when a release transitions to ESM.
        gh.configure()

        if crd:
            gh.fetch_security(fetch=True)

    for gh in ghs:
        pkg        = gh.package
        remote     = gh.remote
        rmt_branch = gh.remote_branch
        branch     = gh.get_cranky_branch_name(crd=(crd and crd.isoformat()), cycle=cycle)
        rmt_ref    = gh.remote_ref(remote, rmt_branch)

        if cycle:
            # Generate operates on the entire set so we only
            # need to run it once.
            is_rebuilt = False
            if not is_rebuilt:
                CycleRef.generate(ghs.handle, remote=gh.remote)
                is_rebuilt = True

            cycle_ref = CycleRef.get_cycle_ref(gh, cycle)
            if not cycle_ref:
                raise CrankyException("Aborting: no cycle '{}' found for {}.".format(cycle, pkg.name))
            rmt_ref = "refs/tags/{}".format(cycle_ref.tag)

        if crd:
            try:
                security_ref = gh.remote_ref('security', branch)
                gh.checkout(security_ref, branch)
            except:
                gh.checkout(rmt_ref, branch)
        else:
            gh.checkout(rmt_ref, branch)

        if crd:
            gh.set_upstream(branch, 'security')

        # Add info for the summary
        summary.append({"name": pkg.name, "dir": gh.directory, "remote": remote,
                        "branch": branch})

    # Print the summary
    cnotice("Summary:")
    for s in summary:
        cnotice("  Repo '{}' in directory '{}' (branch '{}')".format(
                s["name"], s["dir"], s["branch"]))


def expanduser(path):
    if path:
        path = os.path.expanduser(path)
    return path


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    # Get the config options from file
    config = Config()
    if config.lookup('clone', None) is not None:
        cerror("Deprecated 'clone' section found in the .cranky config file.")
        cerror("You need to remove it or rename it to 'checkout'.")
        sys.exit(1)
    config_cmd = config.lookup('checkout', {})

    desc = """
Checkout the repos (typically 'linux', 'linux-meta', and 'linux-signed') that
make up a set of Ubuntu kernel packages. The repos are cloned first, if they
don't yet exist locally. The local directories where the repos are cloned into
are specified in the cranky config file (see 'package-path' in the
'Configuration file' section below).
"""

    epilog = """
Examples:
  $ cranky checkout xenial:linux
      Checkout the 'linux', 'linux-meta' and 'linux-signed' repositories for
      Xenial.

  $ cranky checkout --reference /home/work/linux-2.6 xenial:linux
      Same as above but use a local clone of Linus' upstream repo as a git
      reference.

  $ cranky checkout xenial:linux-aws
      Checkout the 'linux-aws', 'linux-meta-aws' and 'linux-signed-aws'
      repositories for the Xenial AWS variant.

  $ cranky checkout xenial:linux-raspi2
      This variant doesn't have stand-alone repos but instead resides on
      branches of the main 'linux', 'linux-meta' and 'linux-signed' repos. See
      below for more details.

  $ cranky checkout --depth 1 xenial:linux-raspi2
      Checkout a shallow clone of all repos for this handle.

  $ cranky checkout --crd 2018-01-07 xenial:linux
      Checks out as CRD-2018-01-07+master branch.
      It also sets 'security' as the upstream remote.

  $ cranky checkout --cycle 2023.01.30 xenial:linux
      Checkout the 'linux', 'linux-meta' and 'linux-signed' repositories for
      Xenial at the latest respin for the 2023.01.30 cycle.

Notes:
  Some kernel variants have their own repos (like aws, for example) whereas
  others simply reside on branches of the main repos (like raspi2). Depending
  on the 'package-path' configuration in your .cranky config file you'll end
  up with one local clone per repo or with individual clones for the different
  variants which means you'll have multiple local copies of the same repo.

Configuration file:
  ~/.cranky is a yaml format configuration file where the optional commandline
  options can be specified. Note that options specified via the commandline
  take precedence over options from the configuration file.

  Example ~/.cranky section:
  ---
    checkout:
      reference: '/home/repo/linux-2.6'
      dissociate: true
    package-path:
      default: ~/git/ubuntu/{series}/{package}
"""

    help_handle = """
Handle to a kernel source tree in <series>:<package> format.
"""

    help_reference = """
Obtain objects from an existing local repository to speed up the cloning
process. This is a git clone option, check 'git help clone' for more details.
Note that without using --dissociate, the referenced repo *must not* be deleted
otherwise the cranky checkout'd repo will get corrupted.
"""

    help_dissociate = """
Borrow the objects from the referenced local repository only to reduce network
traffic. This is a git clone option, check 'git help clone' for more details.
"""

    help_nc = '''No Colour. By default the debug output that is printed comes out in
multiple colours to help with the debugging. This option disables that.
'''

    help_depth = """
Perform a shallow clone with --depth <int>
"""

    help_crd = """
Checks out branches as CRD-{DATE}+{BRANCH} and sets upstream to 'security'.
"""

    help_cycle = """
Checks out the repo as it was for the specified cycle.
Example:
    --cycle 2022.08.08

    Will checkout create a branch cranky/$cycle at the newest tag belonging
    to this cycle.
"""

    formatter = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=formatter,
                                     epilog=epilog,
                                     prog="cranky checkout")
    parser.add_argument("handle", help=help_handle)
    parser.add_argument("-r", "--reference",
                        default=expanduser(config_cmd.get('reference', None)),
                        help=help_reference)
    parser.add_argument("-d", "--dissociate", action="store_true",
                        default=config_cmd.get('dissociate', False),
                        help=help_dissociate)
    parser.add_argument("--depth",
                        default=None,
                        help=help_depth)
    parser.add_argument("-C", "--crd",
                        default=None,
                        type=datetime.date.fromisoformat,
                        help=help_crd)
    parser.add_argument('--nc',
                        action='store_true',
                        default=False,
                        help=help_nc)
    parser.add_argument("--cycle", help=help_cycle)

    try:
        checkout_repos(**vars(parser.parse_args()))
    except (HandleError, GitError, CrankyException) as e:
        cerror(e)
        sys.exit(1)
