#!/usr/bin/env python3
#
# Perform checks on source packages and generate diffs for review
#

import argparse
import logging
import subprocess
import os
import sys
from glob import glob
import tempfile
import re


def dpkg_compare_versions(v1, op, v2):
    cmd = ["dpkg", "--compare-versions", v1, op, v2]
    ret = subprocess.run(cmd)
    return ret.returncode == 0


def dpkg_extract(dsc_path, dest_path):
    cmd = ["dpkg-source", "-x", dsc_path, dest_path]
    sp = subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
    stderr = sp.communicate()[1].decode()

    signed_headers = False
    if sp.returncode == 0:
        with open(dsc_path) as ifd, open(os.path.join(dest_path, "DSC"), "w") as ofd:
            for line in ifd:
                if signed_headers:
                    if line == "\n":
                        signed_headers = False
                    continue
                if line.startswith("-----BEGIN PGP SIGNED MESSAGE-----"):
                    signed_headers = True
                    continue
                if line.startswith("-----BEGIN PGP SIGNATURE-----"):
                    break
                print(line, end="", file=ofd)

    return (sp.returncode, stderr)


def normalize_control_file(path, source_pkg, ver, abi, upload):
    if not os.path.exists(path):
        return

    verabi = ver + abi
    fullver = verabi + "." + upload
    basever = verabi + "." + upload.rsplit("+", 1)[0]

    fulldep = "(>= " + verabi + "." + upload + ")"
    basedep = "(>= " + verabi + "." + upload.split("+")[0] + ")"

    with open(path, "r") as cfile:
        cfile_data = cfile.read()
    cfile_data = cfile_data.replace(basedep, "(>= BASEDEP)")
    cfile_data = cfile_data.replace(fulldep, "(>= FULLDEP)")
    cfile_data = cfile_data.replace(fullver, "FULLVER")
    cfile_data = cfile_data.replace(basever, "BASEVER")
    cfile_data = cfile_data.replace(verabi, "VERABI")
    verabi2 = verabi.replace("." + abi, "-" + abi)
    cfile_data = cfile_data.replace(verabi2, "VERABI")
    cfile_data = cfile_data.replace(ver, "VERSION")
    cfile_data = re.sub(r"\n [0-9a-f]{32} \d+ " + source_pkg, "\n MD5SUM SIZE " + source_pkg, cfile_data)
    cfile_data = re.sub(r"\n [0-9a-f]{40} \d+ " + source_pkg, "\n SHA1SUM SIZE " + source_pkg, cfile_data)
    cfile_data = re.sub(r"\n [0-9a-f]{64} \d+ " + source_pkg, "\n SHA256SUM SIZE " + source_pkg, cfile_data)
    with open(path, "w") as cfile:
        cfile.write(cfile_data)


def normalize_unsorted_file(path):
    with open(path, "r") as ufile:
        ufile_data = ufile.readlines()
    ufile_data.sort()
    with open(path, "w") as ufile:
        ufile.write("".join(ufile_data))


def normalize_abi_file(path):
    afile_data = []
    with open(path, "r") as afile:
        for line in afile:
            bits = line.split()
            if len(bits) > 2:
                bits[2] = "-hash-"
            afile_data.append(" ".join(bits) + "\n")
    with open(path, "w") as afile:
        afile.write("".join(sorted(afile_data)))


def normalize_tree(path, source_pkg, ver, abi, upload):
    normalize_control_file(os.path.join(path, "DSC"), source_pkg, ver, abi, upload)
    normalize_control_file(os.path.join(path, "debian", "control"), source_pkg, ver, abi, upload)
    for control_file in (
        glob("{}/debian/control.stub".format(path))
        + glob("{}/debian.*/control.stub".format(path))
        + glob("{}/debian/d-i/kernel-versions".format(path))
        + glob("{}/debian.*/d-i/kernel-versions".format(path))
        + glob("{}/debian/control.common".format(path))
        + glob("{}/debian/files.json".format(path))
    ):
        normalize_control_file(control_file, source_pkg, ver, abi, upload)
    # Detect ABI location.
    abi_dirs = []
    for abi_path in glob("{}/debian.*/abi/abiname".format(path)) + glob("{}/debian.*/abi/*/abiname".format(path)):
        abi_dirs.append(os.path.dirname(abi_path))
    for abi_path in abi_dirs:
        for unsorted_file in glob("{}/*/*.modules".format(abi_path)) + glob("{}/fwinfo".format(abi_path)):
            normalize_unsorted_file(unsorted_file)
        for abi_file in glob("{}/*/*".format(abi_path)):
            if "." in os.path.basename(abi_file):
                continue
            normalize_abi_file(abi_file)

    # Normalise any ancillaries.
    for ancillary_dir in glob("{}/debian/ancillary/*".format(path)):
        if not os.path.isdir(ancillary_dir):
            continue
        normalize_tree(ancillary_dir, source_pkg, ver, abi, upload)


def dsc_source_version(dsc_file):
    basename = os.path.basename(dsc_file)
    basename = os.path.splitext(basename)[0]
    return basename.split("_")[0:2]


def review_dscs(prev_dsc_file, dsc_file, output=None):
    (prev_source_pkg, prev_version) = dsc_source_version(prev_dsc_file)
    (source_pkg, version) = dsc_source_version(dsc_file)

    # Matches a kernel version string in the format of
    # VERSION-ABI.UPLOAD. The string 4.15.0-34.37 would match as
    # follows:
    #
    #  VERSION = 4.15.0
    #  ABI = 34
    #  UPLOAD = 37
    verabi_re = re.compile(r"([0-9]+\.[0-9]+\.[0-9]+[-.])([0-9]+)\.(.+)")

    m = verabi_re.match(version)
    (ver, abi, upload) = m.group(1, 2, 3)

    m = verabi_re.match(prev_version)
    (prev_ver, prev_abi, prev_upload) = m.group(1, 2, 3)

    if output:
        diff_path = output
    else:
        diff_dir = os.path.dirname(os.path.realpath(dsc_file))
        diff_path = os.path.join(diff_dir, "%s_%s.debdiff" % (source_pkg, version))

    logger.info("Generating %s" % diff_path)
    logger.info("Comparing against version %s" % prev_version)

    with tempfile.TemporaryDirectory() as tmpdir, open(diff_path, "w") as outfile:
        prev_dir = source_pkg + "_" + prev_version
        new_dir = source_pkg + "_" + version
        if prev_dir == new_dir:
            new_dir += "_B"
        prev_path = os.path.join(tmpdir, prev_dir)
        new_path = os.path.join(tmpdir, new_dir)

        (ret, stderr) = dpkg_extract(prev_dsc_file, prev_path)
        if ret != 0:
            logger.error("Failed to extract %s." % prev_dsc_file)
            logger.error("Output from dpkg-source:")
            print(stderr, end="")
            sys.exit(1)
        normalize_tree(prev_path, source_pkg, prev_ver, prev_abi, prev_upload)

        (ret, stderr) = dpkg_extract(dsc_file, new_path)
        if ret != 0:
            logger.error("Failed to extract %s." % dsc_file)
            logger.error("Output from dpkg-source:")
            print(stderr, end="")
            sys.exit(1)
        normalize_tree(new_path, source_pkg, ver, abi, upload)

        cmd = [
            "git",
            "diff",
            "--no-index",
            "--no-prefix",
            "--stat=500",
            "--stat-graph-width=10",
            "-p",
            prev_dir,
            new_dir,
        ]
        sp = subprocess.Popen(cmd, stdout=outfile, stderr=subprocess.PIPE, cwd=tmpdir)
        stderr = sp.communicate()[1].decode()
        if sp.returncode != 0 and sp.returncode != 1:
            logger.error("Failed to diff trees. Output from 'git diff':")
            print(stderr, end="")
            sys.exit(1)


def review(prev_dsc_dir="", changes_files=[], output=None):
    prev_dscs = glob("%s/*.dsc" % prev_dsc_dir)

    count = 0
    for changes_file in changes_files:
        count += 1
        if not os.path.exists(changes_file):
            logger.error("%s does not exist" % changes_file)
            sys.exit(1)

        (source_pkg, version) = dsc_source_version(changes_file)
        source_pkg = re.sub(r"-[0-9]+\.[0-9]+$", "", source_pkg)

        (prev_dsc_file, prev_version) = (None, None)
        for dsc_file in prev_dscs:
            (dsc_source, dsc_version) = dsc_source_version(dsc_file)
            dsc_source = re.sub(r"-[0-9]+\.[0-9]+$", "", dsc_source)

            # Don't consider files for other source packages ...
            if dsc_source != source_pkg:
                continue
            # ... or files with the same or a newer version
            if dpkg_compare_versions(version, "le", dsc_version):
                continue

            if not prev_version or dpkg_compare_versions(dsc_version, "gt", prev_version):
                (prev_dsc_file, prev_version) = (dsc_file, dsc_version)

        if not prev_dsc_file:
            logger.error("Previous dsc file not found for %s" % changes_file)
            sys.exit(1)

        cmd = ["dcmd", "--dsc", changes_file]
        dsc_file = subprocess.check_output(cmd).decode().strip()

        if output:
            output_i = output.format(count=count, N="-" + count if count > 1 else "")
        else:
            output_i = None
        review_dscs(prev_dsc_file, dsc_file, output=output_i)


logger = logging.getLogger(__name__)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    desc = """
Run final checks on a source package set, and generate a set of diffs from the
previous package versions for review.
"""

    epilog = """
Examples:
  $ cranky review *.changes
      Run final checks against the specified .changes files. Debdiffs will be
      generated in the current directory for reviewing changes made since the
      previous package version. The source packages for previous package
      versions are expected to be in the current directory.

  $ cranky review --prev-dsc-dir=/path/to/prev *.changes
      Same as the above, but looks for previous source package versions in the
      specified path.
"""

    parser = argparse.ArgumentParser(
        description=desc, formatter_class=argparse.RawDescriptionHelpFormatter, epilog=epilog, prog="cranky review"
    )
    parser.add_argument("changes_files", nargs="+", help=".changes files for the package set")
    parser.add_argument("-p", "--prev-dsc-dir", default=".", help="Path to previous source packages")
    parser.add_argument("-o", "--output", default=None, help="Control the output filename")
    args = parser.parse_args()
    if (
        len(args.changes_files) == 2
        and args.changes_files[0].endswith(".dsc")
        and args.changes_files[1].endswith(".dsc")
    ):
        review_dscs(args.changes_files[0], args.changes_files[1], args.output)
    else:
        review(**vars(args))
