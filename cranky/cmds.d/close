#!/bin/bash -eu
export LC_ALL=C.UTF-8

usage() {
	cat << EOF
Usage: ${P:-$(basename "$0")} [-h|--help] [-d|--dry-run] [-c|--include-config] [-s|--skip-master] [-b BASE_VERSION] [--use-cuc]

Prepare the closing release commit. Include all the changelog entries
in the current release, including the changes from the base
kernel. Also close the changelog entry and check for config changes.

Optional arguments:
  -d, --dry-run         Perform a trial run with no changes made
                        printing the commands instead.
  -c, --include-config  Include config changes in the closing commit.
  -s, --skip-master     Skip master kernel changelog entries (used when
                        bootstraping new kernels).
  -b BASE_VERSION       For derivatives and backports, force the changelog
                        entries to have the base version as provided (used
                        when changing the base derivative version of a
                        backport).
  -h, --help            Show this help message and exit.
  --use-cuc             Use 'cranky update-changelog' instead of in-tree scripts.

Examples:
  Simply close a release:
    \$ cranky close

  Also include any config changes to the closing commit:
    \$ cranky close -c

EOF
}

dry_run=0
commit_configs=0
skip_master_entries=0
base_version=
use_cuc=0
while [ "$#" -gt 0 ]; do
	case "$1" in
		-h|--help)
			usage
			exit 0
			;;
		-d|--dry-run)
			dry_run=1
			;;
		-c|--include-config)
			commit_configs=1
			;;
		-s|--skip-master)
			skip_master_entries=1
			;;
		-b)
			shift
			base_version="$1"
			;;
		--use-cuc)
			use_cuc=1
			;;
		*)
			usage
			exit 2
			;;
	esac
	shift
done

hl() { echo -e "\e[1m$*\e[0m"; }

run() {
	# Quote args for echo or eval
	local quoted=()
	for token; do
		quoted+=( "$(printf '%q' "$token")" )
	done
	# Run
	if [ "$dry_run" -eq 1 ]; then
		hl "DRY RUN: ${quoted[*]}"
	else
		hl "${quoted[*]}"
		"$@"
		echo
	fi
}

DEBIAN=
# shellcheck disable=SC1091
. debian/debian.env

# Check if the "$DEBIAN" directory exists.
if [ ! -d "$DEBIAN" ]; then
	echo "You must run this script from the top directory of this repository."
	exit 1
fi

CONF="$DEBIAN/etc/update.conf"
if [ -f "$CONF" ]; then
	# shellcheck disable=SC1090
	. "$CONF"
fi

# Check if changelog is open
series=$(dpkg-parsechangelog -l"$DEBIAN/changelog" -SDistribution)
if [ "$series" != 'UNRELEASED' ]; then
	echo "The last entry of the changelog is already released."
	exit 1
fi

# Update configs
if [ -d "$DEBIAN/config" ]; then
	run "${C}" fdr clean updateconfigs
	changes=$(git diff HEAD -- "./$DEBIAN/config/")
	if [ "$commit_configs" -eq 0 ] && [ -n "$changes" ]; then
		echo "Config has changed! please, review it and commit."
		exit 1
	fi
fi

# Check for packaging issues
if ! [ -f debian/control ] ; then
	run "${C}" fdr clean
fi
run "${C}" check-packaging

# For normal trees the fact that the update.conf file exists means that they are rebase
# kernels. There are some special trees which started with uc20-efi, which have that
# file because they logically depend on another source but do not have the directory
# which DEBIAN_MASTER points to.
# Skip inserting parent source entries if this is not a rebase tree.
if [ ! -f "$DEBIAN/etc/update.conf" ]; then
	skip_master_entries=1
elif [ "$DEBIAN_MASTER" != "" ] && [ ! -d "$DEBIAN_MASTER" ]; then
	skip_master_entries=1
fi
if [ $skip_master_entries == 0 ]; then
	if [ "$DEBIAN_MASTER" = "" ]; then
		echo "DEBIAN_MASTER should be defined either in $DEBIAN/etc/update.conf or the environment"
		exit 1
	fi

	if [ -z "${base_version}" ]; then
		offset=0
		# If not provided as an option, loop through each entry of the current changelog,
		# searching for an entry that refers to the master version used as base
		# (ie a line containing "[ Ubuntu: 4.15.0-39.42 ]"):
		while true; do
			changes=$(dpkg-parsechangelog -l"$DEBIAN/changelog" -SChanges -c1 -o"$offset")
			if ! [ "$changes" ]; then
				echo "Failed to retrieve base master version from changelog file: $DEBIAN/changelog"
				exit 1
			fi
			base_version=$(echo "$changes" | sed -n -r -e '/^\s.*\[ Ubuntu: ([~0-9.-]*) \]$/{s//\1/p;q}')
			[ "$base_version" ] && break
			offset=$(( offset + 1 ))
		done
	fi

	if [ $use_cuc -eq 1 ] ; then
		run "${C}" update-changelog --changelog "${DEBIAN}"/changelog \
			--from-version "${base_version}" --from-changelog "${DEBIAN_MASTER}"/changelog
	else
		master_version=$(dpkg-parsechangelog -l"${DEBIAN_MASTER}"/changelog -SVersion)
		if ! [ "$master_version" ]; then
			echo "Failed to retrieve current master version from changelog: $DEBIAN/changelog"
			exit 1
		fi
		run ./debian/scripts/misc/insert-ubuntu-changes "$DEBIAN/changelog" "$base_version" "$master_version" \
			"$DEBIAN_MASTER/changelog"
	fi
fi

# Insert local changes
if [ $use_cuc -eq 1 ] ; then
	prev_source=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Source -c 1 -o 1)
	prev_version=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Version -c 1 -o 1)
	prev_tag="Ubuntu${prev_source#linux}-${prev_version}"
	prev_commit=$(git log --format="%H __%s__" | grep -m1 -F "__UBUNTU: ${prev_tag}__" || true)
	if [ -z "${prev_commit}" ] ; then
		echo "WARNING: Unable to find previous release commit. Using the last one." >&2
		prev_commit=$(git log --format="%H __%s" | grep -m1 -F "__UBUNTU: Ubuntu-" || true)
		if [ -z "${prev_commit}" ] ; then
			echo "ERROR: Unable to find previous release commit." >&2
			exit 1
		fi
	fi
	run fakeroot debian/rules autoreconstruct finalchecks
	run "${C}" update-changelog --changelog "${DEBIAN}"/changelog --from-commit "${prev_commit%% *}"
else
	run fakeroot debian/rules insertchanges
fi

# This should be the last step. If there were no changes to the
# changelog, there is nothing to release, so nothing to commit.
changes=$(git diff HEAD)
if [ -z "$changes" ] && [ "$dry_run" -eq 0 ]; then
	hl "No changes to commit."
	exit 1
fi

# Find the current series from previous changelog entries:
series=''
offset=0
while true; do
	series=$(dpkg-parsechangelog -l"$DEBIAN/changelog" -SDistribution -c1 -o"$offset")
	if [ "$series" ] && [ "$series" != 'UNRELEASED' ]; then
		break
	fi
	offset=$(( offset + 1 ))
done
if ! [ "$series" ]; then
	echo "Failed to retrieve the package series from changelog: $DEBIAN/changelog"
	exit 1
fi

# Close the changelog
run dch --nomultimaint -c "$DEBIAN/changelog" -r -D "$series" ''

# Commit changes
package=$(dpkg-parsechangelog -l"$DEBIAN/changelog" -SSource)
prefix="Ubuntu$(echo "$package" | sed -r -e 's/linux(-?)/\1/')-"
version=$(dpkg-parsechangelog -l"$DEBIAN/changelog" -SVersion)
run git commit -sam "UBUNTU: $prefix$version"
