#!/usr/bin/env python3

import os
import sys
import argparse

from crl.handle import Handle, HandleError

from ktl.kernel_series import KernelSeries

from ktl.sru_cycle import SruCycle
from ktl.tracking_bug2 import TrackingBugs, TrackingBugError

def tree_package_type(tree):
    ptype = tree.package.type
    return "main" if ptype is None else ptype

def handle_to_series_source(args):
    try:
        handle = Handle().lookup_set(args.handle, cycle=args.cycle, validate=False)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)

    print(handle.series.codename, handle.source.name)

def series_codename(args):
    try:
        handle = Handle().lookup_set(args.handle, cycle=args.cycle)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)

    print(handle.series.codename)

def source_packages_path(args):
    try:
        handle = Handle().lookup_set(args.handle, cycle=args.cycle)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)
    for tree in handle.trees:
        if args.type:
            type = tree_package_type(tree)
            print("%s " % (type), end='')
        print(tree.directory)

def tree_type(args):
    try:
        tree = Handle().lookup_tree(args.handle, cycle=args.cycle)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)
    print(tree_package_type(tree))

def tree_main_path(args):
    try:
        handle = Handle().lookup_set(args.handle, cycle=args.cycle)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)
    for tree in handle.trees:
        ptype = tree.package.type
        if ptype in (None, "main"):
            print(tree.directory)
            break

def list_handles(args):
    ks = KernelSeries.for_cycle(args.cycle)
    for series in KernelSeries(ks=ks).series:
        if not series.supported:
            continue
        for source in series.sources:
            if not source.supported or source.copy_forward is not None:
                continue
            print("{}:{}".format(series.codename, source.name))

def list_cycles(args):
    for cycle in SruCycle().cycles:
        print(cycle.name)

def list_variants(args):
    try:
        handle = Handle().lookup_set(args.handle, cycle=args.cycle, validate=False)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)
    if handle.source.variants is not None:
        for variant in handle.source.variants:
            print(variant)
    else:
        print('--')

def config(args):
    try:
        handle = Handle().lookup_set(args.handle, cycle=args.cycle, validate=False)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)
    print(handle.lookup_config(args.key, ''))

def read_swm_property(args):
    tbs = TrackingBugs()
    try:
        bug = tbs.add(args.bug_id)
    except (KeyError, TrackingBugError):
        print("Invalid tracking bug: {}".format(args.bug_id), file=sys.stderr)
        sys.exit(1)

    for key in args.key:
        value = bug.wf_get_property(key)
        if not value:
            value = ""
        print(value)


if __name__ == "__main__":
    desc = """
Helper program for getting cranky config and handle data from shell scripts.
"""
    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     prog="cranky shell-helper")
    subparsers = parser.add_subparsers(help="commands", dest="command")
    subparsers.required = True

    # handle-to-series-source subparser
    subparser = subparsers.add_parser("handle-to-series-source",
                                      help="Print series codename and source name for the given handle")
    subparser.set_defaults(func=handle_to_series_source)

    # series-codename subparser
    subparser = subparsers.add_parser("series-codename",
                                      help="Print series codename for the given handle")
    subparser.set_defaults(func=series_codename)

    # source-packages-path subparser
    subparser = subparsers.add_parser("source-packages-path",
                                      help="Print source packages' paths")
    subparser.add_argument("-t", "--type", action="store_true", default=False,
                           help="Also print package type.")
    subparser.set_defaults(func=source_packages_path)

    # tree-type subparser
    subparser = subparsers.add_parser("tree-type",
                                      help="tree-type: dump source tree type")
    subparser.set_defaults(func=tree_type)

    # tree-main-path subparser
    subparser = subparsers.add_parser("tree-main-path",
                                      help="tree-main-path: dump source tree main tree path")
    subparser.set_defaults(func=tree_main_path)

    # list-handles subparser
    subparser = subparsers.add_parser("list-handles",
                                      help="Print the list of supported handles")
    subparser.set_defaults(func=list_handles)

    # list-cycles subparser
    subparser = subparsers.add_parser("list-cycles",
                                      help="Print the list of known SRU cycles")
    subparser.set_defaults(func=list_cycles)

    # list variants subparser
    subparser = subparsers.add_parser("list-variants",
                                      help="Print variants for the given handle")
    subparser.set_defaults(func=list_variants)

    # config subparser
    subparser = subparsers.add_parser("config",
                                      help="Print a config option")
    subparser.add_argument("key",
                           help="The key name of the config option, in the form of <key>[.<key>].")
    subparser.set_defaults(func=config)

    # read-swm-property subparser
    subparser = subparsers.add_parser("read-swm-property",
                                      help="Read one or more SWM properties from a tracking bug")
    subparser.add_argument("bug_id",
                           help="The bug if for a kernel crank tracking bug")
    subparser.add_argument("-k", "--key", nargs="+", action="extend", required=True,
                           help="The SWM property key to read in the form of <key>[.<key>]. May be repeated.")
    subparser.set_defaults(func=read_swm_property)

    # Add common subparser arguments
    for name, subparser in subparsers.choices.items():
        # These subcommands don't take a cycle argument
        if name not in ["list-cycles", "read-swm-property"]:
            subparser.add_argument("--cycle",
                                   help="sru cycle to use when looking up the source")
        # These subcommands don't require a 'handle' argument
        if name not in ["list-handles", "list-cycles"]:
            subparser.add_argument("handle", nargs='?', default=os.getcwd(),
                                   help="<series>:<package> handle, or path to source tree. "
                                   "If not provided, defaults to the current directory.")

    args = parser.parse_args()
    args.func(args)
