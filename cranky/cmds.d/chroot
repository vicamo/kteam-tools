#!/bin/bash -eu

# TODO:
#  - error handling
#  - parameters
#  - config for mapping 'bionic/main' -> git2/ubuntu-bionic
#  - -v needs to be something ... sometimes
#  - -sa too
#  - unstable is not the series
#  - --meta-option v=<sometihg>
#  - --profile <override> in concert with series-linux as "overrides"

# Support arm64 and amd64 as chroot arches, everyone else gets to use amd64 with qemu-user-static
if [ "$(dpkg --print-architecture)" = "arm64" ]; then
	chroot_arch="arm64"
	x86_compiler="gcc-x86-64-linux-gnu"
	x86_libc="libc6-dev-amd64-cross"
	arm64_compiler="gcc"
	arm64_libc="libc6-dev"
else
	chroot_arch="amd64"
	x86_compiler="gcc"
	x86_libc="libc6-dev"
	arm64_compiler="gcc-aarch64-linux-gnu"
	arm64_libc="libc6-dev-arm64-cross"
fi

function out()
{
	local rc=$?

	trap - INT TERM EXIT HUP

	if [ ${rc} -ne 0 ] ; then
		if [ -n "${OUT_SESSION}" ] ; then
			# create-session failed so kill the broken session
			schroot -e -c "${OUT_SESSION}"
		fi
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

base_chroot_available()
{
	local series="$1"
	local arch="$2"

	local chroot

	for chroot in "$series-security-$arch-sbuild" "$series-$arch-sbuild" "$series-$arch"
	do
		schroot --directory / -c "$chroot" /bin/true >/dev/null 2>&1 && {
			#echo "II: $chroot base chroot available"
			RET="$chroot"
			return 0
		}
	done
	RET=""
	return 1
}

base_chroot_create()
{
	local series="$1"
	local arch="$2"

	local chroot="$series-$arch"

	# Create the base chroot.
	echo "$P: $chroot base chroot needed -- creating" 1>&2

	if ! grep -s '^/home' '/etc/schroot/sbuild/fstab' >/dev/null; then
		cat - <<'EOF' | sudo tee --append '/etc/schroot/sbuild/fstab' >/dev/null
# Allow use of /home for use with cranky.
/home           /home           none    rw,bind         0       0
EOF
	fi
	mk-sbuild --skip-updates --skip-proposed --distro="ubuntu" --arch="$arch" "$series"

	RET="$chroot"
}

session_chroot_available()
{
	local series="$1"
	local arch="$2"

	local session="session:cranky-$series-$arch"

	# Validate the session.
	schroot --directory / -r -c "$session" /bin/true >/dev/null 2>&1 && {
		#echo "II: $session session available"
		RET="$session"
		return 0
	}
	RET=""
	return 1
}

session_chroot_create()
{
	local series="$1"
	local arch="$2"
	local package="$3"

	local session="cranky-$series-$arch"

	if ! base_chroot_available "$series" "$arch"; then
		echo "$P: base chroot not available -- run: $C chroot create-base \"$series:linux\""
		return 1
	fi
	local chroot="$RET"

	# Create the base session.
	echo "$P: $session session needed -- creating" 1>&2

	schroot -b -n "$session" -c "$chroot"
	session="session:$session"
	OUT_SESSION=${session}   # Used by the exit handler

	if [ "${series}" != "trusty" ] && [ "${series}" != "xenial" ]; then
		# Add the builder-extra PPA to keep the chroots consistent with
		# the packages used during the sources build.
		# The PPA used for ESM kernels currently doesn't have any extra
		# dependency, so exclude trusty and xenial.
		repo_pub_key=$(cat "$(dirname "$C")"/cmds.d/builder-extra.asc)
		schroot -u root -r -c "$session" -- sh -c "echo '${repo_pub_key}' > /etc/apt/trusted.gpg.d/builder-extra.asc"
		schroot -u root -r -c "$session" -- sh -c "echo 'deb http://ppa.launchpad.net/canonical-kernel-team/builder-extra/ubuntu ${series} main' > /etc/apt/sources.list.d/builder-extra.list"
	fi

	schroot -u root -r -c "$session" -- apt-get update
	schroot -u root -r -c "$session" -- apt-get -y dist-upgrade

	schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true build-dep --no-install-recommends "$package"

	# XXX: session specific in it ...

	RET="$session"

    	# Signed v3.1 needs python3
    	schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true install python3

	# The kernels supported on Trusty don't need cross-compilers so don't
	# install them
	if [ "${series}" = "trusty" ] ; then
		return
	fi

	# Cross Compilers
	schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true install $arm64_compiler gcc-arm-linux-gnueabihf gcc-powerpc64le-linux-gnu gcc-s390x-linux-gnu $x86_compiler

	# Allow CC to link to libc
	schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true install $arm64_libc libc6-dev-armhf-cross libc6-dev-ppc64el-cross libc6-dev-s390x-cross $x86_libc

	if [ "${series}" != "xenial" ] ; then
		# Xenial doesn't have these packages
		schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true install gcc-i686-linux-gnu libc6-dev-i386-cross gcc-riscv64-linux-gnu libc6-dev-riscv64-cross
	fi

	if [ "${series}" = "noble" ] ; then
		# noble has rust toolchain
		schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true install rustc rust-src rustfmt bindgen-0.65 clang llvm libclang1 libtraceevent-dev
	fi

	if [ "${series}" = "mantic" ] ; then
		# mantic has rust toolchain
		schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true install rustc-1.68 rust-1.68-src rustfmt-1.68 bindgen-0.56 clang-15 llvm-15 libclang1-15 libtraceevent-dev
	fi

	if [ "${series}" = "lunar" ] ; then
		# lunar has rust toolchain
		schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true install rustc-1.62 rust-1.62-src rustfmt-1.62 bindgen-0.56 clang-14 llvm-14
	fi

	# Fixups to support backport kernels
	if [ "${series}" = "jammy" ] ; then
		# Compiling Kinetic kernels requires gcc-12
		# Compiling Lunar kernels requires rust
		schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true install ${arm64_compiler/gcc/gcc-12} gcc-12-arm-linux-gnueabihf gcc-12-powerpc64le-linux-gnu gcc-12-s390x-linux-gnu gcc-12-riscv64-linux-gnu  ${x86_compiler/gcc/gcc-12} rustc-1.62 rust-1.62-src rustfmt-1.62 bindgen-0.56 clang-14 llvm-14 libtraceevent-dev
	fi

	if [ "${series}" = "focal" ] ; then
		# Compiling Hirsute and later kernels requires dctrl-tools
		schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true install dctrl-tools

		# riscv kernels need gcc-10
		schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true install gcc-10-riscv64-linux-gnu
	fi

	if [ "${series}" = "bionic" ] ; then
		# Compiling Focal and later kernels requires dwarves
		schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true install dwarves
	fi

	# Selftests need llvm and libfuse-dev
	schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true install clang libelf-dev llvm libfuse-dev
}

chroot_update() {
	local chroot=${1}
	local opts

	opts=("-u" "root")
	case "${chroot}" in
		session:*) opts+=("-r") ;;
	esac

	schroot "${opts[@]}" -c "${chroot}" -- apt-get update
	schroot "${opts[@]}" -c "${chroot}" -- apt-get -y dist-upgrade
}

usage()
{
	cat <<EOF
Usage: cranky chroot <commands> <args>...
commands:
  create-base [<handle>]
      Create a base sbuilder chroot for the series of the handle package.
  create-session [<handle>]
      Create a session for the given handle.
  map-session [<handle>]
      Emit the name of the required session if available.
  run [<handle>] -- command
      Run command under chroot.
  destroy-session [<handle>]
      Destroy the session created for the handle.

Build either base chroots or chroot sessions appropriate for building
sources or updating configurations.

positional arguments:
  handle
      Handle to a kernel source tree, either a path to a kernel
      source tree or a handle in <series>:<package> format. If not
      specified the current working directory is used.

Examples:
  $ cranky chroot create-base bionic:linux
      Build a clean sbuilder chroot for use in bionic build etc.

  $ cranky chroot create-session bionic:linux
      Build a chroot session with the appropriate build-depends and cross compilers
      to build sources and update configurations for bionic:linux.

  $ cranky chroot run bionic:linux -- cranky close
      Run cranky close under the chroot session.

  $ cranky chroot destroy-session bionic:linux
      Destroy the specified chroot session.
EOF

	exit 2
}

# MAIN:
[ "$#" -lt 1 ] && usage
cmd="$1"
shift
case "$cmd" in
create-base|create-session|map-session|destroy-session)
	if [ "$#" -eq 0 ]; then
		set - "$@" "$PWD"
	elif [ "$#" -ne 1 ]; then
		echo "Usage: $P $cmd [<handle>]" 1>&2
		exit 1
	fi
	handle="$1"
	;;
run)
	if [ "$1" = "--" ]; then
		set - "$PWD" "$@"
	fi
	if [ "$2" != '--' ]; then
		echo "Usage: $P $cmd [<handle>] -- <command ...>" 1>&2
		exit 1
	fi
	handle="$1"
	shift 2
	;;
*)
	usage
	;;
esac

series_source=$("$C" shell-helper handle-to-series-source "$handle")
if [ "$series_source" = "" ]; then
	echo "$0: $handle: unknown series/package" 1>&2
	exit 1
fi
series=${series_source% *}
src=${series_source#* }
# NOTE: currently all trees are assume to be able to be built in the
#       linux package.
src='linux'

# precise chroots don't get updates anymore, use trusty instead
if [ "$series" = "precise" ]; then
	series="trusty"
fi

OUT_SESSION=
trap out INT TERM EXIT HUP

case "$cmd" in
create-base)
	if base_chroot_available "$series" "$chroot_arch"; then
		chroot_update "$RET"
	else
		base_chroot_create "$series" "$chroot_arch"
	fi
	;;
create-session)
	if session_chroot_available "$series" "$chroot_arch"; then
		chroot_update "$RET"
	else
		session_chroot_create "$series" "$chroot_arch" "$src"
	fi
	;;
map-session)
	if session_chroot_available "$series" "$chroot_arch"; then
		echo "$RET"
	else
		echo "$P: No chroot session available for $series:$src" 1>&2
		echo "Use \"$P create-session\" to create one" 1>&2
		exit 1
	fi
	;;
run)
	if session_chroot_available "$series" "$chroot_arch"; then
		schroot -p -r -c "$RET" -- "$@"
	else
		echo "$P: No chroot session available for $series:$src" 1>&2
		echo "Use \"$P create-session\" to create one" 1>&2
		exit 1
	fi
	;;
destroy-session)
	if session_chroot_available "$series" "$chroot_arch"; then
		schroot -e -c "$RET"
	else
		echo "$P: No chroot session available for $series:$src" 1>&2
		exit 1
	fi
	;;
esac
