#!/bin/bash -eu

function debug_log()
{
	[ "$debug" = "0" ] || echo "$*"
}

function usage()
{
	# Note: Arguments must match those in cranky tags
	cat <<EOF
Usage: ${P:-$(basename "$0")} [-h] [-f] [-v]

Tag the current Ubuntu kernel git tree with the correct version tag.

Optional arguments:
  -h, --help     Show this help message and exit.
  -f, --force    Replace a tag if it already exists.
  -v, --verbose  Show extra info when running.
EOF
	exit 2
}

debug=0
force=0
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			;;
		-v|--verbose)
			debug=1
			;;
		-f|--force)
			force=1
			;;
		*)
			echo "error: Unrecognized argument ${1}" >&2
			usage
			;;
	esac
	shift
done

case "$("${C}" shell-helper tree-type)" in
	main)
		# shellcheck disable=SC1091
		. debian/debian.env
		changelog_file=${DEBIAN}/changelog
		;;
	meta|signed|lrm|extra|extra2)
		changelog_file=debian/changelog
		;;
	*)
		echo "This is not a dependent kernel package repo" >&2
		exit 1
esac

debug_log "Changelog file: $changelog_file"

# Check if changelog is open
series=$(dpkg-parsechangelog -l"$changelog_file" -SDistribution)
if [ "$series" = 'UNRELEASED' ]; then
        echo "error: changelog isn't properly closed. Do you need to run cranky close first?" >&2
        exit 1
fi

if ! git show --name-only --format= | grep "$changelog_file" > /dev/null ; then
	echo "error: No delta in $changelog_file in latest commit" >&2
	echo "Are you sure the topmost commit is a closing commit?" >&2
	exit 1
fi

package=$(dpkg-parsechangelog -l"$changelog_file" -SSource)
debug_log "Package: $package"

new_version=$(dpkg-parsechangelog -SVersion -l"$changelog_file")
debug_log "Newest version: $new_version"

prefix=${package#linux}
prefix=${prefix#-meta}
prefix=${prefix#-signed}
prefix=${prefix#-restricted-modules}
prefix=${prefix#-backports-modules-3.2.0}
prefix=Ubuntu${prefix}-
debug_log "Tag Prefix: $prefix"

new_tag_unfixed="$prefix$new_version"
debug_log "Tag message: $new_tag_unfixed"

if [ "$(git log --format=%s -1)" != "UBUNTU: $new_tag_unfixed" ] ; then
	echo "error: Topmost commit subject does not include the right content" >&2
	echo "Closing commit subject should be:" >&2
	echo "   UBUNTU: $new_tag_unfixed" >&2
	exit 1
else
	debug_log "commit subject looks OK"
fi

new_tag_fixed="${new_tag_unfixed//\~/_}"
debug_log "New tag: $new_tag_fixed"

if git rev-parse "${new_tag_fixed}" >/dev/null 2>&1 ; then
	echo "error: Tag '${new_tag_fixed}' exists already" >&2
	if [ $force -eq 0 ] ; then
		echo "Use -f, --force to replace it" >&2
		exit 1
	else
		echo "(--force specified - continuing anyway)"
	fi
fi

# OK, everything looks good. Tag it.
tag_cmd="git tag -f -s -m $new_tag_unfixed $new_tag_fixed"
echo "Tagging with:"
echo " $tag_cmd"

$tag_cmd
