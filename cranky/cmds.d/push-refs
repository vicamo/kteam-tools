#!/usr/bin/env python3
#
# Push refs that make up the set of kernel packages
#

import argparse
import logging
import os
import sys

from ktl.log import cerror, cnotice, Clog

from crl.git import GitHandleSet, GitError
from crl.config import Config
from crl.exceptions import CrankyException
from crl.handle import Handle, HandleError


def push_refs(handle=None, cycle=None, current=False, dry_run=False, **args):
    """
    Push refs that make up the set of kernel packages
    """
    if not handle:
        handle = Handle().lookup_set(handle if handle else os.getcwd(), cycle=cycle, validate=False)
    ghs = GitHandleSet(handle, cycle)

    cnotice("Codename: {}".format(ghs.codename))
    cnotice("Source:   {}".format(ghs.source.name))

    summary = []
    for gh in ghs:
        pkg = gh.package
        remote = gh.remote
        rmt_branch = gh.remote_branch
        local_ref = "HEAD"
        current_tag = gh.get_current_tag()
        if not current_tag:
            cerror(f"No tag found for HEAD in {gh.directory}")
        else:
            gh.push_ref(remote, current_tag, dry_run=dry_run)
            summary.append({"name": pkg.name, "dir": gh.directory, "pushed": current_tag, "url": gh.get_url()})
        rc = gh.push_ref(remote, rmt_branch, local_ref, dry_run=dry_run)
        if rc != 0:
            cerror(f"Unable to push {local_ref} to {rmt_branch}")
            user_input = input("Do you want to push --force-with-lease? [y/N]")
            if user_input == "y":
                rc = gh.push_ref(remote, rmt_branch, local_ref, force=True, dry_run=dry_run)
        else:
            summary.append({"name": pkg.name, "dir": gh.directory, "pushed": "HEAD:" + rmt_branch, "url": gh.get_url()})

    # Print the summary
    cnotice("Summary:")
    for s in summary:
        cnotice("  Pkg '{name}' in directory '{dir}'\n" "   '{pushed}' to '{url}'".format(**s))


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    # Get the config options from file
    config = Config()

    desc = """
Push the refs (HEAD and tags) to all remotes.
"""

    epilog = """
Example:
  $ cranky push-refs xenial:linux
      Push the HEAD of 'linux', 'linux-meta' and 'linux-signed' to their
      corresponding remotes. Also push tags.
  $ cranky push-refs .
      Push the HEAD of 'linux', 'linux-meta' and 'linux-signed' using
      current dir as a reference. Also push tags.
"""

    help_handle = """
Handle to a kernel source tree in <series>:<package> format.
"""
    help_dry_run = """
Don't actually push refs.
"""

    help_nc = """No Colour. By default the debug output that is printed comes out in
multiple colours to help with the debugging. This option disables that.
"""

    formatter = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(
        description=desc, formatter_class=formatter, epilog=epilog, prog="cranky push-refs"
    )
    parser.add_argument("handle", help=help_handle)
    parser.add_argument("--nc", action="store_true", default=False, help=help_nc)
    parser.add_argument("--dry-run", action="store_true", default=False, help=help_dry_run)

    try:
        args = parser.parse_args()
        Clog.color = not args.nc
        push_refs(**vars(args))
    except (HandleError, GitError, CrankyException) as e:
        cerror(e)
        sys.exit(1)
