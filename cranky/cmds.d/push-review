#!/bin/bash -eu
#
# Push all artifacts and tags required for a cranking review
# to a remote builder.
#
# Thibault Ferrante <thibault.ferrante@canonical.com>
#

pr_error()
{
	printf "\e[31mERROR: %b\e[0m\n" "${*}" 1>&2
}

pr_warn()
{
	printf "\e[33mWARN: %b\e[0m\n" "${*}" 1>&2
}

pr_info()
{
	printf "\e[32mINFO: %b\e[0m\n" "${*}" 1>&2
}

usage()
{
	cat <<EOF
Usage: cranky push-review [-d] [-h] -s SRU_CYCLE HOST

Push all artifacts and tags required for a cranking review to a remote builder.
Expected to be run in the linux repo directory.
Built packages are expected to be ready and in the parent directory.

Positional arguments:
  HOST  Build host (kathleen, gloin, sita, ...).

Optional arguments:
  -d, --dry-run               Do everything except push to the builder (recommended as first run).
  -s, --sru-cycle             Specify the SRU cycle for the cranking. Can be passed as an environment
                              variable as 'SRU_CYCLE'.
  -h, --help                  Show this help message and exit.

Examples:
  cranky push-review -d -s 2023.09.04 kathleen

Current limitations:
  1) The build host must be accessible using password-less SSH.

Notes:
  The script should perform all the necessary steps to setup the build host
  when it is run for the first time. Specically, it clones the kernel repo
  into the user's home directory on the builder.

Speed improvement:
  A lot of ssh connection is going to be made through the script.
  To make the process faster, it is advised to reuse ssh connection automatically
  through the ssh config options 'ControlPath' and 'ControlMaster'.
EOF
	exit 2
}

dry_run=0
host=
sru_cycle=
force=

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-s|--sru-cycle)
			shift
			sru_cycle="${1}"
			;;
		-d|--dry-run)
			dry_run=1
			;;
		-f|--force)
			force=1
			;;
		-h|--help)
			usage
			;;
		*)
			if [ -n "${host:-}" ] ; then
				usage
			fi
			host=${1}
			;;
	esac
	shift
done

sru_cycle="${SRU_CYCLE:-${sru_cycle:-}}"

if [ -z "${host}" ]; then
	usage
fi

if ! [ -e ".git" ]; then
  pr_error "No such directory '.git', expected to be in linux repo"
  exit 1
fi


if [ -z "${sru_cycle:-}" ]; then
	pr_error "Missing sru_cycle"
	usage
fi

# Get the source and series from the changelog
series=$(cranky shell-helper series-codename)
source=$(cranky shell-helper handle-to-series-source | cut -d ' ' -f 2)
source_short="${source#linux-}"

remote_name="for-review-${host}"

if ! cranky shell-helper list-handles | grep -q "${series}:${source}"; then
	pr_error "Corresponding kernel handle not found"
	exit 1
fi

# Verify we can talk to the host
if ! remote_user=$(ssh -o ConnectTimeout=5 "${host}" whoami) ; then
	pr_error "Unable to ssh to host '${host}'"
	exit 1
fi

remote_artifacts_path="${sru_cycle}/${series}/${source}"
# shellcheck disable=SC2029
if ssh "${host}" test -d "${remote_artifacts_path}"; then
	pr_warn "${remote_artifacts_path} already exist on ${host}: Overwriting existing file may happen"
else
	pr_info "Creating ${host}:${remote_artifacts_path}"
	if [ "${dry_run}" -eq 0 ]; then
		# shellcheck disable=SC2029
		ssh "${host}" mkdir -p "${remote_artifacts_path}" >/dev/null
	fi
fi

directories=$(cranky shell-helper source-packages-path)

# Prepare REPOs on the host if non-existing
for linux_dir in ${directories} ; do
	repo_suffix="$(cd "${linux_dir}" && \
	        cranky shell-helper tree-type | \
	        sed "s/main//")"
	bare_repo_path="/usr3/ubuntu/ubuntu-${series}${repo_suffix:+-${repo_suffix}}.git"
	remote_path="${series}-linux${repo_suffix:+-${repo_suffix}}"
	if ! origin2=$(cd "${linux_dir}" && git remote get-url origin); then
		origin2=""
	fi
	if ! ssh "${host}" test -d "${remote_path}"; then
		pr_info "Copying ${host}:${bare_repo_path} to ${host}:~/${remote_path}"
		if [ "${dry_run}" -eq 0 ] ; then
			# We actually want the tilde to be expanded after ssh, not in current shell
			# shellcheck disable=SC2088
			ssh "${host}" cp -r "${bare_repo_path}" "~/${remote_path}"
			# shellcheck disable=SC2087
			if ! ssh "${host}" /bin/bash <<EOF
cd ~/${remote_path} && git remote add origin2 ${origin2} && git fetch origin2
EOF
			then
				pr_warn "Fail to pull ${linux_dir} from ${origin2:-origin} from ${host}, will push from local"
			fi
		fi
	fi
done

summary=""
for linux_dir in ${directories} ; do
	repo="$(cd "${linux_dir}" && \
	        cranky shell-helper tree-type | \
	        sed "s/main//")"
	repo="linux${repo:+-$repo}"
	latest_tag="$(cd "${linux_dir}" && \
								git tag --sort=creatordate | grep "${source_short}" | tail -1)"
	artifacts_name="$(cd "${linux_dir}" && \
										cranky shell-helper package-name -t "${latest_tag}")"
	artifacts_list="$(find .. -type f -name "*${artifacts_name}*")"
	artifacts_count="$(echo "${artifacts_list}" | wc -w)"
	if [ "${artifacts_count}" -eq 0 ]; then
		pr_error "Artifact not found for ${linux_dir}"
		exit 1
	fi
	if [ "${artifacts_count}" -ne 5 ]; then
		pr_warn "Only ${artifacts_count} artifacts found, usually 5 expected."
	fi

	remote_addr="ssh://${host}/~${remote_user}/${series}-${repo}"
	pr_info "${repo}: Pushing ${latest_tag} to ${remote_addr}"

	if [ "${dry_run}" -eq 0 ] ; then
		if (cd "${linux_dir}" && git remote) | grep -q "${remote_name}"; then
			(cd "${linux_dir}" && git remote remove "${remote_name}")
		fi
		(cd "${linux_dir}" && \
			git remote add "${remote_name}" "${remote_addr}" && \
			git push "${remote_name}" "${latest_tag}" ${force:+"--force"})
	fi
	summary="${summary}${repo}: ${remote_addr} tag ${latest_tag}\n"

	pr_info "${repo}: Pushing ${artifacts_count} artifacts to ${host}:${remote_artifacts_path}"
	if [ "${dry_run}" -eq 0 ] ; then
		scp ../*"${artifacts_name}"* "${host}:${remote_artifacts_path}"
	fi
done
summary="${summary}packages: ${host}:~${remote_user}/${remote_artifacts_path}"

if [ "${dry_run}" -eq 0 ] ; then
	printf "Ready for review:\n\n\`\`\`\n%b\n\`\`\`\n" "${summary}"
else
	pr_info "Dry Run -- no changes made"
fi

exit 0
