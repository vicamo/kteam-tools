#!/usr/bin/python3

import os
import subprocess
import sys
from argparse import ArgumentParser


class GitRebaseSelectorError(Exception):
    pass


class GitRebaseSelector:
    def __init__(self):
        pass

    @classmethod
    def run(cls, cmd, **kwargs):
        accept_exit = kwargs.pop("accept_exit", [0])
        verbose = kwargs.pop("verbose", None)
        if verbose is not None:
            print("II: " + verbose)
        else:
            verbose = " ".join(cmd)
        sys.stdout.flush()
        sys.stderr.flush()
        if "stderr" not in kwargs:
            kwargs["stderr"] = sys.stderr
        if "stdout" not in kwargs:
            kwargs["stdout"] = sys.stdout
        rc = subprocess.run(cmd, **kwargs)
        if rc.returncode not in accept_exit:
            raise GitRebaseSelectorError("ERROR: {} failed (rc={})".format(verbose, rc.returncode))
        return rc

    def commit_disposition(self, ghash, desc, reapply):
        # Check for revert/reapply pairs.
        if desc in reapply:
            return ("drop", "revert/reapply")

        # Check for automatically updated filed.
        proc = self.run(
            ["git", "show", "--oneline", "-t", "--raw", ghash],
            stdout=subprocess.PIPE,
            text=True,
        )
        files = set()
        for line in proc.stdout.rstrip().split("\n"):
            if line[0] == ":":
                filename = line.split("\t")[1]
                files.add(filename)
        ignore_files = set(
            [
                "update-dkms-versions",
                "debian/dkms-versions",
                "debian/scripts/misc/git-ubuntu-log",
                "debian/scripts/helpers",
            ]
        )
        if ignore_files.intersection(files) != set():
            return ("drop", "auto-fix")

        return ("pick", None)

    def filter_file(self, infile, outfile):
        record = os.path.join(os.path.dirname(os.path.dirname(infile)), "REBASE-SELECTOR")
        print("II: record={}".format(record))
        with open(infile) as ifd, open(outfile, "w") as ofd, open(record, "w") as rfd:
            lines = [line.strip() for line in ifd]

            # Check for and drop Revert "X" Reapply "X" pairs.
            revert = set()
            reapply = set()
            for line in lines:
                if line.startswith("pick "):
                    cmd, ghash, desc = line.split(None, 2)
                    if desc.startswith('Revert "'):
                        revert.add(desc)
                    elif desc.startswith('Reapply "'):
                        revert_desc = "Revert " + desc.split(None, 1)[1]
                        if revert_desc in revert:
                            reapply.add(desc)
                            reapply.add(revert_desc)

            for line in lines:
                if line.startswith("pick "):
                    cmd, ghash, desc = line.split(None, 2)
                    cmd, reason = self.commit_disposition(ghash, desc, reapply)
                    if reason is not None:
                        print("II: {} {} -- {}".format(reason, cmd, desc))
                        print("#", reason, file=rfd)

                    line = " ".join([cmd, ghash, desc])
                print(line, file=ofd)
                if len(line) > 0 and line[0] != "#":
                    print(line, file=rfd)

    def main(self, args):
        parser = ArgumentParser()
        parser.add_argument("filename")
        args = parser.parse_args(args[1:])

        self.filter_file(args.filename, args.filename + ".new")
        os.rename(args.filename + ".new", args.filename)


if __name__ == "__main__":
    GitRebaseSelector().main(sys.argv)
