#!/usr/bin/env python3
#
# cranky list-derivatives: For a given handle, print a list of all sources which
#                          are derived from it.
#
# Copyright (C) 2020, Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

import argparse
import logging
import os
import sys

from crl.handle import Handle, HandleError
from ktl.log import cdebug, cerror


class SourceTree:
    def __init__(self):
        self._ks      = None
        self.treedata = dict()

    def add_source(self, ks_source, filters=[]):
        key_series = ks_source.series.name
        key_source = ks_source.name

        if self._ks is None:
            self._ks      = ks_source._ks
        series_branch = self.treedata.setdefault(key_series, dict())
        if key_source in series_branch:
            return

        series_branch.setdefault(key_source, ks_source)

        cdebug('Add[{}, {}]'.format(key_series, key_source))
        while self.expand_tree(filters=filters):
            pass

    def __repr__(self):
        text = ''
        for series_name in sorted(self.treedata.keys(), reverse=True):
            cs = None
            for source_name in sorted(self.treedata[series_name]):
                ks_source = self.treedata[series_name][source_name]
                if cs is None:
                    cs = ks_source.series.codename
                text += '* {}/{}\n'.format(cs, source_name)
        return text.rstrip()

    def expand_tree(self, filters=[]):
        grown = False
        for ks_series in self._ks.series:
            if not ks_series.supported and not ks_series.development:
                continue
            for ks_source in ks_series.sources:
                if not ks_source.supported:
                    continue
                if not ks_source.derived_from:
                    continue
                ks_parent_source = ks_source.derived_from
                if ks_parent_source.series.name not in self.treedata:
                    continue
                if ks_parent_source.name not in self.treedata[ks_parent_source.series.name]:
                    continue
                series_branch = self.treedata.setdefault(ks_source.series.name, dict())
                if ks_source.name in series_branch:
                    continue
                if 'lrm' in filters:
                    for pkg in ks_source.packages:
                        if pkg.type == 'lrm':
                            break
                    else:
                        continue
                if 'signed' in filters:
                    for pkg in ks_source.packages:
                        if pkg.type == 'signed':
                            break
                    else:
                        continue
                cdebug('Grow[{}, {}]'.format(ks_source.series.name, ks_source.name))
                series_branch.setdefault(ks_source.name, ks_source)
                grown = True

        return grown


if __name__ == "__main__":
    desc = """
List all kernel sources which are derived from one or more given kernel
source(s). If no source is specified, then the current directory would
have to be one of the working trees belonging to the set related to a
kernel source.

Filters can be specified and limit the list of derivatives to those
satisfying all filters. The provided sources are always included in
the list, regardless of filters.
"""

    epilog = """
Examples:
  $ cranky list-derivatives
      List all kernel sources which are derived (rebased on) from the currently
      checked out source.

  $ cranky list-derivatives focal:linux
      List all kernels which are derived from the Focal release kernel.

  $ cranky list-derivatives /path/to/a/kernel/package/directory
      List the derivatives for the specified kernel directory.
"""

    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog=epilog,
                                     prog="cranky list-derivatives")
    parser.add_argument("handle", nargs='*', metavar="<handle>",
                        help="Handle to a kernel source "
                        "tree, either a path to a kernel source tree or a "
                        "handle in <series>:<package> format. If not given "
                        "the current working directory is used.")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Increase verbosity.")
    parser.add_argument("--has-lrm", dest="filters", action="append_const", const="lrm",
                        help="Limit derivatives to those which provide a LRM package.")
    parser.add_argument("--has-signed", dest="filters", action="append_const", const="signed",
                        help="Limit derivatives to those which provide a signed package.")
    parser.add_argument("--cycle", help="sru cycle to use when looking up the source.")

    args = parser.parse_args()

    # Setup the logger
    level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(level=level, format="%(message)s")

    if len(args.handle) == 0:
        args.handle.append(os.getcwd())
    if args.filters is None:
        args.filters = []

    sources = SourceTree()
    for h in args.handle:
        try:
            handle = Handle().lookup_tree(h, cycle=args.cycle, validate=False)
        except HandleError as e:
            cerror(e)
            sys.exit(1)
        sources.add_source(handle.package.source, filters=args.filters)

    print(sources)
