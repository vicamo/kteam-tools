#!/bin/bash -eu
#
# Packaging sanity checks
#

C=${C:-cranky}
SC=$(basename "${0}")

function out()
{
	rc=${?}

	trap - EXIT INT TERM HUP

	if [ ${rc} -ne 0 ] ; then
		echo "Error: ${C} ${SC} failed" >&2
	fi

	exit ${rc}
}


function must_produce()
{
	local package=${1} note=${2:-}

	if ! grep -qP "^Package:\s*${package}$" debian/control ; then
		echo "EE: debian/control is missing package stanza${note}:" >&2
		echo "EE:   - Package: ${package}" >&2
		RC=1
	fi
}

function must_not_produce()
{
	local package=${1} note=${2:-}

	if grep -qP "^Package:\s*${package}$" debian/control ; then
		echo "EE: debian/control contains invalid package stanza${note}:" >&2
		echo "EE:   - Package: ${package}" >&2
		RC=1
	fi
}

function check_linux_source()
{
	echo "  - Check linux-source package stanza"

	if [ "${SOURCE}" = "linux" ] ; then
		must_produce "linux-source-\d+\.\d+\.\d+"
	else
		must_not_produce "linux-source-\d+\.\d+\.\d+"
		must_not_produce "${SOURCE}-source-\d+\.\d+\.\d+"
	fi
}

function check_linux_tools()
{
	local note

	echo "  - Check linux-*-tools-common and linux-*-tools-host package stanzas"

	note=" (see LP: #2048183)"

	if [ "${SOURCE}" = "linux" ] ; then
		must_produce "linux-tools-common" "${note}"
		must_produce "linux-cloud-tools-common" "${note}"
		must_produce "linux-tools-host" "${note}"
	else
		must_not_produce "linux-tools-common" "${note}"
		must_not_produce "${SOURCE}-tools-common" "${note}"

		must_not_produce "linux-cloud-tools-common" "${note}"
		must_not_produce "${SOURCE}-cloud-tools-common" "${note}"

		must_not_produce "linux-tools-host" "${note}"
		must_not_produce "${SOURCE}-tools-host" "${note}"
	fi
}

function check_unused_do_flags()
{
	local note first line flag

	echo "  - Check unused do_* build flags in ${DEBIAN}/rules.d/*.mk"

	note=" (see LP: #2077306)"

	first=1
	while IFS= read -r line ; do
		flag=${line#*:}
		flag=${flag%%=*}
		flag=${flag%% *}
		case "${flag}" in
			do_dkms*|do_zfs)
				true
				;;
			*)
				if ! grep -qE "\b${flag}\b" debian/rules debian/rules.d/* ; then
					if [ ${first} -eq 1 ] ; then
						first=0
						echo "EE: Unused flags in rule files${note}" >&2
					fi
					RC=1
					echo "EE:   - ${line}" >&2
				fi
		esac
	done < <(git grep -oPH '\bdo_.*\b' "${DEBIAN}"/rules.d/* | tr "\t" " " | tr -s " " | sort -u)
}

function check_invalid_do_flags()
{
	local note flags

	echo "  - Check invalid do_* build flags in ${DEBIAN}/rules.d/*.mk"

	note=" (see LP: #2048183)"
	flags="do_tools_common|do_tools_host"

	if grep -qE "\b(${flags})\b" "${DEBIAN}"/rules.d/*.mk ; then
		echo "EE: Invalid/unnecessary flags in rule files${note}:" >&2
		grep -E "\b(${flags})\b" "${DEBIAN}"/rules.d/*.mk | sed 's,^,EE:   - ,' >&2
		RC=1
	fi
}

function usage()
{
    cat << EOF
Usage: ${C} ${SC} [-h]

Perform some basic packaging sanity checks.

Optional arguments:
  -h, --help  Show this help message and exit.
EOF
}

while [ ${#} -ne 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		*)
			usage
			exit 2
			;;
	esac
	# shellcheck disable=SC2317
	shift
done

trap out EXIT INT TERM HUP

if ! [ -e debian/debian.env ] ; then
	echo "Not in an Ubuntu kernel package tree" >&2
	exit 1
fi

if ! [ -e debian/control ] ; then
	echo "debian/control does not exist" >&2
	exit 1
fi

# shellcheck disable=SC1091
. debian/debian.env

# Load derivative info
if [ -f "${DEBIAN}"/etc/update.conf ] ; then
	# shellcheck disable=SC1091
	. "${DEBIAN}"/etc/update.conf
fi
if [ -n "${BACKPORT_SUFFIX:-}" ] || [ -n "${BACKPORT_NO_SUFFIX:-}" ] ; then
	is_backport=1
else
	is_backport=0
fi

SOURCE=$(dpkg-parsechangelog -l"${DEBIAN}"/changelog -SSource)

RC=0

echo "Check debian/control"
check_linux_source
check_linux_tools

echo
echo "Check rules"
check_unused_do_flags
if [ "${SOURCE}" != "linux" ] && [ ${is_backport} -eq 0 ] ; then
	check_invalid_do_flags
fi

echo

if [ ${RC} -ne 0 ] ; then
	echo "EE: Some checks failed" >&2
	series=$(dpkg-parsechangelog -l"${DEBIAN}"/changelog -SDistribution)
	if [ "${series}" = "UNRELEASED" ] ; then
		series=$(dpkg-parsechangelog -l"${DEBIAN}"/changelog -SDistribution -o1 -c1)
	fi
	case "${series}" in
		trusty|xenial|bionic|focal|jammy|noble)
			echo "WW: Please fix the reported packaging issues and/or report them to the kernel owner." >&2
			echo "WW: This is currently just a warning but will be turned into an error in the future." >&2
			exit 0
			;;
	esac
	exit 1
fi

echo "All checks passed"
exit 0
