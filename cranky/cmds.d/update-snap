#!/usr/bin/env python3

import sys
import argparse
import yaml
import subprocess
import re
import logging
import apt_pkg

from launchpadlib.launchpad import Launchpad

from ktl.kernel_series import KernelSeries
from ktl.log import cerror, cinfo

class UpdateSnap():
    def __init__(self, pocket='proposed', no_tag=False, dry_run=False):
        self.ks = KernelSeries()
        self.scy_file_name = "snapcraft.yaml"
        self.krn_file_name = "kernel-info.yaml"
        self.no_tag = no_tag
        self.dry_run = dry_run
        self.scy = None
        self.krn = None
        self.pocket = pocket

        self.name = None
        self.series = None
        self.source = None
        self.version = None

        # open and parse the local snapcraft.yaml file
        try:
            with open(self.scy_file_name, 'r') as scy_file:
                self.scy = yaml.safe_load(scy_file)
        except:
            cerror("ERROR: Could not open and parse file {}".format(self.scy_file_name))
            sys.exit(1)

        # Try to open and parse the local kernel.yaml file
        try:
            with open(self.krn_file_name, 'r') as krn_file:
                self.krn = yaml.safe_load(krn_file)
        except:
            # As long as snapcraft.yaml still contains a version key, we use the old
            # format and it is acceptable to fail.
            if 'version' not in self.scy.keys():
                cerror("ERROR: Could not open and parse {}".format(self.krn_file_name))
                sys.exit(1)
            pass

        # Pull out the name name.
        self.name = self.scy['name']

        # If we have a kernel.yaml, then extract the kernel source info from that.
        if self.krn is not None:
            self.series  = self.krn['series']
            self.source  = self.krn['source']
            self.version = self.krn['version']

            # VALIDATION: confirm series.
            ks_series = self.ks.lookup_series(codename=self.series)
            if ks_series is None:
                cerror("ERROR: {} invalid series specified".format(self.series))
                sys.exit(1)
        else:
            # Lookup the KERNEL_SOURCE identifier.  This is either a source handle
            # (bionic:linux) or just a source package name (linux-raspi2).
            source_handle = None
            for param in self.scy['parts']['kernel']['make-parameters']:
                if param.startswith('KERNEL_SOURCE='):
                    source_handle = param.split('=', 1)[1]
                    break

            # <series>:<source> handle.
            if source_handle is not None and ':' in source_handle:
                (self.series, self.source) = source_handle.split(':', 1)

            # <source> plain source package.
            elif source_handle is not None:
                self.source = source_handle

            # If we have not been given a series yet, try and intuit it from the
            # source git URL /+git/<series> data.
            if self.series is None:
                self.series = self.scy['parts']['kernel']['source'].rpartition('/')[2]

            # VALIDATION: confirm series.
            ks_series = self.ks.lookup_series(codename=self.series)
            if ks_series is None:
                cerror("ERROR: {} invalid series specified".format(self.series))
                sys.exit(1)

            # If we have no source yet, find it using the series and snap name.
            if self.source is None:
                for source in ks_series.sources:
                    copy_forward = source.copy_forward
                    if copy_forward is not None:
                        source = copy_forward
                    snap = source.lookup_snap(self.name)
                    if snap is not None:
                        self.source = source.name
                        break
                if self.source is None:
                    cerror("ERROR: {} snap not found in {}".format(self.name, self.series))
                    sys.exit(1)
            self.version = self.scy['version']

        # VALIDATION: confirm source.
        ks_source = ks_series.lookup_source(self.source)
        if ks_source is None:
            cerror("ERROR: {} source not found in {}".format(self.source, self.series))
            sys.exit(1)

        # VALIDATION: confirm snap.
        copy_forward = ks_source.copy_forward
        if copy_forward is not None:
            ks_source = copy_forward
        self.snap = ks_source.lookup_snap(self.name)
        if self.snap is None:
            cerror("ERROR: {} snap not found on {}:{}".format(self.name, self.series, self.source))
            sys.exit(1)

        self.ks_source = ks_source

        logging.disable(logging.INFO)
        self.lp = Launchpad.login_with('cranky', 'production', version='devel')
        logging.disable(logging.NOTSET)

    def get_published_ver(self, pkg_name, series, pocket):
        '''
        Use launchpad api to get the package version published for the given
        series/pocket.
        '''
        lp_series = self.lp.distributions["ubuntu"].getSeries(name_or_version=series)

        # Search through all routes looking for newest package version
        version = None
        routing = self.ks_source.routing[pocket]
        for (ppa, ppa_pocket) in routing:
            archive = self.lp.archives.getByReference(reference=ppa)
            if not archive:
                continue

            sources = archive.getPublishedSources(source_name=pkg_name, distro_series=lp_series,
                                                  pocket=ppa_pocket, exact_match=True,
                                                  order_by_date=True, status="Published")
            if not sources:
                continue

            this_ver = sources[0].source_package_version
            if version is None or apt_pkg.version_compare(this_ver, version) > 0:
                version = this_ver

        if version is None:
            cerror("ERROR: No version avaialble for package {} in series {}".format(pkg_name, series))
            sys.exit(1)

        return version

    def update_snap(self, version, url):
        '''
        Update the file(s) which contain(s) the kernel version with the new version. For
        a transitional period this might be two files.
        '''
        scy_content = None
        if 'version' in self.scy.keys():
            with open(self.scy_file_name, 'r') as scy_file:
                scy_content = scy_file.read()

            if self.version != version:
                scy_content = re.sub(r'version: .*', 'version: {}'.format(version), scy_content)
                cinfo("INFO: update version from %s to %s" %
                      (self.scy['version'], version))
            # A recent change which was partially reverted has now created a case where
            # snapcraft.yaml contains a version but not the source (URL) part.
            if 'source' in self.scy['parts']['kernel'].keys():
                src = self.scy['parts']['kernel']['source']
                if src != self.snap.repo.url:
                    scy_content = re.sub(r'( *source: ) *{}'.format(re.escape(src)),
                                         r'\1{}'.format(url), scy_content)
                    cinfo("INFO: update url:\n      %s\n      %s" % (src, self.snap.repo.url))

        if self.krn is not None:
            with open(self.krn_file_name, 'r') as krn_file:
                krn_content = krn_file.read()

            if self.version != version:
                krn_content = re.sub(r'version: .*', 'version: {}'.format(version), krn_content)
                cinfo("INFO: update version from {} to {}".format(self.krn['version'], version))
        else:
            cinfo("INFO: creating initial {}".format(self.krn_file_name))
            krn_content  = "#\n# Kernel Source Information\n#\n"
            krn_content += "series: {}\n".format(self.series)
            krn_content += "source: {}\n".format(self.source)
            krn_content += "version: {}\n".format(version)

        if not self.dry_run:
            if scy_content is not None:
                with open(self.scy_file_name, 'w') as scy_file:
                    scy_file.write(scy_content)
            with open(self.krn_file_name, 'w') as krn_file:
                krn_file.write(krn_content)
            if self.krn is None:
                subprocess.call("git add {}".format(self.krn_file_name), shell=True)

    def get_commit_subject(self, version):
        '''
        Return a string with the subject to be used for the commit,
        based on the previous commit messages.
        '''
        if self.krn is not None:
            ckfile = self.krn_file_name
        else:
            ckfile = self.scy_file_name
        cmd = "git log --pretty=%%s -1 --grep='UBUNTU: Ubuntu-.*[0-9]'  -- %s" % ckfile
        last_commit = subprocess.check_output(cmd, shell=True).decode()

        match = re.match(r'(UBUNTU: Ubuntu-)(([a-z][^-]*-)*)[0-9].*', last_commit)
        prefix = match.group(1)
        flavour = match.group(2)

        return "%s%s%s" % (prefix, flavour, version)

    def get_tag_from_commit(self, subject):
        '''
        Given a commit subject, return a tuple with the tag name and tag msg to
        be used for that commit.
        '''
        tag_msg = re.sub(r'^UBUNTU: ', '', subject)
        tag_name = tag_msg.replace('~', '_')

        return (tag_name, tag_msg)

    def main(self):
        '''
        main method.
        '''
        proposed_ver = self.get_published_ver(self.source, self.ks_source.series.codename,
                                              self.pocket)
        if self.version == proposed_ver:
            cerror("ERROR: No new version available in -{}".format(self.pocket))
            sys.exit(1)
        if 'version' in self.scy.keys() and self.version == proposed_ver:
            if self.scy['parts']['kernel']['source'] == self.snap.repo.url:
                cerror("ERROR: No new repository info")
                sys.exit(1)

        self.update_snap(proposed_ver, self.snap.repo.url)
        commit_msg = self.get_commit_subject(proposed_ver)
        (tag_name, tag_msg) = self.get_tag_from_commit(commit_msg)
        commit_cmd = "git commit -s -m '%s' -- %s" % (commit_msg, self.scy_file_name)
        commit_cmd = "git commit -s -m '{}' --".format(commit_msg)
        if 'version' in self.scy.keys():
            commit_cmd += " {}".format(self.scy_file_name)
        commit_cmd += " {}".format(self.krn_file_name)
        tag_cmd = "git tag -sm '%s' '%s'" % (tag_msg, tag_name)

        if not self.dry_run:
            ret = subprocess.call(commit_cmd, shell=True)
            if ret != 0:
                cerror("ERROR: Failed to commit. Return code: %d", ret)
                sys.exit(1)

            if self.no_tag:
                cinfo("Please review and tag:")
                cinfo(tag_cmd)
            else:
                cinfo("INFO: Running: %s" % tag_cmd)
                ret = subprocess.call(tag_cmd, shell=True)
                if ret != 0:
                    cerror("ERROR: Failed to tag commit. Return code: %d" % ret)
                    sys.exit(1)
        else:
            cinfo("INFO: Dry run: would run:")
            cinfo("%s" % commit_cmd)
            cinfo("%s" % tag_cmd)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format="%(message)s")
    apt_pkg.init_system()

    desc = """
Update the kernel snap snapcrat.yaml file with the source package version
published on the specified pocket (default from -proposed).
"""

    epilog = """
Examples:
    $ cranky update-snap
        Get source package version from -proposed and automatically tag.

    $ cranky update-snap --updates
        Get source package version from -updates and automatically tag.

    $ cranky update-snap --no-tag
        Get source package version from -proposed and don't tag, showing only
        the 'git tag' command to be run.
"""

    parser = argparse.ArgumentParser(description=desc, epilog=epilog,
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     prog="cranky update-snap")
    parser.add_argument("--dry-run", action="store_true", default=False,
                        help="do not make any changes, just show what would be done")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-r", "--release", action="store_true", default=False,
                       help="get version from -release instead of -proposed")
    group.add_argument("-u", "--updates", action="store_true", default=False,
                       help="get version from -updates instead of -proposed")
    parser.add_argument("-t", "--no-tag", action="store_true", default=False,
                        help="do not automatically tag the commit")
    args = parser.parse_args()

    pocket = 'proposed'
    if args.updates:
        pocket = 'updates'
    if args.release:
        pocket = 'release'
    update_snap = UpdateSnap(pocket, args.no_tag, args.dry_run)
    update_snap.main()
