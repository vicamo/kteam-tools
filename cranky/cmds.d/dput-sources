#!/bin/bash -eu
#
# Upload a set of kernel source packages to a PPA
#

UPLOAD_DIR=$PWD

function out()
{
	local rc=$?

	trap - EXIT INT TERM HUP

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function get_changes_file()
{
	local dir=$1
	local DEBIAN src version changes

	(
		cd "$dir" || exit 1

		DEBIAN=debian
		# shellcheck disable=SC1091
		if [ -e debian/debian.env ] ; then
			. debian/debian.env
		fi

		src=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Source)
		version=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Version)
		changes=${src}_${version}_source.changes

		if [ -e "../${changes}" ] ; then
			echo "../${changes}"
			exit 0
		fi
		if [ -e "${UPLOAD_DIR}/${changes}" ] ; then
			echo "${UPLOAD_DIR}/${changes}"
			exit 0
		fi

		echo "No such changes file: ${changes}" >&2
		exit 1
	)
}

function sign_src()
{
	local dir=$1 resign=$2 maint_email=${3:-}

	(
		cd "$dir" || exit 1

		changes="$(get_changes_file "$dir")"
		echo "${changes}"

		sign_opts=()
		if [ "${resign}" -eq 1 ]; then
			sign_opts+=("--re-sign")
		fi
		if [ ! -z "${maint_email}" ]; then
			sign_opts+=("-e${maint_email}")
		fi

		# shellcheck disable=SC2086
		debsign ${sign_opts[*]} "${changes}"
	)
}

function dput_src()
{
	local dir=$1 ppa=$2

	(
		cd "$dir" || exit 1

		changes="$(get_changes_file "$dir")"
		echo "${changes}"

		dput "${ppa}" "${changes}"
	)
}

function usage()
{
	cat <<EOF
Usage: cranky dput-sources [-h] [-f|--force] [-c|--current] [-e EMAIL] DESTINATION [HANDLE]

Sign and upload the kernel source packages specified by HANDLE to the
DESTINATION PPA. The script will show the details of the destination PPA
and list the source packages that it wants to upload and wait for user
confirmation before doing the actual sign and upload.

Positional arguments:
  DESTINATION  An upload destination as listed by cranky list-routing.
  HANDLE       Handle to a kernel source tree, either a path to a kernel
               source tree or a handle in <series>:<package> format. If not
               given the current working directory is used.

Optional arguments:
  -h, --help     Show this help text and exit.
  -f, --force    Do not ask for confirmation before signing and uploading
                 the package. Note that this option will cause debsign to be
                 called with --re-sign, causing an already signed package to
                 be re-signed.
  -c, --current  Only sign and upload the source package for the current
                 working directory.
  -e, --email    Email address of the key to be used for the package signing.
                 Useful when (re-)signing a package built using another
                 email address.

Example:
  $ cranky dput-sources build
      Sign and upload the kernel source packages of the current directory
      to the standard builder PPA for that kernel.

  $ cranky dput-sources -e kernel.developer@canonical.com build#2
      Re-sign the source packages of the current directory using the email
      address provided and upload it to ppa2 builder PPA.

  $ cranky dput-sources --force security-build xenial:linux
      Sign and upload the Xenial linux kernel source packages to the
      security builder PPA without asking for confirmation.

  $ cranky dput-sources --current test-build
      Upload only the kernel source package for the current working directory
      to the test builder PPA for that kernel.
EOF
}

current=0
force=0
dest=
handle=
maint_email=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-c|--current)
			current=1
			;;
		-f|--force)
			force=1
			;;
		-e|--email)
			shift
			maint_email="$1"
			if [[ $maint_email != *"@"* ]]; then
				usage
				exit 2
			fi
			;;
		-h|--help)
			usage
			exit
			;;
		-*)
			usage
			exit 2
			;;
		*)
			if [ -z "${dest}" ] ; then
				dest=${1}
			elif [ -z "${handle}" ] ; then
				handle=${1}
			else
				usage
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${dest}" ] ; then
	usage
	exit 2
fi

if [ -z "${handle}" ] ; then
	handle=${PWD}
fi

trap out EXIT INT TERM HUP

# Get the PPA for the given upload destination
ppa=$("$C" list-routing "${handle}" | awk '$1 == "'"${dest}"'" { print $3 }')
if [ -z "${ppa}" ] ; then
	echo "No PPA found for destination ${dest}" >&2
	exit 1
fi

echo "PPA: ${ppa}"

# Get the source directories for the package set
readarray -t srcs < <("$C" shell-helper source-packages-path "${handle}")
if [ "${#srcs[@]}" -eq 0 ] ; then
	exit 1
fi

# If --current is specified, filter the srcs array keeping
# only the current directory
if [ "${current}" -eq 1 ]; then
	new_srcs=()
	for src in "${srcs[@]}"; do
		if [ "${PWD}" = "${src}" ] ; then
			new_srcs+=("${src}")
		fi
	done
	if [ "${#new_srcs[@]}" -eq 0 ]; then
		echo "Current directory not in source package path list." >&2
		exit 1
	fi
	srcs=("${new_srcs[@]}")
fi

# If --force was provided we don't need to list the .source files
# here since they will be echo'ed again later.
if [ "${force}" -eq 0 ]; then
	for src in "${srcs[@]}" ; do
		changes="$(get_changes_file "$src")"
		echo "${changes}"
	done
fi

# Get confirmation from the user to sign the package if
# --force was not provided
if [ "${force}" -eq 1 ]; then
	sign="y"
else
	sign=
	while [ "${sign,,}" != "y" ] && [ "${sign,,}" != "n" ] ; do
		echo -n "Sign packages (y|N)? "
		read -r sign
		if [ -z "${sign}" ]; then
			sign="n"
		fi
	done
fi

if [ "${sign,,}" = "y" ]; then
	for src in "${srcs[@]}" ; do
		# In case 'force' option was provided, we also want to
		# force a re-sign of the package
		sign_src "${src}" "${force}" "${maint_email}"
	done
fi

# Get confirmation from the user to do the upload if
# --force was not provided
if [ "${force}" -eq 1 ]; then
	upload="y"
else
	upload=
	while [ "${upload,,}" != "y" ] && [ "${upload,,}" != "n" ] ; do
		echo -n "Upload packages (y|N)? "
		read -r upload
		if [ -z "${upload}" ]; then
			upload="n"
		fi
	done
fi

# Do the upload
if [ "${upload,,}" = "y" ] ; then
	for src in "${srcs[@]}" ; do
		dput_src "${src}" "${ppa}"
	done
fi
