#!/bin/bash -eu
#
# Create an opening changelog entry
#

C=${C:-cranky}

function out()
{
	rc=${?}

	if [ ${rc} -ne 0 ] ; then
		echo "Error: Script failed" >&2
	fi

	exit ${rc}
}

function usage()
{
	cat <<EOF
Usage: ${C} startnewrelease [-c] [-h]

Create an opening changelog entry.

Optional arguments:
  -c, --commit  Commit the modified changelog along with any other staged
                files.
  -h, --help    Show this help text and exit.
EOF
}

commit=0

while [ $# -gt 0 ] ; do
	case "${1}" in
		-c|--commit)
			commit=1
			;;
		-h|--help)
			usage
			exit
			;;
	esac
	shift
done

if ! [ -f debian/debian.env ] ; then
	echo "Not in an Ubuntu main kernel source tree" >&2
	exit 1
fi

trap out EXIT INT TERM HUP

# shellcheck disable=SC1091
. debian/debian.env

DEBIAN_MASTER=

if [ -f "${DEBIAN}"/etc/update.conf ] ; then
	# shellcheck disable=SC1091
	. "${DEBIAN}"/etc/update.conf
fi

prev_ver=$(dpkg-parsechangelog -l"${DEBIAN}"/changelog -SVersion)

opts=("${prev_ver}")
if [ -d "${DEBIAN_MASTER}" ] ; then
    parent_ver=$(dpkg-parsechangelog -l"${DEBIAN_MASTER}"/changelog -SVersion)
    opts+=("-p" "${parent_ver}")
elif [ -n "${DEBIAN_MASTER}" ] ; then
    # Handle kernels without the DEBIAN_MASTER folder, such as Ubuntu Core
    # snaps and Azure FDE kernels (Jammy and Focal).
    # Find kernel name by removing everything before "debian." in DEBIAN_MASTER
    split_debian_master="${DEBIAN_MASTER#*debian.}"
    flavour=
    if [ "${split_debian_master}" == "master" ]; then
        flavour="linux"
    else
        flavour="linux-${split_debian_master}"
    fi
    series=$("${C}" shell-helper series-codename)
    parent_ver=$("${C}" rmadison -s -p proposed "$series:$flavour" | grep "$flavour" | sort -r | head -n1 | cut -d\  -f2)
    # If parent version is same as previous, don't change it, just warn user
    if [ "${parent_ver}" != "${prev_ver%.*}" ]; then
        # Strip off backport suffix (if any) from parent version
        # so as to not duplicate it when newrelease is called
        parent_ver="${parent_ver%%"~"*}"

        opts+=("-p" "${parent_ver}")
    else
        echo -e "\n\e[1m***WARNING: Parent version same as the last crank! Check version before continuing. \nNew parent version may not have built yet.***\e[0m\n"
    fi
fi

ver=$("${C}" shell-helper newrelease "${opts[@]}")

echo "Creating new changelog set for ${ver}..."
dch -c "${DEBIAN}"/changelog -v "${ver}" "__STARTNEWRELEASE__"

# Ugliness. Is there a better way to do this?
sed -i 's/^.*__STARTNEWRELEASE__.*/  CHANGELOG: Do not edit directly. Autogenerated at release.\
  CHANGELOG: Use the printchanges target to see the curent changes.\
  CHANGELOG: Use the insertchanges target to create the final log./' "${DEBIAN}"/changelog

if [ ${commit} -eq 1 ] ; then
	git add "${DEBIAN}"/changelog
	git commit -s -m "UBUNTU: Start new release

Ignore: yes"
fi
