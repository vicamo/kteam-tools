#!/usr/bin/env python3

import os
import sys
import argparse
import logging
import yaml

from ktl.log import Clog, cerror, cinfo
from ktl.utils import run_command
from ktl.swm_status import SwmStatus

from crl.handle import Handle, HandleError

class SnapcraftDataError(Exception):
    pass

class SnapcraftData():
    def __init__(self, snapname):
        # Check that we're logged in
        rc, output = run_command('snapcraft whoami')
        if rc != 0:
            raise SnapcraftDataError('You need to log in first by running "snapcraft login"')

        rc, output = run_command('snapcraft status {}'.format(snapname))
        if rc != 0:
            raise SnapcraftDataError('Failed to obtain snapcraft status (output: {})'.format(output))
        self.__arch_start = None
        self.__chan_start = None
        self.__vers_start = None
        self.__revi_start = None
        self.__expi_start = None
        self.__init_done = False
        self.data = {}

        track = None
        arch = None
        for line in output:
            if line.startswith('Track'):
                # This is the header get the spacing from here
                self.__arch_start = line.index('Arch')
                self.__chan_start = line.index('Channel')
                self.__vers_start = line.index('Version')
                self.__revi_start = line.index('Revision')
                # Sometimes there is 'Expires at', sometimes there is not...
                try:
                    self.__expi_start = line.index('Expires')
                except ValueError:
                    self.__expi_start = len(line)
                self.__init_done = True
            else:
                if not self.__init_done:
                    raise SnapcraftDataError('Failed to setup input format')
                f = line[0:self.__arch_start].rstrip()
                if f != "":
                    track = f
                f = line[self.__arch_start:self.__chan_start].rstrip()
                if f != "":
                    arch = f
                if track is None or arch is None:
                    raise SnapcraftDataError('Failed to parse snapcraft data')
                channel = line[self.__chan_start:self.__vers_start].rstrip()
                version = line[self.__vers_start:self.__revi_start].rstrip()
                rev = line[self.__revi_start:self.__expi_start].rstrip()
                if track == 'latest':
                    trkchn = channel
                else:
                    trkchn = '{}/{}'.format(track, channel)

                self.data.setdefault(arch, {})
                self.data[arch].setdefault(trkchn, {})
                self.data[arch][trkchn] = (version, rev)


if __name__ == '__main__':

    desc = '''
This command is for promoting snaps which have been produced already
into their next destination channels (as determines by the workflow).
For some kernel snaps this may also be a required step for some edge
and beta channels if automatic uploads cannot cover all combinations
of tracks.
'''

    epilog = '''
Example: cranky promote-snap bionic:linux-raspi2:pi-kernel

  This will execute all promotions needed for the pi-kernel
  snap which is based on bionic:linux-raspi2.

  NOTE(!): Since this kernel snap is released to more channels
  than an automatic  build can handle, this run would also finish
  the produce  step by promoting to the missing channels.

Example: cranky promote-snap pi-kernel

  This will deduce the series and source names from the current
  working directory and then execute all promotions as detailed
  in the previous example.
'''

    formatter = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(description=desc, epilog=epilog,
                                     formatter_class=formatter,
                                     prog="cranky promote-snap")
    parser.add_argument('--dry-run', action='store_true', default=False,
                        help='do not make any changes, just show what would be done')
    parser.add_argument('--debug', action='store_true', default=False,
                        help='output debug level logs')
    parser.add_argument('snap_handles', metavar='[<series>:<source name>:]<snap name>',
                        nargs='+', type=str,
                        help='specification of the snap to be promoted. If ' +
                        '<series>:<source name> is not provided, deduces it ' +
                        'from the current working directory.')
    args = parser.parse_args()

    Clog.color = True
    if args.debug:
        logging.basicConfig(level=logging.DEBUG,
                            format='%(levelname)s - %(message)s')
        Clog.dbg = True
    else:
        logging.basicConfig(level=logging.INFO, format='%(message)s')

    # Handle the old format and prepend 'series:source' if necessary
    series_source = None
    snap_handles = []
    for handle in args.snap_handles:
        handle = handle.replace('/', ':')
        if ':' not in handle:
            # Snap name only, prepend 'series:source' to the handle
            if not series_source:
                if os.path.exists('kernel-info.yaml'):
                    with open('kernel-info.yaml', encoding='utf-8') as fh:
                        ki = yaml.safe_load(fh)
                    series_source = '{}:{}'.format(ki['series'], ki['source'])
                else:
                    try:
                        handle_set = Handle().lookup_set(os.getcwd(), validate=False)
                    except HandleError as e:
                        cerror(e)
                        sys.exit(1)
                    series_source = '{}:{}'.format(handle_set.series.codename,
                                                   handle_set.source.name)
                cinfo('# Use source handle: {}'.format(series_source))
            handle = series_source + ':' + handle
        snap_handles.append(handle)

    # Some basic verification on the provided handles and fill with snapcraft data
    scd = {}
    for sh in snap_handles:
        part = sh.split(':')
        if len(part) != 3:
            cerror('{} is not in *:*:* format!'.format(sh))
            sys.exit(1)
        snapname = part[2]
        try:
            scd[snapname] = SnapcraftData(snapname)
        except SnapcraftDataError as e:
            cerror(e)
            sys.exit(1)

    # Generate the list of snaps that are not in expected channels from
    # SWM data
    snaps = []
    status = SwmStatus()
    for bug_data in status.trackers.values():
        snapname = bug_data.get("snap-name")
        reason = bug_data.get("reason")
        if not snapname or not reason:
            continue

        series = bug_data["series"]
        source = bug_data["source"]

        for task, phase_status in reason.items():
            if "snap-release-to-" in task:
                # snap <name> not in expected channel(s): <dest> ...
                # <dest>: arch=<arch>:channel=<channel>/<risk>:rev=<revision>
                parts = phase_status.partition(" not in expected channel(s): ")
                if parts[2]:
                    snaps.append([series, source, snapname, parts[2]])

    # Walk through the snap candidates and collect the ones we specified
    todo = {}
    for series, source, snapname, destination in snaps:
        snaphandle = '{}:{}:{}'.format(series, source, snapname)
        if snaphandle not in snap_handles:
            continue
        for dst in destination.split():
            # arch=<arch>:channel=<channel>/<risk>:rev=<revision>
            snapvars = {}
            for subpart in dst.split(':'):
                name, value = subpart.split('=')
                snapvars[name] = value
            arch = snapvars['arch']
            channel = snapvars['channel']
            if 'latest/' in channel:
                channel = channel.split('/')[1]
            if 'rev' not in snapvars:
                cerror('# {}/{} needs to be produced'.format(snapname, channel))
                continue
            rev = snapvars['rev']
            if rev == 'None':
                cerror('# {}/{} needs to be produced'.format(snapname, channel))
                continue
            if scd[snapname].data[arch].get(channel, [None, None])[1] == rev:
                cinfo('# {}: {}(rev={}) already on {}'.format(arch, snapname, rev, channel))
                continue
            todo.setdefault(snapname, {})
            todo[snapname].setdefault(arch, {})
            todo[snapname][arch].setdefault(rev, [])
            todo[snapname][arch][rev].append(channel)

    if len(todo) == 0:
        cerror('Nothing to do!')
        sys.exit(2)

    for snapname, arches in todo.items():
        for arch, revs in arches.items():
            for rev, channels in revs.items():
                chanlist = ','.join(channels)
                cmd = 'snapcraft release {} {} {}'.format(snapname, rev, chanlist)
                if args.dry_run:
                    cinfo('DRYRUN: ' + cmd)
                else:
                    rc, output = run_command(cmd)
                    if rc != 0:
                        cerror('Failed to run "{}"'.format(cmd))
                        sys.exit(1)
                    for line in output:
                        cinfo(line)

# vi:set ts=4 sw=4 expandtab syntax=python:
