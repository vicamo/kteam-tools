#!/usr/bin/env python3
#
# cranky list-routing: Print the routing information for a kernel package
#                      in a pretty table.
#
# Copyright (C) 2018, Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

import argparse
import logging
import os
import sys

from crl.handle import Handle, HandleError
from ktl.log import cdebug, cerror


def print_table(routing):
    """
    Print the routing information in a pretty table
    """
    # Table header
    table = [["Destination", "Archive/PPA", "Pocket"]]

    # Rearrange the routing info
    for route in routing.routes:
        for i, destination in enumerate(route):
            archive, pocket = destination.reference, destination.pocket
            table.append([destination.name, archive,
                          "-" if archive.startswith("ppa:") else pocket])

    # Determine the max width of each column
    widths = [len(max(col, key=len)) for col in zip(*table)]

    # Insert a header separator
    table.insert(1, ["-" * w for w in widths])

    # Print the formatted data
    for row in table:
        print('|'.join((" {:%d} " % w).format(r) for w, r in zip(widths, row)))


if __name__ == "__main__":
    desc = """
List the known routing information for a kernel package (set).
"""

    epilog = """
Examples:
  $ cranky list-routing
      Print the routing information for the current working directory.

  $ cranky list-routing bionic:linux
      Print the routing information for the Bionic 'linux' kernel package set.

  $ cranky list-routing /path/to/a/kernel/package/directory
      Print the routing information for the specified kernel directory.
"""

    parser = argparse.ArgumentParser(description=desc, formatter_class=
                                     argparse.RawDescriptionHelpFormatter,
                                     epilog=epilog, prog="cranky list-routing")
    parser.add_argument("handle", nargs='?', help="Handle to a kernel source "
                        "tree, either a path to a kernel source tree or a "
                        "handle in <series>:<package> format. If not given "
                        "the current working directory is used.")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Increase verbosity.")
    args = parser.parse_args()

    # Setup the logger
    level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(level=level, format="%(message)s")

    try:
        handle = Handle().lookup_set(args.handle if args.handle else
                                     os.getcwd(), validate=False)
    except HandleError as e:
        cerror(e)
        sys.exit(1)

    # Print the data
    cdebug("Routing information for '%s:%s':" % (handle.series.codename,
                                                 handle.source.name))
    print_table(handle.source.routing)
