#!/bin/bash -eu
export LC_ALL=C.UTF-8

cranky_cmd="${P:-$(basename "$0")}"
default_git_cmd="git log --oneline"
default_exclude="UBUNTU: (Ubuntu-|link-to-tracker:|Start new release|upstream stable to)"

usage() {
	cat << EOF
Usage: ${cranky_cmd} [-h|--help]

List all the relevant changes since the last release in the
debian.BRANCH directory of the base kernel of a derivative. This list
should be used as a guide for things that might need to be ported to a
derivative.

Optional arguments:
  -g, --git-cmd         Git command used to list the changes (default:
                        "$default_git_cmd")
  -x, --exclude         Extended regular expression to exclude commits
                        by commit message (default: "$default_exclude")
  -a, --all             Show all commits (same as -x "").
  -h, --help            Show this help message and exit.

Examples:
  List changes in the base kernel since the last release:
    \$ ${cranky_cmd}

  Do not exclude changes as "Start new release" and "link-to-tracker":
    \$ ${cranky_cmd} -a

  Use tig to navigate through the listed commits:
    \$ ${cranky_cmd} -g tig

Configuration file:
  ~/.cranky is a yaml format configuration file where the optional commandline
  options can be specified. Note that options specified via the commandline
  take precedence over options from the configuration file.

  Example ~/.cranky section:
  ---
    review-master-changes:
      git-cmd: '$default_git_cmd'
      exclude: '$default_exclude'

EOF
}

# Given a master kernel version for example taken from the changelog), return
# the commit ID of the release of that kernel version in the current tree.
version2commit() {
	base_version="$1"

	# Find a remote tag that matches the base_version
	parent_src=$(dpkg-parsechangelog -l"$DEBIAN_MASTER"/changelog -SSource | sed -e 's/^linux//')
	base_tag=$(git ls-remote --tags "$RELEASE_REPO" |
			   awk '{sub(/^.*\//, "", $2); print $2}' |
			   grep -E 'Ubuntu'"$parent_src"'-'"$base_version"'$' |
			   sort | tail -n1)
	if [ -z "$base_tag" ]; then
		echo "Could not find a base tag for $base_version in the remote: $RELEASE_REPO"
		exit 1
	fi

	# Fetch the previous base version for review
	if ! output=$(git fetch "$RELEASE_REPO" "$base_tag" 2>&1); then
		echo "Failed to fetch tag \"$base_tag\" from remote $RELEASE_REPO"
		echo "$output"
		exit 1
	fi

	# Get the commit message for the previous base version
	prev_commit_message=$(git rev-list --format=%s --max-count=1 FETCH_HEAD | tail +2)
	if [ -z "$prev_commit_message" ]; then
		echo "Failed to get commit message for tag \"$base_tag\""
		exit 1
	fi

	# Find the previous commit ID in the current tree
	prev_commit_id=$(git rev-list --max-count=1 -F --grep "$prev_commit_message" HEAD)
	if [ -z "$prev_commit_id" ]; then
		echo "Failed to get the previous base commit id in the current branch."
		exit 1
	fi

	printf "%s" "$prev_commit_id"
}

# Load values from the config file and fallback to the default values
git_cmd=$("$C" shell-helper config review-master-changes.git-cmd .)
git_cmd="${git_cmd:-$default_git_cmd}"
exclude=$("$C" shell-helper config review-master-changes.exclude .)
exclude="${exclude:-$default_exclude}"

while [ "$#" -gt 0 ]; do
	case "$1" in
		-h|--help)
			usage
			exit 0
			;;
		-g|--git_cmd)
			shift
			git_cmd="$1"
			;;
		-x|--exclude)
			shift
			exclude="$1"
			;;
		-a|--all)
			exclude=""
			;;
		*)
			usage
			exit 1
			;;
	esac
	shift
done


DEBIAN=
# shellcheck disable=SC1091
. debian/debian.env

# Check if the "$DEBIAN" directory exists.
if [ ! -d "$DEBIAN" ]; then
	echo "You must run this script from the top directory of this repository."
	exit 1
fi

CONF="$DEBIAN/etc/update.conf"
if ! [ -f "$CONF" ]; then
	echo "\"$CONF\" is missing! Skipping non derivative kernel."
	exit 0
fi

RELEASE_REPO=
DEBIAN_MASTER=
# shellcheck disable=SC1090
. "$CONF"

# Check if changelog is open
series=$(dpkg-parsechangelog -l"$DEBIAN/changelog" -SDistribution)
if [ "$series" != 'UNRELEASED' ]; then
	echo "The last entry of the changelog is already released."
	echo "You should run \"$cranky_cmd\" before closing the release."
	exit 1
fi

if [ "$DEBIAN_MASTER" = "" ]; then
	echo "DEBIAN_MASTER should be defined either in $DEBIAN/etc/update.conf or the environment"
	exit 1
fi

if [ "$RELEASE_REPO" = "" ]; then
	echo "RELEASE_REPO should be defined either in $DEBIAN/etc/update.conf or the environment"
	exit 1
fi

# Loop through each entry of the current changelog, searching for an
# entry that refers to the master version used as base (ie a line
# containing "[ Ubuntu: 4.15.0-39.42 ]"):
offset=0
base_version=
while true; do
	changes=$(dpkg-parsechangelog -l"$DEBIAN/changelog" -SChanges -c1 -o"$offset")
	if ! [ "$changes" ]; then
		echo "Failed to retrieve base master version from changelog file: $DEBIAN/changelog"
		exit 1
	fi
	base_version=$(echo "$changes" |
			sed -n -r -e '/^\s.*\[ Ubuntu: ([~0-9.-]*) \]$/{s//\1/p;q}' |
			sed -e 's/~/_/')
	[ "$base_version" ] && break
	offset=$((offset + 1))
done

if [ -z "$base_version" ]; then
	echo "Couldn't find the previous version of the base kernel in the changelog."
	exit 1
fi

prev_commit_id="$(version2commit "$base_version")"

echo "Listing changes in \"${DEBIAN_MASTER}/\" since $prev_commit_id..."
echo

exclude_arg=()
if [ "$exclude" != '' ]; then
	exclude_arg=('--invert-grep' '-E' "--grep=$exclude")
fi
$git_cmd "${exclude_arg[@]}" "$prev_commit_id".. -- "${DEBIAN_MASTER}/"
