#!/usr/bin/env python3

import os
import sys
import argparse
import subprocess
import logging

from ktl.debian import Debian
from ktl.log import Clog, cerror, cinfo, cdebug
from ktl.utils import run_command


class CrankyStart():

    def __init__(self, dry_run=False, debug=False, ignore_abi_errors=False):
        self.dry_run = dry_run
        self.debug = debug
        self.ignore_abi_errors = ignore_abi_errors

    def main(self):
        """
        Main method.
        """
        # Get the kernel series information for the current kernel.
        # That should be the first step because it will throw an error
        # if the current directory is not a valid kernel.
        cinfo("Checking kernel series info")
        kernel_source = Debian.get_source_from_kernel_series()
        cdebug("Target kernel: %s" % kernel_source)

        # Abort if the last changelog entry is still open (ie UNRELEASED).
        cinfo("Checking changelog")
        series = Debian.changelog()[0]["series"]
        if series == series.upper():
            cerror("ERROR: Invalid series: %s" % series)
            sys.exit(1)

        # Call update-from-*master script as first thing.
        self.update_backport()

        # Create the start new release commit. That should be
        # performed to all kinds of kernels.
        self.start_new_release()

        # Re-order commits.
        self.reorder_start_commit()

    def start_new_release(self):
        """
        TODO: re-implement maint-startnewrelease here
        """
        # Start clean
        cinfo("Running fdr clean")
        rc = Debian.fdr("clean", dry_run=self.dry_run)
        if rc:
            cerror("Failed to run fdr.")
            sys.exit(1)

        # Call maint-startnewrelease
        cinfo("Running maint-startnewrelease")
        cmd = os.path.realpath(
            os.path.join(os.path.dirname(__file__),
                         "..", "maintscripts",
                         "maint-startnewrelease")) + " --local"
        (rc, output) = run_command(cmd, dry_run=self.dry_run, dbg=self.debug)
        if rc != 0:
            cerror("Failed to create the start new release commit.")
            cerror("\n".join(output))
            sys.exit(1)

        # Check for the ABI existence
        self.check_abi()

    def check_abi(self):
        """
        Abort if ABI is missing.
        """
        if self.ignore_abi_errors:
            cinfo("Skipping ABI check")
            return
        # Check for the ABI existence
        cinfo("Checking ABI")
        version = Debian.changelog()[0]["version"]
        (arch_abis, _) = Debian.abi_arch()
        for arch, contents in arch_abis.items():
            if not contents:
                cerror("No architecture-specific ABI directory found. " +
                       "Please check \"debian.*/etc/getabis\" or " +
                       "run with \"--ignore-abi-errors\".")
                sys.exit(1)
        cinfo("No ABI issues")

    def update_backport(self):
        cinfo("Running update-from-*master script")
        os.putenv("SKIP_REBASE_IF_UPTODATE", "1")
        rc = Debian.update_from_master(dry_run=self.dry_run)
        if rc:
            cerror("Failed to run update-from-*master.")
            sys.exit(1)

        # Unstage the changelog, cause that's gonna be changed in a different way
        changelog = Debian.debian_env() + "/changelog"
        rc, output = run_command("git checkout HEAD " + changelog, dry_run=self.dry_run)
        if rc:
            cerror("Failed to unstage the changelog.")
            sys.exit(1)

    def reorder_start_commit(self):
        # Get last closing commit. The start new release needs to be placed
        # after it.
        (rc, output) = run_command(
            "git log --oneline --pretty='%h %s' | " +
	    "awk '/^[^ ]+ UBUNTU:\s+Ubuntu-/ { print $1; exit; }'")
        if rc != 0 or not output:
            cwarn("Failed to get last closing commit. " +
                  "Skipping commit re-ordering...")
            return
        # Rebase the commits after the closing commit
        cinfo("Re-ordering start new release commit")
        result = subprocess.run(
            "git rebase -i \"%s\"" % output[0],
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            env={
                # Use ex(vi) to re-order the commits:
                # 1. Remote blank lines and comments
                # 2. Delete the last line
                # 3. Paste at the beginning of the file
                # 4. Save it and exit
                "GIT_SEQUENCE_EDITOR": "ex -s +'g!/^p/d' +'-0d' '+0pu' +'wq'",
                "HOME": os.environ['HOME']
            })
        if result.returncode != 0:
            cerror("Failed to re-order commits:")
            cerror(result.stdout.decode())
            sys.exit(1)


if __name__ == "__main__":

    desc = """
Create a start new release commit, adding a new changelog entry, updating the
latest ABI files and performing sanity checks.
"""

    epilog = """
"""

    formatter = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(description=desc, epilog=epilog,
                                     formatter_class=formatter,
                                     prog="cranky start")
    parser.add_argument("--dry-run", action="store_true", default=False,
                        help="do not make any changes, " +
                        "just show what would be done")
    parser.add_argument("--debug", action="store_true", default=False,
                        help="output debug level logs")
    parser.add_argument("--ignore-abi-errors", action="store_true",
                        default=False, help="ignore missing ABI files")
    parser.add_argument("--force", action="store_true", default=False,
                        help="cranky open is preferred over cranky start, " +
                        "give this option to use cranky start instead")
    args = parser.parse_args()

    Clog.color = True
    if args.debug:
        logging.basicConfig(level=logging.DEBUG,
                            format="%(levelname)s - %(message)s")
        Clog.dbg = True
    else:
        logging.basicConfig(level=logging.INFO, format="%(message)s")

    if not args.force:
        cerror("cranky open should be used instead of cranky start.")
        cerror("If you really intend to use cranky start, please use --force.")
        sys.exit(1)

    cranky_start = CrankyStart(dry_run=args.dry_run, debug=args.debug,
                               ignore_abi_errors=args.ignore_abi_errors)
    cranky_start.main()

# vi:set ts=4 sw=4 expandtab syntax=python:
