#!/bin/bash -eu

C=${C:-cranky}

function out()
{
	rc=${?}

	if [ ${rc} -ne 0 ] ; then
		echo "Error: Script failed" >&2
	fi

	exit ${rc}
}

function usage()
{
	cat <<EOF
Usage: ${C} update-dkms-versions [-h] [-r REPO] [-b BRANCH] [-s SRU_CYCLE] [-x]

Update DKMS versions file debian.<variant>/dkms-versions.

Optional arguments:
  -h, --help                  Show this help message and exit.
  -r, --remote-repo REPO
  -b, --remote-branch BRANCH
  -s, --sru-cycle SRU_CYCLE
  -x, --debug                 Set -x.
EOF
}

remote_repo=
remote_branch="main"
sru_cycle=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-r|--remote-repo)
			shift
			remote_repo=${1}
			;;
		-b|--remote-branch)
			shift
			remote_branch=${1}
			;;
		-s|--sru-cycle)
			shift
			sru_cycle=${1}
			;;
		-x|--debug)
			set -x
			;;
		*)
			echo "Unexpected argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

if ! [ -d debian ] ; then
	echo "Not in a Debian package tree" >&2
	exit 1
fi

if [ -f update-dkms-versions ] ; then
	echo "In-tree update-dkms-versions script exists, you should use that" >&2
	exit 1
fi

trap out EXIT INT TERM HUP

# Determine the DEBIAN directory. Note that this script must also run for
# lrm packages which don't have debian/debian.env
DEBIAN=debian
if [ -f debian/debian.env ] ; then
	# shellcheck disable=SC1091
	. debian/debian.env
fi

if [ -z "${sru_cycle}" ] ; then
	if [ -f "${DEBIAN}"/tracking-bug ] ; then
		read -r _x sru_cycle _x <"${DEBIAN}"/tracking-bug
		sru_cycle=${sru_cycle%-*}
	fi
	if [ -z "${sru_cycle}" ] ; then
		echo "sru-cycle not found in ${DEBIAN}/tracking-bug; specify --sru-cycle" >&2
		exit 1
	fi
fi

if [ -z "${remote_repo}" ] ; then
	case "${sru_cycle}" in
		c[0-9][0-9][0-9][0-9].[0-9][0-9].[0-9][0-9])
			remote_repo="security"
			;;
		*)
			remote_repo="main"
			;;
	esac
fi

case "${remote_repo}" in
	security)
		remote_repo="git://git.launchpad.net/~canonical-kernel-security-team/canonical-kernel-private/+git/kernel-versions"
		remote_name="security"
		;;
	main)
		remote_repo="git://git.launchpad.net/~canonical-kernel/+git/kernel-versions"
		remote_name="main"
		;;
	*)
		remote_name="adhoc"
		;;
esac

#
# kernel-versions repository dkms-version mapping see below for details:
#  https://git.launchpad.net/~canonical-kernel/+git/kernel-versions/plain/README
#
kv_repo=${HOME}/.cache/kernel-versions-bare

if ! [ -d "${kv_repo}" ] ; then
	mkdir -p "${kv_repo}"
fi

(
	cd "${kv_repo}"
	if ! [ -f config ] ; then
		git init --quiet --bare
	fi
	current_url=$(git config remote."${remote_name}".url || true)
	if [ -z "${current_url}" ] ; then
		git remote add "${remote_name}" "${remote_repo}"
	elif [ "${current_url}" != "${remote_repo}" ] ; then
		git config remote."${remote_name}".url "${remote_repo}"
	fi
	git fetch --quiet --prune "${remote_name}"
)

git_prefix=${remote_name}/${remote_branch}:
obj_type=$(git -C "${kv_repo}" cat-file -t "${remote_name}/${remote_branch}:devel" 2>/dev/null || true)
if [ -n "${obj_type}" ] ; then
	git_base_devel=${git_prefix}devel
else
	git_base_devel=${git_prefix}tip
fi
git_base=${git_prefix}${sru_cycle}
git_human=${remote_name}/${sru_cycle}

# Determine if we have this cycle
obj_type=$(git -C "${kv_repo}" cat-file -t "${git_base}" 2>/dev/null || true)
if [ -z "${obj_type}" ] ; then
	# If we don't have the cycle in the development cycle then
	# fall back to master
	case "${sru_cycle}" in
		d*)
			git_base=${git_base_devel}
			;;
		*)
			echo "${sru_cycle}: sru-cycle not found in ${remote_repo}" >&2
			exit 1
			;;
	esac
fi

# Determine our series and mainline version from our own changelog
our_series=$(LC_ALL=C dpkg-parsechangelog -l"${DEBIAN}"/changelog -SDistribution)
if [ "${our_series}" = "UNRELEASED" ] ; then
	our_series=$(LC_ALL=C dpkg-parsechangelog -l"${DEBIAN}"/changelog -o1 -c1 -SDistribution)
fi
our_mainline=$(LC_ALL=C dpkg-parsechangelog -l"${DEBIAN}"/changelog -SVersion | sed -e 's/-.*//')
our_package=$(LC_ALL=C dpkg-parsechangelog -l"${DEBIAN}"/changelog -SSource)
our_source=${our_package/-restricted-modules/}
case "${our_package}" in
	linux-restricted-modules*)
		our_type="lrm"
		;;
	*)
		our_type="main"
		;;
esac

# Update rules are complex. We update development series kernels to the
# versions in development. For stable series we update versions against
# the series in which our prime kernel was built. This is expressed
# via the map/dkms-versions namespace. Attempt to map via our series
# and then our mainline-version.

# Try and find a package specific dkms-versions fragment.  Try:
#  handle+type
#  mainline+type
#  series+type
#  series			- backwards compatibility
#  mainline			- backwards compatibility
version_path_tails=(
	"${our_series}:${our_source}:${our_type}"
	"${our_series}:${our_mainline}:${our_type}"
	"${our_series}:${our_type}"
	"${our_mainline}:${our_type}"
	"${our_series}"
	"${our_mainline}"
)
for versions_path_tail in "${version_path_tails[@]}" ; do
	echo "II: trying ${versions_path_tail} ..."
	readarray -t versions_paths < <(git -C "${kv_repo}" cat-file -p "${git_base}/map/dkms-versions/${versions_path_tail}" 2>/dev/null || true)
	if [ ${#versions_paths[@]} -gt 0  ] ; then
		break
	fi
done

if [ ${#versions_paths[@]} -eq 0 ] ; then
	echo "Unable to identify dkms-versions mapping" >&2
	exit 1
fi

echo "git_base<${git_base}> versions_paths<${versions_paths[*]}>"
echo "II: grabbing dkms-versions from ${sru_cycle} ${versions_paths[*]}"

dkms_versions=${DEBIAN}/dkms-versions

rm -f "${dkms_versions}".new
for versions_path in "${versions_paths[@]}" ; do
	# Handle / prefix as absolute within the path.
	case "$versions_path" in
	/*)	path=${git_prefix}${versions_path#/} ;;
	*)	path=${git_base}/${versions_path} ;;
	esac
	if ! (git -C "${kv_repo}" cat-file -p "${path}") >> "${dkms_versions}".new ; then
		echo "Unable to download an updated dkms-versions file (path=$path)" 2>&1
		exit 1
	fi
done
mv "${dkms_versions}".new "${dkms_versions}"

git add "${dkms_versions}"
things=("${dkms_versions}")

if [ "${dkms_versions}" != debian/dkms-versions ] && [ -e debian/dkms-versions ] ; then
	# Remove the legacy debian/dkms-versions file from the
	# main tree (but not the lrm tree!)
	git rm debian/dkms-versions
	things+=(debian/dkms-versions)
fi

if ! git diff --cached --exit-code -- "${things[@]}" >/dev/null ; then
	git commit -m "UBUNTU: [Packaging] ${dkms_versions} -- update from kernel-versions (${git_human})" \
	           -m "BugLink: https://bugs.launchpad.net/bugs/1786013" \
	           -s -- "${things[@]}"
else
	echo "${things[*]}: No changes from kernel-versions"
fi
