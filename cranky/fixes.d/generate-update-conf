#!/usr/bin/env python3

# This script generates update.conf used by in-tree helper scripts used to
# produce Ubuntu kernel commits.

import glob
import os
import re
import sys

# Add ../libs to the Python search path
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir, "libs")))

from ktl.debian import Debian
from ktl.shell import sh

cycle = None

if len(sys.argv) == 2:
    cycle = sys.argv[1]
elif len(sys.argv) != 1:
    sys.exit(1)

# Identify parental package if we are derived.
source = Debian.get_source_from_kernel_series(cycle=cycle)
parent_source = source.derived_from
if parent_source is None:
    print("  not a derived package", file=sys.stderr)
    sys.exit(0)

# Find the primary package for this source.
for parent_package in parent_source.packages + [None]:
    if parent_package is None or parent_package.type is None:
        break
if parent_package is None:
    print("  parent package has no main package?!?", file=sys.stderr)
    sys.exit(0)

if parent_package.repo is None:
    print("  parent main package has no repository listed", file=sys.stderr)
    sys.exit(0)

# Emit the parental repository configuration.
print("# WARNING: we do not create update.conf when we are not a")
print("# derivative. Various cranky components make use of this.")
print("# If we start unconditionally creating update.conf we need")
print("# to fix at least cranky close and cranky rebase.")
print("RELEASE_REPO=" + parent_package.repo.url)
if parent_package.repo.branch:
    print("SOURCE_RELEASE_BRANCH=" + parent_package.repo.branch)

# Retrieve DEBIAN_MASTER directly from kernel-series.yaml instead
# of spinning over the debian.*/ directories. Checking the local
# directories doesn't work well, since we might need to rebase the
# kernel first to get the updated DEBIAN_MASTER value and we need to
# update DEBIAN_MASTER in order to rebase it with cranky rebase.
#
# We check the parent kernel's name and assume "debian.master" for
# "linux" or "linux-NN.MM" or "linux-unstable" and "debian.BRANCH" for
# "linux-BRANCH":
parent_name = parent_source.name.split("-", 1)  # ['linux', 'BRANCH']
if len(parent_name) <= 1 or re.match("\d+\.\d+$", parent_name[1]) or parent_name[1] == "unstable":
    master_branch = "master"
else:
    master_branch = parent_name[1]
print("DEBIAN_MASTER=debian." + master_branch)

# Dump the version suffix that should be used for backports. "fdr
# startnewrelease" will use it to build the new release version
# following the format "${PARENT_VERSION}${BACKPORT_SUFFIX}.N":
#
# This falls into three categories:
# 1) back-ports    -- ~20.04  (5.15.0-30.31~20.04.1)
# 2) forward-ports -- +22.04  (5.15.0-30.31+22.04.1)
# 3) "same"-ports  -- empty   (5.15.0-30.31.1)
# 3.1) "same"-ports for fips may use +fips instead of empty
# 3.2) "same"-ports with regular 1000 abi numbers may simply force
#      local-mangle usage
#
# Note that an empty suffix empty is represented by '--' such that
# an empty variable still indicates the non-backport case.
if source.backport:
    series = int(source.series.name.replace(".", ""))
    parent_series = int(parent_source.series.name.replace(".", ""))
    if series == parent_series:
        suffix = "--"
        # get lastversion and lastabi
        lastversion = Debian.changelog()[0]["version"]
        lastabi = int(lastversion.split("-")[1].split(".")[0])
        if "+fips" in lastversion:
            suffix = "+fips"
        elif lastabi > 1000:
            suffix = ""
    elif series > parent_series:
        suffix = "+{series}"
    else:
        suffix = "~{series}"
    if suffix:
        print("BACKPORT_SUFFIX=" + suffix.format(series=source.series.name))
    else:
        print("BACKPORT_NO_SUFFIX=1")
