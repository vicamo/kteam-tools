#!/bin/bash

if [ "$#" -ne 1 -a "$#" -ne 2 ]; then
	echo "Usage: $0 <build-ppa> [<ps-ppa>]" 1>&2
	exit 1
fi
if [ "$#" -eq 1 ]; then
	set - "$1" "$1-ps"
fi
ppa="$1"
ppa_ps="$2"

here=$(dirname $(readlink -f "$0"))

echo "II: scanning $ppa $ppa_ps ..."

uploaded="UPLOADED"
[ ! -f "$uploaded" ] && touch "$uploaded"
ignore="IGNORE-BUILD"
[ ! -f "$ignore" ] && touch "$ignore"

"$here/ancillary-lookup" "$ppa" "$ppa_ps" "$uploaded" "$ignore" | \
while read id source upload_to visibility urls
do
	if [ "$urls" = '-' ]; then
		if [ -d "$id" ]; then
			echo "$id: ancillaries confirmed uploaded"
			rm -rf "$id"
		fi
		if [ $(egrep -c "^$id\$" "$uploaded") -ne 0 ]; then
			echo "$id" >>"$uploaded"
		fi
		continue
	fi

	if [ -d "$id" ]; then
		if [ -f "$id/ignore" ]; then
			echo "$id: non-ancillary form, ignored"
			echo "$id" >>"$ignore"
			rm -rf "./$id/"
			continue
		fi
		(
			cd "$id" || exit 1
			# If the uploads failed, the we should retry them periodically.
			for upload in *_source.changes
			do
				case "$upload" in
				linux-restricted-*)
					if [ "$visibility" != "private" ]; then
						echo "ERROR: $id: attempting to upload $upload to $visibility PPA" 1>&2
						exit 1
					fi
					;;
				esac
				echo "$id: re-uploading $upload (to $visibility $upload_to) ..."
				timeout 5m dput ${ANCILLARY_DPUTCF:+-c $ANCILLARY_DPUTCF} "$upload_to" "$upload"
			done
		)
		arc="$?"
		echo "$id: complete, rc=$arc"
		continue
	fi

	echo "$id: needed"
	mkdir "$id" || exit 1
	(
		cd "$id" || exit 1

		arc=0

		echo "$id: downloading source ..."
		for url in $urls
		do
			out=$(basename "$url" | sed -e 's/?.*$//')
			wget -O "$out" $url || arc="$?"
		done
		if [ "$arc" = 0 ]; then
			echo "$id: extracting source ..."
			dpkg-source -x $source*.dsc || arc="$?"
		fi
		if [ "$arc" != 0 ]; then
			echo "$id: source download/extract failed, marking retry"
			touch "retry"
			exit 1
		fi

		# Confirm this is the appropriate form.
		if [ -d $source-*/debian/ancillary ]; then
			"$here/../sbin/oops-stream" "ancillary-bot-direct" "$here/ancillary-prepare-direct" "$id" "$source"
			arc="$?"

		else
			echo "$id: non-ancillary form, marking ignored"
			touch "ignore"
			arc="1"
		fi

		if [ "$arc" != 0 ]; then
			echo "$id: ancillary build failed, rc=$arc"
			exit "$arc"
		fi

		for upload in *_source.changes
		do
			echo "$id: signing $upload ..."
			debsign ${ANCILLARY_KEYID:+-k $ANCILLARY_KEYID} "$upload"
		done
		for upload in *_source.changes
		do
			case "$upload" in
			linux-restricted-*)
				if [ "$visibility" != "private" ]; then
					echo "ERROR: $id: attempting to upload $upload to $visibility PPA" 1>&2
					exit 1
				fi
				;;
			esac
			echo "$id: uploading $upload (to $visibility $upload_to) ..."
			timeout 5m dput ${ANCILLARY_DPUTCF:+-c $ANCILLARY_DPUTCF} "$upload_to" "$upload"
		done
	)
	rc="$?"
	echo "$id: ancillary build complete rc=$rc"

	# If this id's download was marked ignore record that and zap it.
	if [ -f "$id/ignore" ]; then
		echo "$id" >>"$ignore"
		rm -rf "./$id/"
	fi
	# If this id's download was marked for retry, zap it for next run.
	if [ -f "$id/retry" ]; then
		rm -rf "./$id/"
	fi
done
RC=("${PIPESTATUS[@]}")
if [ "${RC[0]}" != "0" ]; then
        echo "EE: lookup failed" 1>&2
        exit "${RC[0]}"
fi
if [ "${RC[1]}" != "0" ]; then
        echo "EE: processing failed" 1>&2
        exit "${RC[1]}"
fi
exit 0
