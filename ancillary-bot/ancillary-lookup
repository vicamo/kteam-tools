#!/usr/bin/python3
from __future__ import print_function

import json
import os
import shlex
import sys

from launchpadlib.credentials import AuthorizeRequestTokenWithURL
from launchpadlib.launchpad import Launchpad

from ktl.kernel_series import KernelSeries

cred_file = os.path.join(os.path.expanduser("~/.config"), "ancillary-bot", "credentials-production")
authorization_engine = AuthorizeRequestTokenWithURL(service_root='production',
    consumer_name='ancillary-bot')
lp = Launchpad.login_with(service_root='production', version='devel',
    authorization_engine=authorization_engine, credentials_file=cred_file)

# Work around a redirect handling issue in python3-lazr.restfulclient
# which fails when trying to carry over non-GET requests.  Look up
# my name (via +me), and then manually resolve that name to a user.
me_name = lp.me.name
me = lp.people[me_name]

primary_ref, adjunct_ref, uploaded_list, broken_list = sys.argv[1:]

primary = lp.archives.getByReference(reference=primary_ref)
if primary is None:
    raise ValueError("primary reference {} invalid".format(primary_ref))

# If we have an adjunct specified then grab a reference and double check
# the PPA is private.
if adjunct_ref != "-":
    adjunct = lp.archives.getByReference(reference=adjunct_ref)
    if adjunct is None:
        raise ValueError("adjunct reference {} invalid".format(adjunct_ref))
    if not adjunct.private:
        raise ValueError("adjunct archive {} not private".format(adjunct_ref))

# If the primary PPA is private then we can use it as the adjunct.
elif primary.private:
    adjunct_ref = primary_ref
    adjunct = primary

# Otherwise we do not have one.
else:
    adjunct = None

ignore_builds = set()
for ignore_list in (uploaded_list, broken_list):
    with open(ignore_list) as ilfd:
        for ignore in ilfd:
            ignore_builds.add(ignore.strip())

ks = KernelSeries()

# Run the list of packages and work out which ones have ancillaries.
ancillaries = {}
for ks_series in ks.series:
    if not ks_series.supported and not ks_series.development:
        continue
    for ks_source in ks_series.sources:
        for ks_package in ks_source.packages:
            ancillary_for = ks_package.ancillary_for
            if ancillary_for is None:
                continue
            #print(ks_source, ks_package, ks_package.type, ancillary_for.type)
            ancillaries.setdefault(ancillary_for.type, set()).add(ancillary_for.name)

ancillary_config = []
for ancillary_type, ancillary_packages in ancillaries.items():
    ancillary_config.append((ancillary_type, os.path.commonprefix(list(ancillary_packages))))

# For private PPAs we will have to use the users subscription
# to form the URLs to download the components.  Lookup up any
# such subscription if needed.
subscription = None
if primary.private:
    subscription = me.getArchiveSubscriptionURL(archive=primary)
    if subscription is None:
        raise ValueError("no private subscription")

for prime_type, prime_prefix in ancillary_config:
    primaries = []
    primaries += list(primary.getPublishedSources(source_name=prime_prefix, status='Published', order_by_date=True))
    primaries += list(primary.getPublishedSources(source_name=prime_prefix, status='Pending', order_by_date=True))
    for prime in primaries:
        prime_id = os.path.basename(prime.self_link)
        if prime_id in ignore_builds:
            #print(prime_id, prime.source_package_name, "ignore")
            continue

        # Find the appropriate kernel in kernel-series based on the package name.
        series_name = prime.distro_series_link.split('/')[-1]
        source_name = prime.source_package_name.replace(prime_prefix, 'linux')
        ks_series = ks.lookup_series(codename=series_name)
        ancillary_names = []
        ancillary_ref, ancillary_ppa = None, None
        if ks_series is not None:
            ks_source = ks_series.lookup_source(source_name)
            if ks_source is None:
                for ks_source in ks_series.sources:
                    if ks_source.lookup_package(prime.source_package_name):
                        break
                else:
                    ks_source = None
            if ks_source is not None:
                for ks_package in ks_source.packages:
                    ancillary_for = ks_package.ancillary_for
                    if ancillary_for is not None:
                        if ancillary_for.type == prime_type:
                            ancillary_names.append(ks_package.name)
                            if ks_package.adjunct:
                                ancillary_ref, ancillary_ppa = adjunct_ref, adjunct
                            else:
                                ancillary_ref, ancillary_ppa = primary_ref, primary
        if not len(ancillary_names):
            continue
        if ancillary_ppa is None:
            raise ValueError("adjunct archive required for private ancillaries".format(adjunct_ref))

        #print(series_name, source_name, ancillary_ppa.reference, ancillary_names)

        wanted = '-'
        ancillary_version = prime.source_package_version
        for ancillary_name in ancillary_names:
            #print(" ", ancillary_name, ancillary_version)
            ancillaries = ancillary_ppa.getPublishedSources(exact_match=True, source_name=ancillary_name, version=ancillary_version)
            if len(ancillaries) == 0:
                urls = []
                for url in prime.sourceFileUrls():
                    # Convert the URL into a direct librarian link using our launchpad API
                    # connection to do the initial fetch, limit that so we do not redirect
                    # which will give us the librarian link for it.
                    connection = lp._browser._connection
                    connection.follow_redirects = False
                    url2 = url.replace('https://launchpad.net/', 'https://api.launchpad.net/devel/')
                    (response, content) = connection.request(url2)
                    connection.follow_redirects = True
                    if 'location' in response:
                        url = response['location']

                    elif subscription:
                        deb = os.path.basename(url)
                        package = deb.split('_')[0]
                        prefix = package[0]
                        url = os.path.join(subscription, 'pool', 'main', prefix, package, deb)
                    urls.append(url)
                wanted = ' '.join(urls)
                break

        private = "private" if ancillary_ppa.private else "public"
        print(prime_id, prime.source_package_name, ancillary_ref, private, wanted)
