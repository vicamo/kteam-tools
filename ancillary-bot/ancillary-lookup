#!/usr/bin/python3
from __future__ import print_function

import json
import os
import sys

from launchpadlib.credentials import AuthorizeRequestTokenWithURL
from launchpadlib.launchpad import Launchpad

cred_file = os.path.join(os.path.expanduser("~/.config"), "ancillary-bot", "credentials-production")
authorization_engine = AuthorizeRequestTokenWithURL(service_root='production',
    consumer_name='ancillary-bot')
lp = Launchpad.login_with(service_root='production', version='devel',
    authorization_engine=authorization_engine, credentials_file=cred_file)

# Work around a redirect handling issue in python3-lazr.restfulclient
# which fails when trying to carry over non-GET requests.  Look up
# my name (via +me), and then manually resolve that name to a user.
me_name = lp.me.name
me = lp.people[me_name]

primary_ref, adjunct_ref = sys.argv[1:]

primary = lp.archives.getByReference(reference=primary_ref)
#public = lp.archives.getByReference(reference='ppa:apw/ubuntu/private')
#print(primary)
# XXX: public + '-ps'
adjunct = lp.archives.getByReference(reference=adjunct_ref)
#print(adjunct)

# For private PPAs we will have to use the users subscription
# to form the URLs to download the components.  Lookup up any
# such subscription if needed.
subscription = None
if primary.private:
    subscription = me.getArchiveSubscriptionURL(archive=primary)
    if subscription is None:
        raise ValueError("no private subscription")

for prime_prefix, ancillary_ppa, ancillary_prefixes in (
        ['linux-signed', primary, ['linux-generate']],
        ['linux-restricted-modules', adjunct, ['linux-restricted-generate', 'linux-restricted-signatures']],
    ):

    primaries = []
    primaries += list(primary.getPublishedSources(source_name=prime_prefix, status='Published'))
    for prime in primaries:
        #print(prime)
        prime_id = os.path.basename(prime.self_link)
        wanted = '-'
        for ancillary_prefix in ancillary_prefixes:
            ancillary_name = prime.source_package_name.replace(prime_prefix, ancillary_prefix)
            ancillary_version = prime.source_package_version
            #print(" ", ancillary_name, ancillary_version)
            ancillaries = ancillary_ppa.getPublishedSources(exact_match=True, source_name=ancillary_name, version=ancillary_version)
            if len(ancillaries) == 0:
                urls = []
                for url in prime.sourceFileUrls():
                    if subscription:
                        deb = os.path.basename(url)
                        package = deb.split('_')[0]
                        prefix = package[0]
                        url = os.path.join(subscription, 'pool', 'main', prefix, package, deb)
                    urls.append(url)
                wanted = ' '.join(urls)
                break

        print(prime_id, prime.source_package_name, wanted)
