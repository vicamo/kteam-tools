#!/usr/bin/env python3

from __future__ import print_function

import logging
import os
import sys

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from copy                               import deepcopy

from jira import JIRA

# GreenHopperResource has been renamed to AgileResource in Jira 3.3.0, make
# sure to support both classes.
try:
    from jira.resources import AgileResource
except ImportError:
    from jira.resources import GreenHopperResource as AgileResource

from ktl.msgq                           import MsgQueue, MsgQueueService, MsgQueueCredentials

from secrets import Secrets


class MessageError(Exception):
    pass


# TheApp
#
class TheApp():
    '''
    This class is just the engine that makes everything go.
    '''

    # __init__
    #
    def __init__(s, args):
        '''
        '''
        s.args = args

        s.log = logger

        s.local = args.local
        s.queue = args.queue
        s.direct = args.queue + '--' + args.name
        s.aname = args.name

    # _announce
    #
    def _announce(s, to, message):
        message = to + " " + s.aname + " " + message

        destination = {'type': 'key', 'key': to}
        message = {'subject': message}

        payload = {'destination': destination, 'message': message}

        s.deliver_to(payload)

    def deliver_to(s, payload):
        key = 'announce.' + payload['destination']['type']
        s.mq.publish_threadsafe(key, payload)

    def sanitise(s, payload):
        clean = deepcopy(payload)
        destination = clean.get('destination')
        if destination:
            for key in list(destination):
                if 'password' in key or 'token' in key:
                    destination[key] = '--redacted--'
        return clean

    # _handler
    #
    def _handler(s, payload):
        s.log.info("handler payload={}".format(s.sanitise(payload)))

        try:
            what = payload.get('type', 'message')

            if what == 'quit':
                s.mq.listen_stop()

            elif what == 'message':
                if 'destination' not in payload or 'message' not in payload:
                    raise MessageError("invalid message format")

                destination = payload.get('destination')
                message = payload.get('message')

                try:
                    project = destination.get('project')
                    component = destination.get('component')
                    if project is None:
                        raise MessageError("jira requires project to create issue")

                    subject = message.get('subject', '<to be filled>')
                    body = message.get('body')

                    jira_fields = {
                        'project': {'key': project},
                        'components': [{'name': component}],
                        'issuetype': {'name': 'Task'},
                        'summary': subject,
                        'description': body,
                    }
                    jira_issue = s.jira.create_issue(fields=jira_fields)
                    s.log.info("Created successfully: {}".format(jira_issue.permalink()))
                except Exception as e:
                    s.log.error("SEND FAILED: {}".format(str(e)))

            else:
                raise MessageError("invalid message type")

        except MessageError as e:
            s.log.error("command {} failed: {}".format(str(payload), str(e)))
            s._announce('announce-control', 'command failed')

        except Exception as e:
            s.log.error("command {} exploded: {}".format(str(payload), str(e)))

            s._announce('announce-control', 'exploded')
            raise e

    # main
    #
    def main(s):
        '''
        '''
        retval = 1

        try:
            s.log.info("Starting")

            s.secrets = Secrets(os.path.join(os.environ['HOME'], '.kernel-announcer-jira.yaml'))

            # Connect us to JIRA.
            s.jira = JIRA('https://warthogs.atlassian.net/',
                options={'agile_rest_path': AgileResource.AGILE_BASE_REST_PATH})

            # Pass in credentials if we have them, else use the limited defaults.
            hostname = s.secrets.data.get('amqp-hostname')
            username = s.secrets.data.get('amqp-username')
            password = s.secrets.data.get('amqp-password')
            credentials = None
            if username is not None and password is not None:
                credentials = MsgQueueCredentials(username, password)

            s.mq = MsgQueueService(service='announce', local=s.local, host=hostname, credentials=credentials, exchange='announce-todo', heartbeat_interval=60)

            s._announce('announce-control', 'start')

            q_args = {'x-max-priority': 7}
            s.mq.listen_worker(s.queue, 'announce.jira', s._handler, queue_arguments=q_args)
            s.mq.listen_worker(s.direct, 'direct.{}.announce.jira'.format(s.aname), s._handler, auto_delete=True)

            s.log.info("Listening")
            s.mq.listen_start()

            s._announce('announce-control', 'quit')

            s.log.info("Exiting")
            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            s.log.error("Aborting ...")

        return retval

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I'm a application skeleton, your job is to make me into something useful.
    '''
    app_epilog = '''
examples:
    KernelMQ --help
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--local', action='store_true', default=False, help='Assume we have sshuttle setup to the MQ server.')
    parser.add_argument('--name', default=os.uname().nodename, help='Name of this instance in the admin domain')
    parser.add_argument('--queue', default='announce-jira', help='Name of the queue to use')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    logging.basicConfig(format="%(levelname)05s %(name)s %(message)s")
    logger = logging.getLogger('app')
    logger.setLevel(level=logging.DEBUG if args.debug else logging.INFO)

    app = TheApp(args)
    exit(app.main())


# vi:set ts=4 sw=4 expandtab:

