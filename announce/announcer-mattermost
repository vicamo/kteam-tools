#!/usr/bin/env python3

import asyncio
import json
import logging
import os
import requests
import threading

from argparse import ArgumentParser

from mattermostdriver import Driver
from mattermostdriver.exceptions import ResourceNotFound

from ktl.announce import Announce
from ktl.msgq import MsgQueueService, MsgQueueCredentials

from secrets import Secrets


class AuthBearer(requests.auth.AuthBase):
    def __init__(self, token):
        self.token = token

    def __call__(self, r=None):
        # If we are being 'instantiated' then just return ourselves.
        if r is None:
            return self

        r.headers['Authorization'] = "Bearer {}".format(self.token)
        return r


class MattermostEvents(threading.Thread):

    def __init__(self, exiting, host, secrets=None):
        super(MattermostEvents, self).__init__()

        self.daemon = True
        self.name = 'MattermostEvents'

        self.log = logger.getChild(self.name)

        self.exiting = exiting
        self.host = host
        self.secrets = secrets

        self.event_loop = asyncio.new_event_loop()

    def run(self):
        try:
            self.log.info("Starting")

            asyncio.set_event_loop(self.event_loop)

            host = self.host
            self.log.debug("Driver for connection to {}".format(host))

            password = self.secrets.data['mattermost-token']

            # Setting the 'token' and calling login() should be sufficient to
            # authenticate us.  However, in this mode the existing request
            # authenticator will override the driver added Authorization: Bearer
            # <token> header and replace it with a Authorization: Basic <basic>
            # header.  Therefore supply an authorization class which simply
            # supplies the existing bearer token, and login() as if we had not.
            self.mmDriver = Driver(options={
                'scheme' : 'https',
                'url'    : host,
                'port'   : 443,
                'auth'   : AuthBearer(password),
                'token'  : password,
                #'debug': True,
            })

            self.log.info("verifying basic API access")
            me = self.mmDriver.login()
            self.log.debug(me)

            self.log.info("connecting mattermost websocket")
            websocket = self.mmDriver.init_websocket(self._handler)

            self.log.info("exiting")
            with self.exiting:
                self.exiting.notify()

        except Exception as e:
            self.log.info("exploding")
            with self.exiting:
                self.exiting.notify()
            raise e

    async def _handler(self, payload):
        # Convert the nested json.
        payload = json.loads(payload)
        if payload.get('data', {}).get('post') is not None:
            payload['data']['post'] = json.loads(payload['data']['post'])

        if payload.get('event') != 'posted':
            return
        channel = payload.get('data', {}).get('channel_name')
        message = payload.get('data', {}).get('post', {}).get('message')
        if message is None:
            return

        self.log.info("POST {} {}".format(channel, message))
        if not message.startswith('@shiv '):
            return

        command = message.strip().split()

        source = {'type': 'mattermost', 'channel': channel}
        destination = {'type': 'shankbot'}
        message = {'subject': ' '.join(command[1:])}

        # Reflect to sender.
        if command[1] == 'reflect':
            destination = source

        payload = {'source': source, 'destination': destination, 'message': message}

        self.log.info("delivering {}".format(payload))
        self.announce.deliver_to(payload)

    # NOTE: this implementation must be thread safe.  The mmDriver calls make a new outgoing
    # connection using the associated credentials, they do not use the websocket which the
    # mattermost thread is using.
    def send(self, channel, summary, card=None):
        try:
            channel = self.mmDriver.channels.get_channel_by_name_and_team_name('Canonical', channel)
        except ResourceNotFound:
            self.log.error("mattermost channel {} not found".format(channel))
            return

        options={'channel_id': channel['id'], 'message': summary}
        if card is not None and card != summary:
            options.setdefault('props', {})['card'] = card

        self.mmDriver.posts.create_post(options=options)


class MsgqReader(threading.Thread):

    def __init__(self, exiting, args, mq=None, secrets=None):
        super().__init__()

        self.daemon = True
        self.name = 'MsgqReader'

        self.log = logger.getChild(self.name)

        self.exiting = exiting
        self.mq = mq
        self.secrets = secrets

        self.mattermost = None

        self.queue = args.queue
        self.aname = args.name
        self.direct = self.queue + '--' + self.aname
        self.local = args.local

    # _handler
    #
    def _handler(self, payload):
        self.log.debug("_handler payload={}".format(payload))

        what = payload.get('type', 'message')

        if what == 'quit':
            self.log.info("{} exiting".format(self.name))
            with self.exiting:
                self.exiting.notify()

        elif what == 'message':
            destination = payload.get('destination', {})
            message = payload.get('message', {})

            text = message.get('summary', message.get('subject', '??'))
            self.log.info("delivering {} {}".format(destination.get('channel'), text))
            self.mattermost.send(destination.get('channel'), text, card=message.get('body'))

    # run
    #
    def run(self):
        try:
            if self.mq is None:
                # Pass in credentials if we have them, else use the limited defaults.
                hostname = self.secrets.data.get('amqp-hostname')
                username = self.secrets.data.get('amqp-username')
                password = self.secrets.data.get('amqp-password')
                credentials = None
                if username is not None and password is not None:
                    credentials = MsgQueueCredentials(username, password)

                self.mq = MsgQueueService(service='announce', local=self.local, host=hostname, credentials=credentials, exchange='announce-todo', heartbeat_interval=60)
            self.log.info("announcer MsgQueue {}".format(self.mq))

            self.mq.listen_worker(self.queue, 'announce.mattermost', self._handler)
            self.mq.listen_worker(self.direct, 'direct.{}.announce.mattermost'.format(self.aname), self._handler, auto_delete=True)
            self.log.info("listening")
            self.mq.listen_start()

            self.log.info("exiting")
            with self.exiting:
                self.exiting.notify()

        except Exception as e:
            self.log.info("exploding")
            with self.exiting:
                self.exiting.notify()
            raise e

    # NOTE: this implementation must be thread safe.
    def deliver_to(self, payload):
        key = 'announce.' + payload['destination']['type']
        self.mq.publish_threadsafe(key, payload)


# TheApp
#
class TheApp():
    '''
    This class is just the engine that makes everything go.
    '''

    # __init__
    #
    def __init__(self, args):
        '''
        '''
        self.args = args

        self.log = logger

    # main
    #
    def main(self):

        retval = 1

        try:
            secrets = Secrets(os.path.join(os.environ['HOME'], '.kernel-announcer-mattermost.yaml'))

            exiting = threading.Condition()

            mm = MattermostEvents(exiting,'chat.canonical.com', secrets=secrets)
            mq = MsgqReader(exiting, args, secrets=secrets)

            mm.announce = mq
            mq.mattermost = mm

            mq.start()
            mm.start()

            with exiting:
                exiting.wait()

            self.log.info("Exiting")
            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            self.log.error("Aborting ...")

        return retval

if __name__ == '__main__':
    app_description = '''
I'm a application skeleton, your job is to make me into something useful.
    '''
    parser = ArgumentParser(description=app_description)
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--local', action='store_true', default=False, help='Assume we have sshuttle setup to the MQ server.')
    parser.add_argument('--name', default=os.uname().nodename, help='Name of this instance in the admin domain')
    parser.add_argument('--queue', default='announce-mattermost', help='Name of the queue to use')

    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    logging.basicConfig(format="%(levelname)05s %(name)s %(message)s")
    logger = logging.getLogger('app')
    logger.setLevel(level=logging.DEBUG if args.debug else logging.INFO)

    app = TheApp(args)
    exit(app.main())


# vi:set ts=4 sw=4 expandtab:

