#!/usr/bin/env python3

from __future__ import print_function

import logging
import os
import sys
import time
import traceback

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from subprocess                         import run, PIPE, STDOUT, CalledProcessError

from ktl.msgq                           import MsgQueueService, MsgQueueCredentials

from secrets import Secrets

# TheApp
#
class AnnouncerShankbot():

    def __init__(self, args):
        '''
        '''
        self.args = args

        self.log = logger

        self.queue = 'announce-shankbot'
        self.direct = self.queue + '--' + self.args.name

    # _announce
    #
    def _announce(self, to, message):
        message = to + " " + self.args.name + " " + message

        destination = {'type': 'key', 'key': to}
        message = {'subject': message}

        payload = {'destination': destination, 'message': message}

        self.deliver_to(payload)

    def deliver_to(self, payload):
        key = 'announce.' + payload['destination']['type']
        self.mq.publish(key, payload)

    # _handler
    #
    def _handler(self, payload):
        self.log.info("handler payload={}".format(payload))

        try:
            if 'source' not in payload or 'message' not in payload:
                print(payload)
                raise ValueError("invalid message")

            what = payload.get('type', 'message')

            if what == 'quit':
                s.mq.listen_stop()

            elif what == 'message':
                reply = {'destination': payload.get('source')}

                message = payload.get('message')
                summary = message.get('summary')
                if summary is None:
                    summary = message.get('subject')

                command = summary.strip().split()

                reply['message'] = {'summary': "shankbot: {} starting".format(summary.strip())}
                self.deliver_to(reply)

                command.insert(0, os.path.join(os.path.dirname(__file__), "announcer-shankbot-dispatch"))
                result = run(command, stdout=PIPE, stderr=PIPE)
                body = result.stdout.decode("utf-8")
                if body is not None and body != '':
                    message['body'] = body

                text = "shankbot: {}".format(summary)
                if result.returncode != 0:
                    text += ' failed (rc={})'.format(result.returncode)
                    body_lines = body.split('\n')
                    if len(body_lines) == 2:
                        text += ' -- {}'.format(body_lines[0])
                        del message['body']
                else:
                    text += ' successful'

                control = result.stderr.decode("utf-8")
                if control == 'DIRECT\n':
                    message["summary"] = body + text
                    del message["body"]
                else:
                    message["summary"] = text

                reply['message'] = message
                self.deliver_to(reply)

        except Exception as e:
            self.log.error("announcement failed: {}".format(str(e)))
            self._announce('announce-control', 'exploded')
            raise e


    def main(self):
        '''
        '''
        retval = 1

        try:
            self.log.info("Starting")

            self.secrets = Secrets(os.path.join(os.environ['HOME'], '.kernel-announcer-shankbot.yaml'))

            # Pass in credentials if we have them, else use the limited defaults.
            hostname = self.secrets.data.get('amqp-hostname')
            username = self.secrets.data.get('amqp-username')
            password = self.secrets.data.get('amqp-password')
            credentials = None
            if username is not None and password is not None:
                credentials = MsgQueueCredentials(username, password)

            self.mq = MsgQueueService(service='announce', local=self.args.local, host=hostname, credentials=credentials, exchange='announce-todo', heartbeat_interval=60)

            self._announce('announce-control', 'shankbot start')

            q_args = {'x-max-priority': 7}
            self.mq.listen_worker(self.queue, 'announce.shankbot', self._handler, queue_arguments=q_args)
            self.mq.listen_worker(self.direct, 'direct.{}.announce.shankbot'.format(self.args.name), self._handler, queue_arguments=q_args, auto_delete=True)

            self.log.info("Listening")
            self.mq.listen_start()

            self._announce('announce-control', 'quit')

            self.log.info("Exiting")
            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            self.log.error("Aborting ...")

        return retval

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I'm a application skeleton, your job is to make me into something useful.
    '''
    app_epilog = '''
examples:
    KernelMQ --help
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--local', action='store_true', default=False, help='Assume we have sshuttle setup to the MQ server.')
    parser.add_argument('--name', default=os.uname().nodename, help='Name of this instance in the admin domain')
    parser.add_argument('--queue', default='announce-shankbot', help='Name of the queue to use')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    logging.basicConfig(format="%(levelname)05s %(name)s %(message)s")
    logger = logging.getLogger('app')
    logger.setLevel(level=logging.DEBUG if args.debug else logging.INFO)

    app = AnnouncerShankbot(args)
    exit(app.main())


# vi:set ts=4 sw=4 expandtab:

