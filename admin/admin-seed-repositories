#!/usr/bin/env python3
#
# Seed new repositories with master from the previous series in order to create
# them.
#
# Andy Whitcroft <apw@canonical.com>

import argparse
import logging
import os
from subprocess             import run, PIPE
import sys

from launchpadlib.launchpad             import Launchpad

from ktl.kernel_series      import KernelSeries
from ktl.log                import cerror, cnotice, cwarn


def initialise_repositories(args):
    lp = Launchpad.login_with('admin-lp-seed-respositories', 'production', version='devel')

    ks = KernelSeries()

    old_series = ks.lookup_series(codename=args.old_series)
    if old_series is None:
        cerror("{}: old_series not known".format(args.old_series))
        sys.exit(1)
    new_series = ks.lookup_series(codename=args.new_series)
    if new_series is None:
        cerror("{}: new_series not known".format(args.new_series))
        sys.exit(1)

    for source in new_series.sources:
        for package in source.packages:
            print(source.name, package.name, package.repo)

            # Ignore packages which claim no repositories, for example linux-generate.
            if package.repo is None:
                continue

            # Those which point to an old series should already exist, or are broken, ignore.
            destination = package.repo.url
            if args.new_series not in destination:
                cwarn("{} package url does not reference new series, skipping".format(package.repo.url))
                continue

            new_path = "~" + destination.split("~", 1)[-1]
            if new_path == destination:
                cwarn("{} package url malformed, skipping".format(package.repo.url))
                continue
            owner_name = new_path.split("/")[0][1:]
            owner = lp.people[owner_name]

            print(" ", owner, new_path)
            old_path = new_path.replace("/" + args.new_series, "/" + args.old_series)

            new_repo = lp.git_repositories.getByPath(path=new_path)
            if new_repo is not None:
                cwarn("{} already exists, skipping".format(package.repo.url))
                continue

            old_repo = lp.git_repositories.getByPath(path=old_path)
            print("   old:", old_repo)
            print("   new:", new_repo)

            new_repo = old_repo.fork(new_owner="/~canonical-kernel-team")
            print(new_repo)
            new_repo.name = "mantic"
            new_repo.lp_save()
            new_repo.owner = owner
            new_repo.lp_save()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    desc = """
Initialise all of the repositories for an opening series.
"""

    parser = argparse.ArgumentParser(description=desc, formatter_class=
                                     argparse.RawDescriptionHelpFormatter)
    parser.add_argument("old_series")
    parser.add_argument("new_series")
    args = parser.parse_args()

    initialise_repositories(args)
