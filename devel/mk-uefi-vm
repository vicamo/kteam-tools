#!/usr/bin/env python3

import os
import shutil
import subprocess
import sys
import grp
import tempfile

from argparse import ArgumentParser

class MakeUefiVm:
    def __init__(self):
        libvirt_gid = grp.getgrnam("libvirt").gr_gid
        if libvirt_gid not in os.getgroups():
            raise RuntimeError("User not in libvirt group")

        self.host_arch = (
            subprocess.check_output(["dpkg", "--print-architecture"])
            .decode("UTF-8")
            .strip()
        )

    @property
    def cloud_image_url(self):
        host = "https://cloud-images.ubuntu.com"
        return "{}/{}/current/{}-server-cloudimg-{}.img".format(host, self.args.release, self.args.release, self.args.architecture)

    @property
    def disk_image(self):
        return "{}.img".format(self.args.name)

    @property
    def seed_image(self):
        return "{}-seed.img".format(self.args.name)

    @property
    def libvirt_arch(self):
        mapping = {
            'amd64': 'x86_64',		# Requires qemu-system-x86
            'arm64': 'aarch64',		# Requires qemu-system-arm
            's390x': 's390x',		# Requires qemu-system-s390x
            'ppc64el': 'ppc64le',	# Requires qemu-system-ppc
        }
        return mapping[self.args.architecture]

    def dry_run_print(self, str):
        print("DRY RUN: {}".format(str))

    def download_as(self, url, path):
        if self.args.dry_run:
            print("Download {} as {} ".format(url, path))
        else:
            subprocess.check_call(["wget", url, "-O", path])

    def gen_seed_image(self):
        with open(self.args.pubkey, "r") as f:
            pubkey_data = f.read().rstrip("\n")

        with tempfile.TemporaryDirectory() as tempdir:
            user_data = """#cloud-config

users:
  - name: ubuntu
    ssh-authorized-keys:
      - {}
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    groups: sudo
    shell: /bin/bash

runcmd:
  - echo "AllowUsers ubuntu" >> /etc/ssh/sshd_config
  - systemctl restart sshd.service
""".format(pubkey_data)
            meta_data = "local-hostname: {}".format(self.args.name)
            user_data_path = os.path.join(tempdir, "user-data")
            meta_data_path = os.path.join(tempdir, "meta-data")

            with open(user_data_path, "w") as f:
                f.write(user_data)
            with open(meta_data_path, "w") as f:
                f.write(meta_data)

            cmd = [
                "genisoimage",
                "-output", self.seed_image,
                "-volid", "cidata",
                "-joliet",
                "-rock",
                user_data_path,
                meta_data_path,
            ]
            subprocess.check_call(cmd)

    def main(self, args):
        default_pubkey_path = os.path.join(os.environ["HOME"], ".ssh", "id_rsa.pub")

        parser = ArgumentParser(description="Create UEFI vm from Ubuntu cloud images using libvirt.")
        parser.add_argument("-r", "--release", required=True, help="Ubuntu release to install in vm")
        parser.add_argument("-a", "--architecture", default=self.host_arch, help="CPU architecture (default: host architecture)")
        parser.add_argument("--secure-boot", action="store_true", help="Enable secure boot (amd64 only)")
        parser.add_argument("-m", "--memory", default="2048", help="Amount of RAM in MB (default: 2048)")
        parser.add_argument("-c", "--cpus", default="2", help="Number of CPUs (default: 2)")
        parser.add_argument("-d", "--disk-size", default="8", help="Size of disk in GB (default: 8)")
        parser.add_argument("-p", "--pubkey", default=default_pubkey_path, help="Path to ssh public key (default: ~/.ssh/id_rsa)")
        parser.add_argument("--dry-run", action="store_true", help="Don't actually create a vm")
        parser.add_argument("name", help="Name of vm")
        self.args = parser.parse_args()
        self.args.pubkey = os.path.expanduser(self.args.pubkey)

        self.download_as(self.cloud_image_url, self.disk_image)
        if self.args.dry_run:
            self.dry_run_print("Resize disk image to {} GB".format(self.args.disk_size))
            self.dry_run_print("Generate seed image")
        else:
            subprocess.check_call(["qemu-img", "resize", self.disk_image, "{}G".format(self.args.disk_size)])
            self.gen_seed_image()

        cmd = [
            "virt-install",
            "--name", self.args.name,
            "--arch", self.libvirt_arch,
        ]

        if self.args.architecture == "amd64":
            if self.args.secure_boot:
                cmd = cmd + ["--feature", "smm=on"]
                uefi_code = "/usr/share/OVMF/OVMF_CODE_4M.ms.fd"
            else:
                uefi_code = "/usr/share/OVMF/OVMF_CODE_4M.fd"
            cmd += [
                "--boot",
                "loader={},loader_ro=yes,loader_type=pflash".format(uefi_code),
            ]

        cmd = cmd + [
            "--import",
            "--disk", "path={}".format(self.disk_image),
            "--disk", "path={}".format(self.seed_image),
            "--memory", self.args.memory,
            "--vcpus", self.args.cpus,
            "--os-type", "linux",
            "--os-variant", "ubuntu18.04",
            "--graphics", "none",
            "--console", "pty,target_type=serial",
            "--network", "network:default",
        ]
        if self.args.dry_run:
            self.dry_run_print(" ".join(cmd))
        else:
            subprocess.check_call(cmd)

if __name__ == '__main__':
    MakeUefiVm().main(sys.argv)
