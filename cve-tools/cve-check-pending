#!/usr/bin/env python3
#
# Check status of CVEs in pending column
#

import sys
import re
import argparse
import os

from jira import JIRA
from jira.exceptions import JIRAError

MAX_LINE = 6
NUM_DISPLAY = 5

def main():
    parser = argparse.ArgumentParser(
        prog='check_pending_cves',
        description="Check the status of CVE cards in the JIRA CVE board pending column",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        '-n',
        help='Specify the number of CVEs to display',
        default=NUM_DISPLAY,
        type=int
    )
    parser.add_argument(
        '-l',
        help='Specify the number of lines for each CVE to display',
        default=MAX_LINE,
        type=int
    )
    parser.add_argument(
        '-r', '--reverse',
        help='Reverse the output to CVE with the most needed/pending first',
        action=argparse.BooleanOptionalAction,
        default=False,
        type=bool
    )
    args = parser.parse_args()
    num = args.n
    lines = args.l
    reverse = args.reverse

    component = 'CVE'
    project = 'KERN'
    status = 'To Be Deployed'
    jira_server = 'https://warthogs.atlassian.net'
    jira_options = {
        'server': jira_server,
    }

    uct_path = os.environ.get('UCT')
    regex = re.compile('linux.*:.*(needed|pending).*')
    cve_dict = {}
    exception_list = []

    # Import cve_lib in UCT
    try:
        os.chdir(uct_path)
        sys.path.append(uct_path + '/scripts')
        from cve_lib import find_cve
    except:
        print('Please configure $UCT in your shell source file')
        print('Example: export UCT=/home/ubuntu/Documents/ubuntu-cve-tracker')
        print(f'Current $UCT: {uct_path}')
        sys.exit(1)

    # Note: Python JIRA uses ~/.netrc for authentication
    jira = JIRA(jira_options)

    jql = f'project="{project}" AND component="{component}" AND status="{status}"'
    try:
        issues = jira.search_issues(jql)
    except JIRAError as e:
        print('Jira search failed with: {}'.format(e.text))
        print('Have you configured Jira authentication via netrc?')
        sys.exit(1)

    for issue in issues:
        cve_number = issue.fields.summary.split(' ')[0]
        needed_list = []

        try:
            cve_path: str = find_cve(cve_number)
            cve_status = cve_path.split('/')[-2]
        except ValueError as e:
            exception_list.append(f'{cve_number}: cannot find in UCT')
            continue

        if cve_status != 'active':
            exception_list.append(f"{cve_number}: current status is '{cve_status}'")

        with open(f'{cve_path}') as cve_file:
            for line in cve_file.readlines():
                if re.search(regex, line):
                    needed_list.append(f' - {line}')
            cve_dict[cve_number] = needed_list

    sorted_list = sorted(cve_dict, key=lambda cve:len(cve_dict[cve]), reverse=reverse)
    remain = len(sorted_list) - num

    for cve in sorted_list[:num]:
        line_count = 0

        print(cve)
        for entry in cve_dict[cve]:
            if line_count >= lines:
                print(f'   ...and {len(cve_dict[cve]) - line_count} more')
                break
            print(entry, end='')
            line_count += 1

    if remain != 0:
        print(f'...and {remain} more CVE(s)')

    if len(exception_list) > 0:
        print('\n---- Exceptions ----')
        for entry in exception_list:
            print(entry )

if __name__ == '__main__':
    sys.exit(main())

