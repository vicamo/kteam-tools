#!/usr/bin/env python3
#
# Create Jira issue(s) from LP bug(s)
#

# if you get an error like:
#   AttributeError: 'Magic' object has no attribute 'cookie'
# then:
#   apt purge python3-magic OR
#   pip3 install filemagic

import argparse
import json
import sys

from jira import JIRA
from jira.exceptions import JIRAError
from ktl.jira_helpers import jira_meta_field

def main():
    parser = argparse.ArgumentParser(description='Sync CVE issues tagged next to given cycle.')
    parser.add_argument('-c', '--cycle', required=True, help='SRU cycle.')
    parser.add_argument('-d', '--dry-run', action='store_true', help='Enable dry-run mode.')
    args = parser.parse_args()

    jira_server = 'https://warthogs.atlassian.net'
    jira_options = {
        'server': jira_server,
    }

    component = 'CVE'
    project = 'KERN'

    # Note: Python JIRA uses ~/.netrc for authentication
    jira = JIRA(jira_options)

    jql = 'project = "{}" and component = "{}"'.format(project, component)
    try:
        issues = jira.search_issues(jql)
    except JIRAError as e:
        print('Jira search failed with: {}'.format(e.text))
        print('Have you configured Jira authentication via netrc?')
        sys.exit(1)

    cycle_issues = {}
    if issues:
        for issue in issues:
            if not "next" in issue.fields.labels:
                continue
            cycle = jira_meta_field(jira, issue, "Cycle")
            if cycle:
                cycle_issues.setdefault(cycle, []).append(issue)
            else:
                if args.dry_run:
                    print("would add cycle {} comment to {}".format(args.cycle, issue.fields.summary))
                else:
                    print("adding cycle {} comment to {}".format(args.cycle, issue.fields.summary))
                    jira.add_comment(issue, "Cycle: {}".format(args.cycle))

    for cycle in cycle_issues:
        print(cycle)
        for candidate_issue in cycle_issues[cycle]:
            print(candidate_issue.fields.summary)
        print("\n")
    return 0

if __name__ == '__main__':
    sys.exit(main())
