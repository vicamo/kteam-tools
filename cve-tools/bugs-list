#! /usr/bin/python3

# Copyright 2013 Canonical Ltd.
# Author: Andy Whitcroft <apw@canonical.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Allow editing of bugs ..."""

from __future__ import print_function

from optparse import OptionParser

from launchpadlib.launchpad import Launchpad

import re


def main():
    options = {}
    parser = OptionParser(
        usage="usage: %prog -s suite [options] package [...]")
    parser.add_option(
        "-l", "--launchpad", dest="launchpad_instance", default="production")
#    parser.add_option(
#        "-n", "--dry-run", default=False, action="store_true",
#        help="only show removals that would be performed")
#    parser.add_option(
#        "-d", "--distribution", default="ubuntu",
#        metavar="DISTRIBUTION", help="override in DISTRIBUTION")
#    parser.add_option(
#        "-s", "--suite", metavar="SUITE", help="override in SUITE")
#    parser.add_option(
#        "-e", "--version",
#        metavar="VERSION", help="package version (default: current version)")
#    parser.add_option(
#        "-c", "--command", default='unblock',
#        help="migration hint command (default: unlock)")
#
    options, args = parser.parse_args()

    options.launchpad = Launchpad.login_anonymously(
        "bug-list", options.launchpad_instance, version="devel")

    brkfix_re = re.compile("^break-fix:\s*(-|[0-9a-f]+)\s+([0-9a-f]+)", re.I)

    ubuntu = options.launchpad.distributions['ubuntu']
    devel = ubuntu.current_series

    shas = {}

    tasks = ubuntu.searchTasks(tags=['kernel-bug-break-fix'], tags_combinator='All', status=["Invalid","New","Incomplete","Confirmed","Triaged","In Progress","Fix Committed","Fix Released"])
    for task in tasks:
        for line in task.bug.description.split('\n'):
            id = task.bug.id
            match = brkfix_re.search(line)
            if match:
                entry = shas.get(id, [])
                (brk, fix) = (match.group(1), match.group(2))
                if (brk, fix) not in entry:
                    entry.append((brk, fix))
                shas[id] = entry

    # Convert them into CVE style break-fix formatting.
    for bug in shas.keys():
        res = str(bug)
        for (brk, fix) in shas[bug]:
            res += " linux:" + brk + ">" + fix

        print(res)

#                print("%(id)s %(br)s>%(fix)s" % {'id': task.bug.id, 'br': match.group(1), 'fix': match.group(2)})
if __name__ == '__main__':
    main()
