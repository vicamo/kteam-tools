#!/bin/bash

shopt -s extglob

http_proxy=http://squid.internal:3128/
export http_proxy

PATH=$PATH:$HOME/bin

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

out="$HOME/cve-autotriage"

# Rebuild the configuration -- this is consumed by other jobs ensure
# it is replaced atomically.
"$here/cves-config" primary >"$here/cves-autotriage.conf.new" || exit 1
mv -f "$here/cves-autotriage.conf.new" "$here/cves-autotriage.conf"

cd "$out" || exit 1

url_security="lp:ubuntu-cve-tracker"

url_kernel="lp:~canonical-kernel-team/ubuntu-cve-tracker"

wip="cve-tracker-wip"
final="cve-tracker"

mkdir -p "$out/state"
cve_list="$out/state/CVE-list"

time="$SECONDS"

echo "*** reset to kernel changes ..."
if [ ! -d "$wip" ]; then
	#bzr branch lp:~canonical-kernel-team/ubuntu-cve-tracker/kernel-team/ "$wip" || exit 1
	git clone "$url_kernel" "$wip" || exit 1
	(
		cd "$wip" || exit 1
		git config user.name "CVE Autotriage"
		git config user.email kernel-team@lists.ubuntu.com
	)
fi
if [ ! -d "$final" ]; then
	#bzr branch lp:~canonical-kernel-team/ubuntu-cve-tracker/kernel-team/ "$final" || exit 1
	git clone "$url_kernel" "$final" || exit 1
	cp -p "$final/.git/hooks/post-update.sample" "$final/.git/hooks/post-update"
fi

# Perform all the merges application etc in a temporary copy to avoid
# races for consumers.
(
	cd "$out/$wip" || exit 1

	#bzr pull --overwrite lp:~canonical-kernel-team/ubuntu-cve-tracker/kernel-team/ || exit 1
	#bzr revert
	#bzr clean-tree --force --unknown --detritus
	git fetch origin
	git reset --hard origin/master
	git clean -x -f -d

	echo "*** merging upstream changes ..."
	#bzr pull lp:ubuntu-cve-tracker || bzr merge lp:ubuntu-cve-tracker
	#bzr commit -m 'update from upstream'
	git fetch "$url_security" master
	git merge --no-edit -m 'update from security master' FETCH_HEAD

	echo "*** determine development release ..."
	# Work out what the development release is called here.
	devel=`
		PYTHONPATH="${PYTHONPATH:+$PYTHONPATH:}$(pwd)/scripts" python -c '
from cve_lib import devel_release
print devel_release
		'
	`
	echo "$devel"

	# Work out where linux-overlay is.
	echo "*** locate overlays ..."
	overlay="$out/$wip/active/10autotriage.linux"
	[ ! -f "$overlay" ] && overlay="$here/linux-overlay"
	echo "$overlay"

	# Get the list of cves we need to care about.
	(
		time="$SECONDS"

		echo "*** enumerating active cve commits ..."
		cves=(active/CVE-+([0-9])-+([0-9]))
		"$here/cves-commits" "${cves[@]}" >"$cve_list.new"
		"$here/cves-commits-kernel" "${cves[@]}" >"$cve_list.all.new"
		echo "*** enumerating retired cve commits ..."
		cves=(retired/CVE-+([0-9])-+([0-9]))
		"$here/cves-commits" "${cves[@]}" >>"$cve_list.new"
		"$here/cves-commits-kernel" "${cves[@]}" >>"$cve_list.all.new"

		echo "*** enumerating BUG commits ..."
		"$here/bugs-list" >>"$cve_list.new"

		let time="$SECONDS-$time"
		echo "*** listing CVES ... completed in ${time}s"
	) &
	# Prepare the git repos, update them, and cache things for launchpad.
	(
		"$here/cves-prepare" "$here/cves-autotriage.conf" "$out/state"
	) &

	# Allow the above to preceed in parallel, both needed for the below.
	wait

	echo "*** scanning git repositories ..."
	$here/cves-sync2 "$here/cves-autotriage.conf" "$out/state" "$overlay" "$cve_list.new" \
		> "$out/state/CVE-result-all.new"
	grep -v '^[0-9]' "$out/state/CVE-result-all.new" >"$out/state/CVE-result-cves.new"
	grep    '^[0-9]' "$out/state/CVE-result-all.new" >"$out/state/CVE-result-bugs.new"

	mv -f "$out/state/CVE-result-all.new" "$out/state/CVE-result-all"
	mv -f "$out/state/CVE-result-cves.new" "$out/state/CVE-result-cves"
	mv -f "$out/state/CVE-result-bugs.new" "$out/state/CVE-result-bugs"

	diff -u "$out/state/CVE-list" "$out/state/CVE-list.new" > "$out/state/CVE-list.diff"
	pwd > "$out/state/CVE-PWD"
	diff -u "$out/state/CVE-list" "$out/state/CVE-list.new" > "CVE-list"
	git add CVE-list
	git commit -m "cve list"

	mv -f "$out/state/CVE-list.new" "$out/state/CVE-list"
	mv -f "$out/state/CVE-list.all.new" "$out/state/CVE-list.all"

	# Extract the list of CVE tracker cves.
	declare cves=(`< "$cve_list" awk '($1 !~ "^[0-9]") { print $1 }'`)
	declare cves_all=(`cat "$cve_list.all"`)

	echo "*** rejuvenating CVEs with patches ..."
	"$here/cve-rejuvenate" "active/00boilerplate.linux" "${cves[@]}"

	echo "*** applying primary updates ..."
	sort "$out/state/CVE-result-cves" | $here/cves-tracker-update2 "$devel" >"$out/state/CVE-update2.log" 2>&1
	#bzr diff >"$out/state/CVE-update2.patch"
	git diff >"$out/state/CVE-update2.patch"

	#echo "*** applying primary updates ..."
	#$here/cves-tracker-update "$devel" <"$out/state/CVE-result-cves" 2>"$out/state/CVE-update.log"
	#bzr diff >"$out/state/CVE-update1.patch"

	# echo "*** applying rebases ..."
	# $here/cves-rebase-transfer "$here/cves-autotriage.conf" "$devel" "${cves[@]}" | \
	#	$here/cves-tracker-update --rebase "$devel"

	echo "*** fixing metaonly packages ..."
	$here/cves-mark-metaonly "$here/cves-autotriage.conf" "$devel" "${cves[@]}"

	echo "*** fixing -release pocket (and -updates for unsupported releases) ..."
	$here/cves-mark-pockets "$here/cves-autotriage.conf" "$out/state" "$devel" "${cves[@]}"

	echo "*** fixing ESM releases ..."
	$here/cves-mark-esm "$here/cves-autotriage.conf" "$devel" "${cves_all[@]}"

	echo "*** fixing ignored releases ..."
	$here/cves-mark-ignored "$here/cves-autotriage.conf" "$devel" "${cves_all[@]}"

	echo "*** fixing ignored non-lp releases ..."
	$here/cves-mark-non-lp "$here/cves-autotriage.conf" "$devel" "${cves[@]}"

	echo "*** eliminating no-op rejuvenations ..."
	not_required=$(git diff --no-prefix | "$here/cve-rejuvenate-eliminator")
	if [ "$not_required" != "" ]; then
		git checkout -f $not_required
	fi
	#bzr commit -m 'autotriage' active
	git add "CVE-list"
	git commit -m 'autotriage' active
	touch "$out/state/RETIRED.patch"
	#bzr diff >"$out/state/RETIRED.patch.new"
	git diff >"$out/state/RETIRED.patch.new"
	#bzr revert
	git checkout -f

	changes=$(
		diff -u "$out/state/RETIRED.patch" "$out/state/RETIRED.patch.new" | \
		awk '
			BEGIN					{ additions=0; }
			/^@@ / {
				before=$2; sub(".*,", "", before);
				after=$3; sub(".*,", "", after);
			}
			/^\+\+\+\+ /				{ next; } # Filename
			(/^\+/ && (before > 0 || after > 0))	{ additions=additions + 1; }
			(/^[ -]/ && before > 0)			{ before=before - 1; }
			(/^[ +]/ && after > 0)			{ after=after - 1; }
			END					{ print(additions); }
		'
	)
	if [ "$changes" -ne 0 ]; then
		"$here/../bin/announce" cve-autotriage-retired "cve-autotriage retired regression" \
			 "We have new changes in retired CVEs"
	fi
	mv "$out/state/RETIRED.patch.new" "$out/state/RETIRED.patch"

	echo "*** generating notes ..."
	{
		$here/cves-notes-found-in "$here/cves-autotriage.conf" "$devel" \
			"$out/state/CVE-result-all" &&
		$here/cves-notes-pockets "$here/cves-autotriage.conf" "$out/state" "$devel" "${cves[@]}"
	} >"$out/state/CVE-notes.new" && {
		if [ ! -f "$out/state/CVE-notes" ] || \
		   ! cmp -s "$out/state/CVE-notes.new" "$out/state/CVE-notes"; then     
			echo "notes updated"
			mv -f "$out/state/CVE-notes.new" "$out/state/CVE-notes"
		fi
	}
)

# All done with the cve tracker ... publish.
(
	#cd "$out/$final" || exit 1
	cd "$wip" || exit 1

	echo "*** finding new CVEs that still need triage ..."
	cves=(active/CVE-+([0-9])-+([0-9]))
	"$here/cves-commits-needs-triage" "${cves[@]}" >"$cve_list.needs-triage.new"
	# Report any new needs-triage bugs.
	touch "$cve_list.needs-triage"
	diff -u "$cve_list.needs-triage" "$cve_list.needs-triage.new" | grep '^+[^+]' | sed -e 's@^\+.*/@@' | \
	while read cve
	do
		"$here/../bin/announce" cve-autotriage-needs-triage "$cve: needs-triage" \
		    "https://people.canonical.com/~ubuntu-security/cve/?cve=$cve"
	done
	mv -f "$out/state/CVE-list.needs-triage.new" "$out/state/CVE-list.needs-triage"

	echo "*** updating published version ..."
	#if bzr diff --old "../$wip" >/dev/null 2>&1; then
	#	echo "NOTE: tree unchanged"
	#else
	#	echo "NOTE: tree changed"
		#bzr pull --overwrite "../$wip"
		#bzr revert
	#fi
	git push "../$final" +master
	(cd "../$final" && git reset --hard master)
)

# We have updated the tracker so now is the time to update the matrix.
echo "*** updating cve matrix ..."
"$here/cve-matrix/update-cve-tracker"

### Finally generate bug updates.
##(
##	echo "*** generating pending bug list ..."
##	"$here/cves-applied2" "$out/state/tagid.db" 'dump-bugs' >"$out/state/bugs-pending"
##	awk '{print $1 " " $2 " " $4}' <"$out/state/bugs-pending" >"$HOME/public_html/status/bug-pending.new"
##	mv -f "$HOME/public_html/status/bug-pending.new" "$HOME/public_html/status/bug-pending"
##
##	echo "*** generating bug updates ..."
##	{
##		cat "$out/state/CVE-result-bugs"
##		awk '{ print $1 " " $2 " " $3 " - released applied" }' <"$out/state/bugs-pending"
##	} | \
##	tee "$HOME/public_html/status/bug-updates.txt.new" | \
##	"$here/bugs-report" | \
##	{
##		echo "# BUG updates required as at `date`"
##		echo "#I# updated-seconds `date +%s`"
##		cat -
##	} >"$HOME/public_html/status/bug-status-full.txt.new"
##	egrep -v "^(#.#|$)" "$HOME/public_html/status/bug-status-full.txt.new" >"$HOME/public_html/status/bug-status.txt.new"
##
##	mv -f "$HOME/public_html/status/bug-updates.txt.new" "$HOME/public_html/status/bug-updates.txt"
##	mv -f "$HOME/public_html/status/bug-status-full.txt.new" "$HOME/public_html/status/bug-status-full.txt"
##	mv -f "$HOME/public_html/status/bug-status.txt.new" "$HOME/public_html/status/bug-status.txt"
##)

# Datestamp the log to aid debug.
let time="$SECONDS-$time"
echo "UPDATE: completed in $time"

date
