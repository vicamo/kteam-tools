#!/usr/bin/python3
from __future__ import print_function

import sys

from ktl.kernel_series import KernelSeries

kernel_series = KernelSeries()

# Commands: primary|removals
cmd = sys.argv[1]

if cmd == "cleanup":
    print("update TagDetail set Live=0;")

upstreams = []
derived = {}
upstream_derived = {}
for series in sorted(kernel_series.series, key=KernelSeries.key_series_name):
    if not series.opening_ready('repositories'):
        continue
    if not series.supported and not series.development:
        continue
    for source in sorted(series.sources, key=lambda x: x.name):
        if not source.supported and not series.development:
            continue

        for connected in (source.derived_from, source.copy_forward):
            while connected:
                primary = derived.setdefault((connected.series.name, connected.name), [])
                if source not in primary:
                    primary.append(source)
                connected = connected.derived_from

        versions = source.versions
        if versions:
            version = versions[-1]
            if version not in upstreams:
                upstreams.append(version)
            upstream_derived.setdefault(version, []).append(source.series.codename + '_' + source.name)

upstreams = sorted(upstreams, key=lambda x: [ int(y) for y in x.split('.') ])

# We always want to scan linus' tree.
if cmd == 'primary':
    print("upstream linux linux-linus.git master scan,tags-git:v* - git://git.launchpad.net/~ubuntu-kernel-test/+git/linus--linux")
elif cmd == "cleanup":
    print("update TagDetail set Live=1 where Series='upstream' and Source='linux';")

url = 'git://git.launchpad.net/~ubuntu-kernel-test/+git/linux-stable'
for version in upstreams:
    version_short = version
    if version_short.endswith('.0'):
        version_short = version_short[:-2]

    if cmd == 'primary':
        print("upstream linux-{version_short} stable-queue-branches.git stable-queue-{version_short} scan,tags-git:v{version_short}.*,transfer-pending:{transfer},transfer-message:in%s%v,transfer-message-tip:in%s{version_short}.y%squeue - {url}".format(version_short=version_short, url=url, transfer="|".join(upstream_derived[version])))
    elif cmd == "cleanup":
        print(f"update TagDetail set Live=1 where Series='upstream' and Source='linux-{version_short}';")
    url='-'

flags_eol = 'tags-lp,mark-ignored,mark-ignored-message:end%sof%slife'
flags_unsupported = 'scan,tags-lp,mark-pockets,unsupported'

urls_seen = {}
for series in sorted(kernel_series.series, key=KernelSeries.key_series_name):
    if not series.opening_ready('repositories'):
        continue
    for source in sorted(series.sources, key=lambda x: x.name):
        url = '-'
        branch = '-'

        # Find the matching package for this source -- if there is not
        # one found this is likely a -meta only branch.
        package = source.lookup_package(source.name)
        if not package:
            if not source.derived_from:
                continue
        if package and package.repo:
            (url, branch) = (package.repo.url, package.repo.branch)

        # We should not attempt to triage kernels which are private other than the exceptions below.
        # XXX: we should add a "cve-triage: yes" or equivalent in kernel-series for this.
        if (
            source.private
            and "fips" not in source.name
            and "ibm-gt" not in source.name
        ):
            continue

        # Support package in a supported series, which is meta only.
        if source.supported and (series.supported or series.development) and (not package or "fde" in source.name):
            orig_source = source.derived_from.name
            if orig_source == "linux-azure-cvm":
               orig_source = "linux-azure"
            flags = 'tags-lp,mark-pockets,unsupported,metaonly-link:{}_{}'.format(source.derived_from.series.codename, orig_source)

        # Supported package in a supported series.
        elif (source.supported and series.supported) or series.development:
            flags = 'scan,tags-lp,mark-pockets'
            derived_key = (source.series.name, source.name)
            if derived_key in derived:
                result = []
                for derived_source in derived[derived_key]:
                    result.append("{}_{}".format(derived_source.series.codename, derived_source.name))
                if len(result) > 0:
                    found_in = "{}%s{}".format(source.series.codename, source.name)
                    flags += ",transfer-pending:{targets},transfer-message:@pending%spending%srebase%s{source},transfer-message-tip:@pending%sin%s{source}".format(targets="|".join(result),source=found_in)

        # A completely dead series.
        else:
            flags = flags_eol
            url = '-'
            branch = '-'

        if url == '-':
            repo = '-'
        else:
            #variant = source.name
            #if variant.startswith('linux'):
            #    variant = variant[5:]
            #repo = "ubuntu-{series}{variant}.git".format(series=source.series.codename, variant=variant)
            repo = "{series}-{source}.git".format(series=source.series.codename, source=source.name)
            if url in urls_seen:
                repo = urls_seen[url]
                url = '-'
            else:
                urls_seen[url] = repo

        series_esm_legacy = series.codename == "trusty"

        series_codename = series.codename

        # IBM-GT kernels are in ibm-cloud/ (this includes the -fips variant)
        if "ibm-gt" in source.name:
            series_codename = 'ibm-cloud/' + series_codename

        # FIPS kernels are recorded under fips/ and fips-updates/
        elif "-fips" in source.name:
            series_codename = 'fips-updates/' + series_codename

        # bluefield kernels are in bluefield
        elif "bluefield" in source.name:
            series_codename = 'bluefield/' + series_codename

        elif series.esm:
            if series_codename in ('precise', 'trusty'):
                series_codename = series_codename + '/esm'
            else:
                series_codename = 'esm-infra/' + series_codename

        if flags != flags_unsupported and flags != flags_eol:
            if series.esm:
                if cmd == 'primary':
                    print("{series} {source} {repo} {branch} {flags} - {url}".format(series=source.series.codename, source=source.name, branch='-', flags='mark-ignored,mark-ignored-message:now%send-of-life', url='-', repo='-'))
                elif cmd == "cleanup":
                    print(f"update TagDetail set Live=1 where Series='{series.codename}' and Source='{source.name}';")

            if series.esm or source.severe_only:
                flags = flags + ',mark-esm'
            if "-fips" in source.name:
                if cmd == "primary":
                    flags_fips = flags + ",archives:security-Release-ppa:ubuntu-advantage/ubuntu/fips,updates-Release-ppa:ubuntu-advantage/ubuntu/fips"
                    print("{series} {source} {repo} {branch} {flags} - {url}".format(series=f"fips/{series.codename}", source=source.name, branch=branch, flags=flags_fips, url=url, repo=repo))
                elif cmd == "cleanup":
                    print(f"update TagDetail set Live=1 where Series='fips/{series.codename}' and Source='{source.name}';")

            # Build an archive summary flag.
            #  <archives-flag>:  archives:<archives-entry>|<archives-entry>
            #  <archives-entry>: <pocket>-<archive-pocket>-<archive-reference>
            archives = []
            archives_legacy = []
            for destination_name, streamed in [
                ('release',  False),
                ('security',  False),
                ('updates',  False),
                ('proposed', True),
                ('build',    True)
            ]:
                destination = list(reversed(source.routing.lookup_route(destination_name)))
                if destination is not None and len(destination):
                    for entry in destination:
                        if streamed:
                            entry_name = entry.name
                        else:
                            entry_name = entry.route.name
                        archives.append(f"{entry_name}-{entry.pocket}-{entry.reference}")

                        if destination_name in ("security", "updates"):
                            entry_name = "release"
                        archives_legacy.append(f"{entry_name}-{entry.pocket}-{entry.reference}")
                if destination_name == "updates":
                    archives_legacy.append(f"updates-Release-ppa:ubuntu-esm/ubuntu/esm-infra-legacy-security")

            flags_legacy = flags
            if len(archives_legacy):
                flags_legacy += ',archives:' + "|".join(archives_legacy)

            if len(archives):
                flags = flags + ',archives:' + "|".join(archives)

            if series_esm_legacy:
                if cmd == "primary":
                    print("{series} {source} {repo} {branch} {flags} - {url}".format(series=series_codename, source=source.name, branch=branch, flags=flags, url=url, repo=repo))
                    series_codename = "esm-infra-legacy/" + series.codename
                    flags = flags_legacy + ",legacy"
                elif cmd == "cleanup":
                    print(f"update TagDetail set Live=1 where Series='{series_codename}' and Source='{source.name}';")

        if series_codename.startswith("ibm-cloud/"):
            flags += ",no-usn"

        if cmd == 'primary':
            print("{series} {source} {repo} {branch} {flags} - {url}".format(series=series_codename, source=source.name, branch=branch, flags=flags, url=url, repo=repo))
        elif cmd == "cleanup":
            if ',scan,' in ',' + flags + ',':
                print(f"update TagDetail set Live=1 where Series='{series_codename}' and Source='{source.name}';")
        elif cmd == 'removals':
            if ',scan,' not in ',' + flags + ',':
                print("update TagDetail set Valid=0 where series='{series}' and source='{source}';".format(series=series_codename, source=source.name))

if cmd == 'primary':
    print("{series} {source} {repo} {branch} {flags} - {url}".format(series='product', source='linux-krillin', branch='-', flags=flags_eol, url='-', repo='-'))
    print("{series} {source} {repo} {branch} {flags} - {url}".format(series='product', source='linux-vegetahd', branch='-', flags=flags_eol, url='-', repo='-'))
