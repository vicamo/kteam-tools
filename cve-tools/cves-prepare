#!/bin/bash

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

repos="$HOME/cve-autotriage"

creds="$repos/.credentials"

work="$1"
cache="$2"

lp_cache="$cache/lp"
mkdir -p "$lp_cache/manual"

# Fetch and cache all the LP info we are going
# to use (in parallel with the git manipulation)
#rm -f "$lp_cache"/*
(
	time="$SECONDS"
	echo "*** caching LP cve-pockets/tags ..."

	"$here/cves-kernel-versions-prepare" "$creds" "$work" "$lp_cache"

	let time="$SECONDS-$time"
	echo "*** caching LP cve-pockets/tags ... completed in ${time}s"
) 1>&2 &
(
	time="$SECONDS"
	echo "*** checking for non-lp releases ..."

	"$here/track-non-lp-releases" "$lp_cache/manual"

	let time="$SECONDS-$time"
	echo "*** checking for non-lp releases ... completed in ${time}s"
) 1>&2 &

# Ensure all upstream repositories exist.
echo "*** creating missing repos ... " 1>&2
while read series cvebranch repo branch flags tos url X
do
	(
		if [ "$url" = '-' -o "$url" = '' ]; then
			exit 0
		fi

		echo "*** checking $repo ..."
		remote='origin'
		cd "$repos" || exit 1
		if [ ! -d "$repo" ]; then
			echo "*** cloning $repo ..."
			if [ "$repo" != "linux-linus.git" ]; then
				git clone --bare --reference linux-linus.git "$url" "$repo"
			else
				git clone --bare "$url" "$repo"
			fi
		fi
		cd "$repo" || exit 1

		rc=0
		curr=`git config "remote.$remote.url"` || rc=1
		if [ "$rc" -eq 0 -a "$curr" != "$url" ]; then
			echo "*** removing $remote remote ($curr) ..."
			git remote rm "$remote" || true
			curr=""
		fi
		if [ "$curr" = "" ]; then
			echo "*** adding $remote remote ($url) ..."
			git remote add "$remote" "$url"
		fi
	) 1>&2
done <"$work"

# Fetch all of the upstream repos in parallel.
echo "*** updating all repos ..." 1>&2
prev_repo=""
while read series cvebranch repo branch flags tos url X
do
	if [ "$url" = '-' ]; then
		continue
	fi
	
	case "$prev_repo" in
	*,$repo,*)		continue ;;
	esac
	prev_repo="$prev_repo,$repo,"

	(
		time="$SECONDS"
		echo "*** fetching $repo ... "

		cd "$repos/$repo" || exit 1
		git fetch origin '+refs/heads/*:refs/heads/*' '+refs/tags/*:refs/tags/*'
		touch ".live"

		let time="$SECONDS-$time"
		echo "*** fetching $repo ... completed in ${time}s"
	) 1>&2
done <"$work" &

wait
