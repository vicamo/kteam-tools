#!/usr/bin/python3
#
# cves-git-tags
#
import sys
import re

from subprocess     import Popen, PIPE

versions = sys.argv[1:]

# Find the date of the release pointed to by this tag
def tag_date(tag):
    cmd = [ 'git', 'log', '-1', '--format=format:%ct', tag ]
    return Popen(cmd, stdout=PIPE).communicate()[0]


# Find the debian version of the release pointed to by this tag
commit_changelog = re.compile(r'^:.*\s(\S*/changelog)')
commit_version = re.compile(r'\((.*)\)')
def tag_version(tag):
    # Find the filename of the changelog
    cmd = [ 'git', 'show', '--raw', tag ]
    p = Popen(cmd, stdout=PIPE)

    changelog = None
    for line in p.stdout:
        match = commit_changelog.search(line)
        if match:
            changelog = match.group(1)
            break

    if not changelog:
        return tag

    # Grab the first line and pull the version string out of it
    cmd = [ 'git', 'cat-file', '-p', "%s:%s" % (tag, changelog) ]
    p = Popen(cmd, stdout=PIPE)
    line = p.stdout.readline()
    match = commit_version.search(line)
    if match:
        return match.group(1)

    return tag


# Get a list of tags for this version/abi combination
tag_ubuntu = re.compile(r'(Ubuntu.*-([0-9\.]+)-([0-9]+)\.[0-9]+.*)')
def git_taglist(version, abi):
    tags = []
    # Grab the first line and pull the version string out of it
    cmd = [ 'git', 'tag', '-l', 'Ubuntu-*' ]
    p = Popen(cmd, stdout=PIPE)
    for line in p.stdout:
        match = tag_ubuntu.match(line)
        if match:
            if match.group(2) == version and \
                   (int(match.group(3)) / 100) == int(abi) / 100:
                tags.append(match.group(1))
    return tags


# Find the list of tags for each version
tags = []
for version_abi in versions:
    (version, abi) = version_abi.split('-')

    tags += git_taglist(version, abi)

# Take the list of tags and order it by time.
tags_ts = []
for tag in tags:
    tags_ts.append((tag_date(tag), tag, tag_version(tag)))
tags_ts.sort()
tags = [ (tag_name, tag_version) for tag_ts, tag_name, tag_version in tags_ts ]

for (tag_name, tag_version) in tags:
    print tag_name + " " + tag_version
