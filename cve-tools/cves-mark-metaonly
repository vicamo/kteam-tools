#!/usr/bin/python3

import os
import re

from argparse import ArgumentParser


class Apply:

    def __init__(self, config=None, state=None):

        self.config = config
        self.state = state

        self.version_map = {}

        # Load the configuration looking for 
        with open(self.config) as cfd:
            links = []

            for line in cfd:
                # jammy linux-azure-fde jammy-linux-azure.git azure-fde tags-lp,mark-pockets,unsupported,metaonly-link:jammy_linux-azure - -
                bits = line.rstrip().split()
                series, source = bits[0:2]
                flags = bits[4].split(",")
                for flag, value in [(flag.split(":", 1) + [None])[0:2] for flag in flags]:
                    if flag == "metaonly-link":
                        for link_to in value.split(","):
                            link_series, link_source = link_to.split("_")

                            links.append(((series, source), (link_series, link_source)))

        self.links = links

        for (series, source), (link_series, link_source) in links:
            versions = self.load_versions(series, source)
            link_versions = self.load_versions(link_series, link_source)

            vmap = {}
            for link in link_versions:
                for version in versions:
                    if version.startswith(link):
                        vmap[link] = version

            self.version_map[(series, source)] = vmap

    def load_versions(self, series, source):
        versions = []
        version_path = os.path.join(self.state, "lp", f"{series}_{source}_tags")
        ##print(version_path)
        if os.path.exists(version_path):
            with open(version_path) as vfd:
                versions = [line.rstrip() for line in vfd]

        return versions

    def apply_cve(self, cve):
        cve_re = re.compile(r"^([^_\s]+)_([^:\s]+):\s+([^\s]+)(\s+\((.*)\))?")
        cve_data = {}
        with open(cve) as cfd:
            for line in cfd:
                match = cve_re.match(line)
                if match:
                    cve_data[(match.group(1), match.group(2))] = (match.group(3), match.group(5))

        for key, versions in self.version_map.items():
            if key in cve_data:
                state, note = cve_data[key]
                if state in ("pending", "needed", "released", "not-affected"):
                    if note in versions:
                        note = versions[note]
                    print(cve, *key, "-", state, note)

class Application:

    def main(self):
        parser = ArgumentParser()
        parser.add_argument("config")
        parser.add_argument("state")
        parser.add_argument("cves", nargs="+")

        args = parser.parse_args()

        apply = Apply(config=args.config, state=args.state)
        for cve in args.cves:
            apply.apply_cve(cve)


if __name__ == "__main__":
        Application().main()
