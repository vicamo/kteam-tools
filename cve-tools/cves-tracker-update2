#!/usr/bin/python3
#
# cves-tracker-update -- merge tracker updates
#
from __future__ import print_function

import os
import sys

direct = False
if sys.argv[1] == '--direct-copy':
    direct = True
    sys.argv.pop(1)

devel = sys.argv[1]

def version_key(version):
    bits = version.split(".")
    result = []
    for bit in bits:
        try:
            bit = int(bit)
        except ValueError:
            bit = 10000
        result.append(bit)
    return result

def update_entry(cve, entry):
    #print("apply", cve)

    cur = []
    new = []

    if "upstream_linux" in entry:
        upstreams = set()
        for line_item, line_data in entry.items():
            if line_item.startswith("upstream_linux-"):
                status, version = line_data
                if status == "released":
                    if version == "pending":
                        version = line_item[15:] + ".y"
                    upstreams.add(version)
            versions = [entry["upstream_linux"][1]] + sorted(upstreams, key=version_key)
        entry["upstream_linux"] = (entry["upstream_linux"][0], ", ".join(versions))

    emitted = False
    with open(cve, "r") as cfd:
        for line in cfd:
            line = line.rstrip('\n')
            cur.append(line)
            new.append(line)

            line_bits = line.split(':')
            if len(line_bits) != 2:
                continue

            (line_item, line_data) = line_bits
            if line_item.startswith('upstream_linux'):
                line_item_lookup = 'upstream_linux'
            else:
                line_item_lookup = line_item
            if line_item_lookup not in entry:
                continue
            (ent_state, ent_annot) = entry[line_item_lookup]

            line_data_bits = line_data.split(None, 1) + [ '' ]
            if len(line_data_bits) < 2:
                continue
            (line_state, line_annot) = line_data_bits[0:2]

            esm_criteria = ('(was needed ESM criteria)', '(was needs-triage ESM criteria)', '(ESM criteria, was needed)', '(ESM criteria, was needs-triage)')
            # DNE entries are as if they are not present.  deferred and ignored
            # are manual states.
            if line_state in ('deferred', 'ignored'):
                if not line_annot in esm_criteria:
                    continue

            # We only every update entries if they have a version in them, those
            # with words in are assumed set by a human.
            if len(line_annot) >= 2 and not line_annot[1].isdigit() and not line_annot in esm_criteria:
                continue

            if len(line_annot) >= 3:
                line_annot = line_annot[1:-1]

            # Work out the new state and annotation -- all upstream entries are the same.
            (new_state, new_annot) = (line_state, line_annot)

            # In direct mode just copy the source to the destination verbatim.
            if direct:
                (new_state, new_annot) = (ent_state, ent_annot)

            elif ent_state == 'needs-triage':
                if line_state in [ 'active', 'needs-triage', 'pending', 'released' ]:
                    (new_state, new_annot) = (ent_state, '')

            elif ent_state == 'needed':
                (new_state, new_annot) = (ent_state, '')

            elif ent_state == 'not-affected' and ent_annot in ('', 'pending'):
                (new_state, new_annot) = (ent_state, '')

            elif ent_state == 'not-affected':
                if line_item.startswith('upstream_'):
                    (new_state, new_annot) = ('released', ent_annot)
                else:
                    (new_state, new_annot) = (ent_state, ent_annot)

            elif ent_state == 'released' and ent_annot == 'pending':
                (new_state, new_annot) = ('pending', '')

            elif ent_state == 'released':
                if line_item.startswith('upstream_'):
                    (new_state, new_annot) = ('released', ent_annot)
                elif (line_state not in ['not-affected', 'released', 'pending'] or
                    line_annot != ent_annot):
                    (new_state, new_annot) = ('pending', ent_annot)

            else:
                continue

            if (line_state, line_annot) != (new_state, new_annot):
                new_line = line_item + ': ' + new_state
                if new_annot != '':
                    new_line += ' (' + new_annot + ')'
                new.pop()
                new.append(new_line)
                #print(cve, line_item, (ent_state, ent_annot), (line_state, line_annot), '=>', (new_state, new_annot))
                if not emitted:
                    emitted = True
                    print(cve)
                print('-', line)
                print('+', new_line)

    if cur != new:
        with open(cve + '.new', 'w') as nfd:
            print('\n'.join(new), file=nfd)
        os.rename(cve + '.new', cve)


cve = None
cve_prev = None
entry = {}

for line in sys.stdin:
    (cve, series, package, shas, state, version) = line.strip().split(None, 5)
    if cve_prev and cve_prev != cve:
        update_entry(cve_prev, entry)
        entry = {}
    cve_prev = cve

    # In active CVEs we can update devel.
    if not cve.startswith('retired/'):
        if series == devel:
            series = 'devel'

    if version == '-':
        version = ''
    entry[series + '_' + package] = (state, version)
if cve_prev:
        update_entry(cve_prev, entry)
