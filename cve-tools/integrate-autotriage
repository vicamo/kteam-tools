#!/usr/bin/bash

here=$(dirname "$(readlink -f "${0}")")


usage() {
	echo "Usage: $0 [--dry-run] [<target branch>]" 1>&2
	exit 1
}

dry_run=
while getopts ":n" arg
do
	shift
	case $arg in
	n)	dry_run=y
		;;
	*)
		usage
		;;
	esac
done
if [ "$#" -ne 0 -a "$#" -ne 1 ]; then
	usage
fi
if [ "$#" -lt 1 ]; then
	set - origin/autotriage
fi

target="$1"

diff="/tmp/integrate.patch.$$"

extract_active()
{
	git diff .."$target" active | "$here/extract-something" "$@" >>"$diff"
}

extract_flat()
{
	git diff .."$target" ibm-cloud | "$here/extract-something" "$@" >>"$diff"
}

if [ -d "active" ]; then
	extract()
	{
		extract_active "$@"
	}
else
	extract()
	{
		extract_flat "$@"
	}
fi

commit()
{
	echo "$@" | head -1
	if [ -s "$diff" ]; then
		git apply --index <"$diff"
		git commit --author "Kernel CVE Autotriage <ubuntu-kernel-bot+cve-autotriage@canonical.com>" -a -s -m "$@"
	fi
	rm -f "$diff"
}

commit_individual()
{
	echo "$@" | head -1
	if [ -s "$diff" ]; then
		git apply <"$diff"
		for cve in $(lsdiff "$diff")
		do
			git commit -s -m "${@/@CVE@/${cve##*/}}" "${cve#*/}"
		done
	fi
	rm -f "$diff"
}

commit_applied_cve()
{
	local cve="$1"
	shift
	echo "$@" | head -1
	git commit -s -m "${@/@CVE@/${cve##*/}}" -a
	rm -f "$diff"
}

squash()
{
	git -c core.editor=: commit -a -s --ame
}

# Grab the current autotriage data.
git fetch origin

main=$(git for-each-ref refs/heads/main)
if [ "$main" ]; then
	origin_branch="main"
else
	origin_branch="master"
fi
base="origin/autotriage~1"

# FOR SECURITY: Build the for-security branch.
git checkout -B integrate/for-security "$base"

extract --phase between --against upstream --right released
commit "\
House Keeping: upstream version updates

Update all of the current upstream versions including references to the stable
branches in which the fixes were found.
"

extract --phase between --left needs-triage --right needed
commit "\
House Keeping: changes now known and needed

Accept all change triggered by adding break-fix data.
"

extract --phase between --left needs-triage --right needs-triage
extract --phase between --left needed --right needed
commit "\
House Keeping: ESM/EOL priority changes triggered transitions in and out of ignored

States changing because the priority of an ESM tracker has changes allowing to
enter or leave ignored but in the same nominal state.  These are benign and
auto-reversible.
"

extract --phase between --left DNE --right ignored
commit "\
House Keeping: state changes DNE to ignored

When the boilerplate for a kernel changes to switch it out of DNE
this is honoured and applied to all CVEs.
"

extract --phase between --left not-affected --right not-affected
commit "\
House Keeping: version changes in not-affected

We are updating a kernel from not-affected either without a version or with
an incorrect version to the now correct version.  None of these are significant
because both versions were versions before the release version and so no USN
updates are needed.
"

extract --phase between --left released --right released
commit "\
House Keeping: version changes in released

We are updating a kernel version in released but remaining in released.  This
tells us the kernel is actually not supported and so no USN will be needed.
"

extract --phase between --left released --right not-affected
commit "\
House Keeping: state changes released to not-affected

We are updating a kernel version from released to not-affected.  This tells us the kernel
is not affected, updates to a USN may be required.
"

extract --phase between --left not-affected --right released
commit "\
House Keeping: state changes not-affected to released

We are updating a kernel version from not-affected to released.  This tells us
the kernel actually was affect but is now fixed, it is likely unsupported and
so no USN will be needed.
"

extract --phase between --left needs-triage --left needed --left pending --right pending --right not-affected --right released
commit "\
House Keeping: patches now applied

These changes represent patches now found applied possibly with versions.
"

extract --phase between --left not-affected --right pending
commit "\
House Keeping: not-affected to pending

We are updating the kernel version from not-affected to pending.  This may
welll require a USN.
"

extract --phase between --left released --right pending --version-older
commit "\
House Keeping: released to pending at older version

We are updating the kernel version from released to pending at an older version.
This a safe but might require an updated USN.
"

extract --phase between --left released --right pending
commit "\
House Keeping: released to pending at newer version

We are updating the kernel version from released to pending at an newer version.
This needs reviing and likely requires an updated USN.
"

extract --phase between --left pending --right needed --left-reason-none --right-reason-none
commit "\
House Keeping: pending to needed without version

We are pulling a fix back from pending to needed.  We are versionless
in both cases so this will not have been reported as present.
"

extract --phase between --right DNE
commit "\
House Keeping: kernels which no longer exist

We are marking a kernel as DNE because it no longer exists in the
archive.
"

extract --phase pure
commit "\
House Keeping: rejuvenated trackers

Tracker updates pulling in additional kernel stanzas.
"

extract --phase between --left released --left not-affected --left pending --right needed \
 --against trusty/esm
commit "\
House Keeping: trusty/esm no longer has a pending

trusty/esm no longer has a pending tip (it belongs to esm-infra-security-legacy).
"

extract --phase between --left eol
commit "\
House Keeping: previously EOL commit without status now triaged

We have a previously 'end of life' entry without a previous status and we
are now able to triage it.
"

# REVIEW: build the review branch.
git checkout -B integrate/review

extract --phase between --left released --left not-affected --left pending --right needed
commit_individual "\
@CVE@: upstream fixes no longer present

Upstream has dropped or reverted the fix we are expecting this needs special
review.
"

# RETIRED: from here we are going to move CVEs about so we will trigger the
# change detector.  Do it now before do so.
if [ -d "active" ]; then
	git diff --quiet .."$target" active || {
		echo "WARNING: changes remain"
		git diff .."$target" active >ACTIVE.patch
	}
else
	git diff --quiet .."$target" . || {
		echo "WARNING: changes remain"
		git diff .."$target" active >ACTIVE.patch
	}
fi

if [ -d "retired" ]; then
	limit="retired/CVE-*"

	# Work out which CVEs fall into the range.
	changed_boring=$(git show "$target" -- "$limit" | awk '
		BEGIN {
			file = ""
			needed = 0
			wanted = 1
		}
		/^\+\+\+/ {
			if (file != "" && needed == 1 && wanted == 1) {
				print(file)
			}
			file = $2;
			needed = 0
			wanted = 1
			sub("b/", "", file);
			next;
		}
		/^\+.*: needed/ {
			needed = 1
		}
		/^\+.*, was needed/ {
			needed = 1
		}
		/^\+fips\// {
			next;
		}
		/^\+fips-preview\// {
			next;
		}
		/^\+.*(end of standard support, was needed)/ {
			next;
		}
		/^\+.*(ESM criteria, was needed)/ {
			next;
		}
		/^\+.*(end of life, was needed)/ {
			next;
		}
		# We have a needed which is not fips/EOL, ignore.
		/^\+.*:\s+needed/ {
			wanted = 0
		}
		/^\+.*, was needed/ {
			wanted = 0
		}
		END {
			if (file != "" && needed == 1 && wanted == 1) {
				print(file)
			}
		}
	')
	changed_boring=$(echo $changed_boring)
	if [ "$changed_boring" ]; then
		git checkout integrate/for-security

		for change in $changed_boring
		do
			# Apply that change to our tree.
			git show "$target" $change | git apply --index

			# Move them back to active/
			git mv $change active/

			# Rejuvenate this tracker.
			$here/cve-rejuvenate boilerplates/linux ${change/retired\//active/}

			commit_applied_cve $change "\
@CVE@: upstream fixes now needed for fips-preview/EOL series

A change is newly needed in retired but for a non-critical series.  Either
fips-preview or for a series already EOL.  Restore to active/ and rejuvenate.
"
		done
		git checkout integrate/review
		git rebase integrate/for-security
	fi

	# Work out which CVEs fall into the range.
	changed=$(git show "$target" -- "$limit" | awk '
		/^\+\+\+/ {
			file = $2;
			sub("b/", "", file);
			next;
		}
		/^\+.*:\s+needed/ {
			if (file != "") {
				print(file);
				file = "";
			}
		}
	' | sort -u)
	changed=$(echo $changed)

	for change in $changed
	do
		case " $changed_boring " in
		*\ $change\ *)	echo "SKIPPING $change"; continue ;;
		esac

		# Apply that change to our tree.
		git show "$target" $change | git apply --index

		# Move them back to active/
		git mv $change active/

		commit_applied_cve $change "\
@CVE@: upstream fixes no longer present (retired regression)

Upstream has dropped or reverted the fix we are expecting this needs special
review; this occured in retired/.  Restore to active/.
"
	done
fi

if [ "$dry_run" ]; then
	echo "DRY-RUN: results not pushed"
	exit 0
fi

echo "Updating for-security and review results ..."
git push --force-with-lease origin integrate/for-security:for-security
git push --force-with-lease origin integrate/review:review
