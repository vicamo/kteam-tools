#!/usr/bin/python3

from __future__ import print_function

import os
import sys

sys.path.append('scripts')

from cve_lib import all_releases, devel_release


def new_entry(new, data):
    if new == devel_release:
        new = line.replace(devel_release + '_', 'devel_')

    if (data.strip() == 'DNE' and
        new in boilerplate_entry and
        boilerplate_entry[new].strip() != 'DNE'
        ):
        data = boilerplate_entry[new]

    return new + ': ' + data


retired = False
if len(sys.argv) > 1 and sys.argv[1] == '-r':
    sys.argv.pop(1)
    retired = True

if len(sys.argv) < 3:
    print("Usage:" + sys.argv[0] + " <boilerplate> <cve> ...", file=sys.stderr)
    sys.exit(1)

boilerplate = sys.argv[1]
cves = sys.argv[2:]

# Load up the boilerplate as a guide as to what might be missing.
no_devel = False
boilerplate_order = []
boilerplate_sections = {}
boilerplate_entry = {}
in_section = False
with open(boilerplate) as bpfd:
    section = None
    for line in bpfd:
        if len(line.strip()) == 0:
            in_section = False
        bits = line.split(':', 1)
        ##print(len(bits), bits)
        if len(bits) >= 1 and bits[0].startswith('Patches_'):
            in_section = True
            section = bits[0]
            boilerplate_sections[section] = []
            boilerplate_order.append(section)
        if in_section and line[0] != ' ' and line[0][0].islower() and len(bits) > 1 and not bits[0].startswith('Patches_'):
            # If we see the name of the nominal development release in the boilerplate
            # then we do not actually have a development release right now.
            if bits[0] == devel_release:
                no_devel = True
            boilerplate_entry[bits[0]] = bits[1].strip()
            if retired:
                line = line.replace('devel_', devel_release + '_')
            boilerplate_sections[section].append(line)

if devel_release == '':
    no_devel = True
if no_devel is True:
    devel_release = ""
    all_releases.append('devel')

def handle_section(in_section, section):
    boilerplate = boilerplate_sections.get(in_section, [])

    # Pick out the existing ones so we can tell what is missing.
    previous_key = None
    for line in section:
        bits = line.split(':', 1)
        section_devel = None
        if bits[0].startswith("devel_"):
            series, _ = previous_key.split("_", 1)
            section_devel = None
            for cursor_series in reversed(all_releases):
                if "/" in cursor_series:
                    continue
                if cursor_series == series:
                    break
                section_devel = cursor_series
        if "/" not in bits[0]:
            previous_key = bits[0]

    if section_devel == "snap":
        print(f"section_devel={section_devel} devel_release={devel_release}")
        print(all_releases)

    entries = {}
    section_new = []
    for line in section:
        if section_devel is not None and section_devel != devel_release and line[0:6] == "devel_":
            print(f"FIXING DEVEL {section_devel}")
            line = section_devel + line[5:]
        section_new.append(line)

        bits = line.split(':', 1)
        entries[bits[0]] = line

    wanted = False
    boilerplate_present = "NONE"
    boilerplate_before = {}
    for line in reversed(boilerplate):
        bits = line.split(':', 1)
        if bits[0] not in entries:
            #if (
            #    not bits[1].startswith(" DNE")
            #    and not bits[1].startswith(" ignored")
            #):
            #    boilerplate_before.setdefault(boilerplate_present, []).append(line)
            #if (
            #    "/" not in bits[0]
            #    or not bits[1].startswith(" DNE")
            #):
            #    boilerplate_before.setdefault(boilerplate_present, []).append(line)
            #boilerplate_before.setdefault(boilerplate_present, []).append(line)
            if (
                not bits[1].startswith(" DNE")
                and not bits[1].startswith(" ignored")
            ):
                wanted = True
        else:
            boilerplate_present = bits[0]
    for line in section_new + ["NONE"]:
        bits = line.split(':', 1)
        if wanted:
            for missing in reversed(boilerplate_before.get(bits[0], [])):
                print(missing, end="", file=rfd)
        if line != "NONE":
            print(line, end="", file=rfd)

for cve in cves:
    if not retired and cve[:7] != "active/":
        continue
    if retired and cve[:7] == "active/":
        continue
    print(cve)
    with open(cve, "r") as cfd, open(cve + ".new", "w") as rfd:
        # Load the existing sections and add any missing boilerplate lines.
        seen_sections = {}
        previous_idx = None
        line_idx = None
        in_section = None
        section = []
        for line in cfd:
            if len(line) > 0 and line[0] == ' ':
                pass
            elif len(line.strip()) == 0:
                if in_section is not None:
                    handle_section(in_section, section)
                    section = []
                in_section = None
            bits = line.split(':', 1)
            if len(bits) >= 1 and bits[0].startswith('Patches_'):
                if in_section is not None:
                    handle_section(in_section, section)
                    section = []
                seen_sections[bits[0]] = True
                in_section = bits[0]
            if in_section:
                section.append(line)

            ##print(previous_idx, line_idx, line, end='')
            if in_section is None:
                print(line, end='', file=rfd)
            previous_idx = line_idx

        if in_section is not None:
            handle_section(in_section, section)

        # Add and completly missing packages.
        for section in boilerplate_order:
            if section not in seen_sections:
                wanted = False
                for entry in boilerplate_sections[section]:
                    bits = entry.split()
                    if not bits[0].startswith("upstream_") and bits[1] not in ("DNE", "ignored"):
                        wanted = True
                if wanted:
                    print('\n' + section + ':\n' + ''.join(boilerplate_sections[section]), end='', file=rfd)

    # Finally install it.
    os.rename(cve + '.new', cve) 
