#!/bin/bash

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

if [ "$#" != 1 ]; then
	echo "Usage: $0 <out>" 1>&2
	exit 1
fi
out="$1"
state="$out"

mkdir -p "$state"

now=`date +%s`
date=`date '+%d-%b-%Y %H:%M'`

let later="$now+100"

status="$out/dashboard"

parse_reset()
{
	R_group='-'
	R_host='-'
	R_rhost='-'
	R_title='-'
	R_stamp='-'
	R_warning='-'
	R_alert='-'
	R_note='-'
	R_state='-'
	R_order='50'
}
parse_emit()
{
	# Handle basic multipliers -- add the iteration interval of the
	# dashboard itself.
	if [ "$R_warning" != '-' ]; then
		case "$R_warning" in
		*m)	let R_warning="${R_warning%m}*60" ;;
		*h)	let R_warning="${R_warning%h}*3600" ;;
		*hr)	let R_warning="${R_warning%hr}*3600" ;;
		esac
		let R_warning="$R_warning+(5*60)"
	fi
	if [ "$R_alert" != '-' ]; then
		case "$R_alert" in
		*m)	let R_alert="${R_alert%m}*60" ;;
		*h)	let R_alert="${R_alert%h}*3600" ;;
		*hr)	let R_alert="${R_alert%hr}*3600" ;;
		esac
		let R_alert="$R_alert+(5*60)"
	fi

	# Map direct state assigment.
	case "$R_state" in
	-)	;;
	G)	R_state="good" ;;
	W)	R_state="warn" ;;
	A)	R_state="alert" ;;
	*)	R_state="unknown" ;;
	esac

	# Apply time limits if the state is not yet known and we have a stamp.
	delta='-'
	if [ "$R_state" = '-' -a "$R_stamp" != '-' ]; then
		let delta="$now-$R_stamp"
		if [ "$delta" -gt "$R_alert" ]; then
			R_state="alert"
		elif [ "$delta" -gt "$R_warning" ]; then
			R_state="warn"
		else
			R_state="good"
		fi
	fi

	[ "$R_state" = '-' ] && R_state='unknown'

	# If we do not have a host, copy the rhost over.
	[ "$R_host" = '-' -a "$R_rhost" != '-' ] && R_host="$R_rhost"

	case "$R_group" in
	Dashboard)	gorder="00" ;;
	Host:*)		gorder="90" ;;
	Unit:*)		gorder="90" ;;
	*)		gorder="50" ;;
	esac

	echo "$gorder $R_group $R_order $R_title $R_host $delta $R_state $R_note"
}
parse_v1()
{
	parse_reset
	read R_group R_host R_title R_stamp R_warning R_alert R_note || return 1

	[ "$R_warning$R_alert" = '--' ] && R_state="$R_stamp"
	[ "$R_note" = '' ] && R_note='-'

	return 0
}
parse_v2()
{
	local ret

	parse_reset
	read -a R || return 1

	for param in "${R[@]}"
	do
		declare -g "R_$param"
	done

	return 0
}

{
	while read dhost url
	do
		wget -q -O "$state/$dhost.all" "$url"
		[ ! -f "$state/$dhost.all" ] && continue

		while read file
		do
			url=`dirname "$url"`"/$file"
			# Get this if we can ... ignore it, we will use the previous data.
			wget -q -O "$state/$file.new" "$url"

			if [ ! -f "$state/$file.new" ]; then
				echo "UNKNOWN 0 UNKNOWN MISSING%sDASHBOARD 0 unknown $url" >"$state/$file.new"
			fi
			mv "$state/$file.new" "$state/$file"
		done <"$state/$dhost.all"
	done <"$0.conf"

	#echo "00 Dashboard 10 Scheduled%sUpdate `hostname` 0 good -"
	for file in "$state"/*.dash
	do
		# v1 Host:%sgloin gloin Update%sRepos 1425301160 90000 93600 
		# v2 V2 group=Host:%sgloin host=gloin title=Update%sChroots stamp=1425297795 warning=90000 alert=93600 

		# Assume that the first line is representative of all the enclosed entries.
		read version junk <"$file"
		case "$version" in
		V2)		parse="parse_v2" ;;
		V[0-9]*)	echo "Unknown version $version -- ignored"
				continue ;;
		*)		parse="parse_v1" ;;
		esac

		# Read and emit all of the lines.
		while $parse
		do
			parse_emit
		done <"$file"
	done
} | \
    sort | \
    tee "$status.txt.new"

"$here/dashboard-update-html" <"$status.txt.new" >"$status.html.new"

"$here/dashboard-update-announce" "$status.txt" "$status.txt.new"

if [ ! -f "$out/jquery-3.2.1.min.js" ]; then
	cp -p "$here/jquery-3.2.1.min.js" "$out/jquery-3.2.1.min.js"
fi
mv -f "$status.html.new" "$status.html"
mv -f "$status.txt.new" "$status.txt"
