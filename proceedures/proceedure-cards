#!/usr/bin/env python3

import argparse
import os
import sys
import yaml

from jira import JIRA
from jira.exceptions import JIRAError
# GreenHopperResource has been renamed to AgileResource in Jira 3.3.0, make
# sure to support both classes.
try:
    from jira.resources import AgileResource
except ImportError:
    from jira.resources import GreenHopperResource as AgileResource


class SRUBoardError(Exception):
    pass


class JIRAIssues:
    def __init__(self, project_key, component=None, epic_key=None, dryrun=False):
        '''
        :param project_key: The project in which the issues will be created
        :param component: The component to add to the issues
        '''
        self.jira = JIRA('https://warthogs.atlassian.net/',
            options={'agile_rest_path': AgileResource.AGILE_BASE_REST_PATH})

        self.project_key = project_key
        self.component = component
        self.epic_key = epic_key
        self.dryrun = dryrun

        # Lookup custom fields we are going to use.
        for field in self.jira.fields():
            if field['name'] == 'Epic Link':
                self.epic_link = field['key']

        self.issues = {}

    def add_issue(self, name, desc=None, state=None, prereqs=None, subtask_of=None):
        """
        Add the given card to the board.

        :param name: card name
        :param desc: card description
        :param state: initial issue state
        :param pereqs: blocking issues
        :param subtask_of: parent issue
        :return: None
        """

        if prereqs is None:
            prereqs = []

        params = {
            'project': {'key': self.project_key},
            'summary': name,
        }
        if subtask_of is not None:
            task_key = self.issues[subtask_of]
            print(" ", "subtask with parent", task_key)
            params['issuetype'] = {'name': 'Sub-task'}
            params['parent'] = {'key': task_key}
        else:
            print(" ", "task")
            params['issuetype'] = {'name': 'Task'}
            if self.epic_key is not None:
                print(" ", "add epic-key", self.epic_key)
                params[self.epic_link] = self.epic_key
        if desc is not None:
            params['description'] = desc
        if self.component is not None:
            print(" ", "add component", self.component)
            params['components'] = [{'name': self.component}]

        if self.dryrun:
            print('DRY: Add "{}" issue in "{}"'.format(name, state))
            if desc:
                print('DRY:     "{}"'.format(desc))
        else:
            print('Adding issue: {}'.format(name))
            issue = self.jira.create_issue(fields=params)
            print(issue)

            #if self.component is not None:
            #    print(" ", "add component", self.component)
            #    issue.add_field_value('components', {'name': self.component})

            if state == 'On Deck':
                print(" ", "move -> To Do")
                self.jira.transition_issue(issue, transition='To Do')
            self.issues[name] = issue.key

            for prereq in prereqs:
                print(" ", "add prereq", prereq)
                prereq_key = self.issues[prereq]
                self.jira.create_issue_link('Blocks', prereq_key, issue.key)


    def add_bulk(self, issues):
        for issue in issues:
            self.add_issue(issue['name'], issue.get('description', ''), issue.get('list', 'In Backlog'), issue.get('prerequisites'), issue.get('subtask-of'))


if __name__ == '__main__':

    description = 'Create a set of JIRA issues'
    epilog = '''
The script reads the configuration from a yaml file, creates issues
in a selected project.
'''
    parser = argparse.ArgumentParser(description=description, epilog=epilog,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('project', help='JIRA project key', action='store')
    parser.add_argument('config', help='issue configuration yaml file', action='store')
    parser.add_argument('--component', help='issue component with project', action='store')
    parser.add_argument('--epic-key', help='EPIC issue XXXX-nnn', action='store')
    parser.add_argument('--dry-run', help='dry-run option', action='store_true')
    args = parser.parse_args()

    with open(args.config) as cfd:
        config = yaml.safe_load(cfd)
    issues = JIRAIssues(args.project, args.component, args.epic_key, dryrun=args.dry_run)
    issues.add_bulk(config['cards'])
